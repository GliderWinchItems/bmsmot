
L431.elf:     file format elf32-littlearm


Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003534 	.word	0x08003534

080001b4 <frame_dummy>:
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <frame_dummy+0x24>)
 80001b6:	b510      	push	{r4, lr}
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4908      	ldr	r1, [pc, #32]	; (80001dc <frame_dummy+0x28>)
 80001bc:	4808      	ldr	r0, [pc, #32]	; (80001e0 <frame_dummy+0x2c>)
 80001be:	f3af 8000 	nop.w
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x30>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b903      	cbnz	r3, 80001ca <frame_dummy+0x16>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <frame_dummy+0x34>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0fb      	beq.n	80001c8 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	bf00      	nop
 80001d8:	00000000 	.word	0x00000000
 80001dc:	20000014 	.word	0x20000014
 80001e0:	08003534 	.word	0x08003534
 80001e4:	20000010 	.word	0x20000010
 80001e8:	00000000 	.word	0x00000000

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97e 	b.w	8000500 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460e      	mov	r6, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9d08      	ldr	r5, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d150      	bne.n	80002ce <__udivmoddi4+0xb2>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96c      	bls.n	800030c <__udivmoddi4+0xf0>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0420 	rsb	r4, lr, #32
 8000240:	fa20 f404 	lsr.w	r4, r0, r4
 8000244:	fa01 f60e 	lsl.w	r6, r1, lr
 8000248:	ea44 0c06 	orr.w	ip, r4, r6
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000258:	0c22      	lsrs	r2, r4, #16
 800025a:	fbbc f0f9 	udiv	r0, ip, r9
 800025e:	fa1f f887 	uxth.w	r8, r7
 8000262:	fb09 c610 	mls	r6, r9, r0, ip
 8000266:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800026a:	fb00 f308 	mul.w	r3, r0, r8
 800026e:	42b3      	cmp	r3, r6
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x6a>
 8000272:	19f6      	adds	r6, r6, r7
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8122 	bcs.w	80004c0 <__udivmoddi4+0x2a4>
 800027c:	42b3      	cmp	r3, r6
 800027e:	f240 811f 	bls.w	80004c0 <__udivmoddi4+0x2a4>
 8000282:	3802      	subs	r0, #2
 8000284:	443e      	add	r6, r7
 8000286:	1af6      	subs	r6, r6, r3
 8000288:	b2a2      	uxth	r2, r4
 800028a:	fbb6 f3f9 	udiv	r3, r6, r9
 800028e:	fb09 6613 	mls	r6, r9, r3, r6
 8000292:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000296:	fb03 f808 	mul.w	r8, r3, r8
 800029a:	45a0      	cmp	r8, r4
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x96>
 800029e:	19e4      	adds	r4, r4, r7
 80002a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x2a0>
 80002a8:	45a0      	cmp	r8, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x2a0>
 80002ae:	3b02      	subs	r3, #2
 80002b0:	443c      	add	r4, r7
 80002b2:	ebc8 0404 	rsb	r4, r8, r4
 80002b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	2d00      	cmp	r5, #0
 80002be:	d062      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c0:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c4:	2300      	movs	r3, #0
 80002c6:	602c      	str	r4, [r5, #0]
 80002c8:	606b      	str	r3, [r5, #4]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0xc6>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d055      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e885 0041 	stmia.w	r5, {r0, r6}
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x1f0>
 80002ec:	42b3      	cmp	r3, r6
 80002ee:	d302      	bcc.n	80002f6 <__udivmoddi4+0xda>
 80002f0:	4282      	cmp	r2, r0
 80002f2:	f200 80f8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 80002f6:	1a84      	subs	r4, r0, r2
 80002f8:	eb66 0603 	sbc.w	r6, r6, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	46b4      	mov	ip, r6
 8000300:	2d00      	cmp	r5, #0
 8000302:	d040      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000304:	e885 1010 	stmia.w	r5, {r4, ip}
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	b912      	cbnz	r2, 8000314 <__udivmoddi4+0xf8>
 800030e:	2701      	movs	r7, #1
 8000310:	fbb7 f7f2 	udiv	r7, r7, r2
 8000314:	fab7 fe87 	clz	lr, r7
 8000318:	f1be 0f00 	cmp.w	lr, #0
 800031c:	d135      	bne.n	800038a <__udivmoddi4+0x16e>
 800031e:	1bf3      	subs	r3, r6, r7
 8000320:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f0f8 	udiv	r0, r3, r8
 800032e:	0c22      	lsrs	r2, r4, #16
 8000330:	fb08 3610 	mls	r6, r8, r0, r3
 8000334:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000338:	fb0c f300 	mul.w	r3, ip, r0
 800033c:	42b3      	cmp	r3, r6
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19f6      	adds	r6, r6, r7
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42b3      	cmp	r3, r6
 800034a:	f200 80ce 	bhi.w	80004ea <__udivmoddi4+0x2ce>
 800034e:	4610      	mov	r0, r2
 8000350:	1af6      	subs	r6, r6, r3
 8000352:	b2a2      	uxth	r2, r4
 8000354:	fbb6 f3f8 	udiv	r3, r6, r8
 8000358:	fb08 6613 	mls	r6, r8, r3, r6
 800035c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000360:	fb0c fc03 	mul.w	ip, ip, r3
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f103 32ff 	add.w	r2, r3, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b5 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 8000376:	4613      	mov	r3, r2
 8000378:	ebcc 0404 	rsb	r4, ip, r4
 800037c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000380:	e79c      	b.n	80002bc <__udivmoddi4+0xa0>
 8000382:	4629      	mov	r1, r5
 8000384:	4628      	mov	r0, r5
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0120 	rsb	r1, lr, #32
 800038e:	fa06 f30e 	lsl.w	r3, r6, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f901 	lsr.w	r9, r0, r1
 800039a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800039e:	40ce      	lsrs	r6, r1
 80003a0:	ea49 0903 	orr.w	r9, r9, r3
 80003a4:	fbb6 faf8 	udiv	sl, r6, r8
 80003a8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80003ac:	fb08 661a 	mls	r6, r8, sl, r6
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80003b8:	fb0a f20c 	mul.w	r2, sl, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1be>
 80003c4:	19db      	adds	r3, r3, r7
 80003c6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003ca:	f080 8087 	bcs.w	80004dc <__udivmoddi4+0x2c0>
 80003ce:	429a      	cmp	r2, r3
 80003d0:	f240 8084 	bls.w	80004dc <__udivmoddi4+0x2c0>
 80003d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80003d8:	443b      	add	r3, r7
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	fa1f f989 	uxth.w	r9, r9
 80003e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80003e4:	fb08 3311 	mls	r3, r8, r1, r3
 80003e8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003ec:	fb01 f60c 	mul.w	r6, r1, ip
 80003f0:	429e      	cmp	r6, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1e8>
 80003f4:	19db      	adds	r3, r3, r7
 80003f6:	f101 32ff 	add.w	r2, r1, #4294967295
 80003fa:	d26b      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 80003fc:	429e      	cmp	r6, r3
 80003fe:	d969      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000400:	3902      	subs	r1, #2
 8000402:	443b      	add	r3, r7
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800040a:	e78e      	b.n	800032a <__udivmoddi4+0x10e>
 800040c:	f1c1 0e20 	rsb	lr, r1, #32
 8000410:	fa22 f40e 	lsr.w	r4, r2, lr
 8000414:	408b      	lsls	r3, r1
 8000416:	4323      	orrs	r3, r4
 8000418:	fa20 f70e 	lsr.w	r7, r0, lr
 800041c:	fa06 f401 	lsl.w	r4, r6, r1
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	fa26 f60e 	lsr.w	r6, r6, lr
 8000428:	433c      	orrs	r4, r7
 800042a:	fbb6 f9fc 	udiv	r9, r6, ip
 800042e:	0c27      	lsrs	r7, r4, #16
 8000430:	fb0c 6619 	mls	r6, ip, r9, r6
 8000434:	fa1f f883 	uxth.w	r8, r3
 8000438:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800043c:	fb09 f708 	mul.w	r7, r9, r8
 8000440:	42b7      	cmp	r7, r6
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 fa01 	lsl.w	sl, r0, r1
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x242>
 800044c:	18f6      	adds	r6, r6, r3
 800044e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000452:	d241      	bcs.n	80004d8 <__udivmoddi4+0x2bc>
 8000454:	42b7      	cmp	r7, r6
 8000456:	d93f      	bls.n	80004d8 <__udivmoddi4+0x2bc>
 8000458:	f1a9 0902 	sub.w	r9, r9, #2
 800045c:	441e      	add	r6, r3
 800045e:	1bf6      	subs	r6, r6, r7
 8000460:	b2a0      	uxth	r0, r4
 8000462:	fbb6 f4fc 	udiv	r4, r6, ip
 8000466:	fb0c 6614 	mls	r6, ip, r4, r6
 800046a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800046e:	fb04 f808 	mul.w	r8, r4, r8
 8000472:	45b8      	cmp	r8, r7
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x26a>
 8000476:	18ff      	adds	r7, r7, r3
 8000478:	f104 30ff 	add.w	r0, r4, #4294967295
 800047c:	d228      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 800047e:	45b8      	cmp	r8, r7
 8000480:	d926      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 8000482:	3c02      	subs	r4, #2
 8000484:	441f      	add	r7, r3
 8000486:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800048a:	ebc8 0707 	rsb	r7, r8, r7
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	454f      	cmp	r7, r9
 8000494:	4644      	mov	r4, r8
 8000496:	464e      	mov	r6, r9
 8000498:	d314      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	d029      	beq.n	80004f0 <__udivmoddi4+0x2d4>
 800049c:	b365      	cbz	r5, 80004f8 <__udivmoddi4+0x2dc>
 800049e:	ebba 0304 	subs.w	r3, sl, r4
 80004a2:	eb67 0706 	sbc.w	r7, r7, r6
 80004a6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	40cf      	lsrs	r7, r1
 80004ae:	ea4e 0303 	orr.w	r3, lr, r3
 80004b2:	e885 0088 	stmia.w	r5, {r3, r7}
 80004b6:	2100      	movs	r1, #0
 80004b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004bc:	4613      	mov	r3, r2
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x96>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6e0      	b.n	8000286 <__udivmoddi4+0x6a>
 80004c4:	ebb8 0402 	subs.w	r4, r8, r2
 80004c8:	eb69 0603 	sbc.w	r6, r9, r3
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7e5      	b.n	800049c <__udivmoddi4+0x280>
 80004d0:	4604      	mov	r4, r0
 80004d2:	e7d8      	b.n	8000486 <__udivmoddi4+0x26a>
 80004d4:	4611      	mov	r1, r2
 80004d6:	e795      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7c0      	b.n	800045e <__udivmoddi4+0x242>
 80004dc:	468a      	mov	sl, r1
 80004de:	e77c      	b.n	80003da <__udivmoddi4+0x1be>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e748      	b.n	8000378 <__udivmoddi4+0x15c>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e70a      	b.n	8000300 <__udivmoddi4+0xe4>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443e      	add	r6, r7
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x134>
 80004f0:	45c2      	cmp	sl, r8
 80004f2:	d3e7      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80004f4:	463e      	mov	r6, r7
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x280>
 80004f8:	4629      	mov	r1, r5
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000508:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	2400      	movs	r4, #0
 800050c:	9405      	str	r4, [sp, #20]
 800050e:	9406      	str	r4, [sp, #24]
 8000510:	9407      	str	r4, [sp, #28]
 8000512:	9408      	str	r4, [sp, #32]
 8000514:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b4a      	ldr	r3, [pc, #296]	; (8000640 <MX_GPIO_Init+0x13c>)
 8000518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051a:	f042 0204 	orr.w	r2, r2, #4
 800051e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000522:	f002 0204 	and.w	r2, r2, #4
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000530:	64da      	str	r2, [r3, #76]	; 0x4c
 8000532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000534:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000538:	9201      	str	r2, [sp, #4]
 800053a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	64da      	str	r2, [r3, #76]	; 0x4c
 8000544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000546:	f002 0201 	and.w	r2, r2, #1
 800054a:	9202      	str	r2, [sp, #8]
 800054c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000550:	f042 0202 	orr.w	r2, r2, #2
 8000554:	64da      	str	r2, [r3, #76]	; 0x4c
 8000556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000558:	f002 0202 	and.w	r2, r2, #2
 800055c:	9203      	str	r2, [sp, #12]
 800055e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000562:	f042 0208 	orr.w	r2, r2, #8
 8000566:	64da      	str	r2, [r3, #76]	; 0x4c
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	9304      	str	r3, [sp, #16]
 8000570:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000572:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800064c <MX_GPIO_Init+0x148>
 8000576:	4622      	mov	r2, r4
 8000578:	f24f 31f0 	movw	r1, #62448	; 0xf3f0
 800057c:	4648      	mov	r0, r9
 800057e:	f001 ff35 	bl	80023ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000582:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000650 <MX_GPIO_Init+0x14c>
 8000586:	4622      	mov	r2, r4
 8000588:	210b      	movs	r1, #11
 800058a:	4640      	mov	r0, r8
 800058c:	f001 ff2e 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000590:	4622      	mov	r2, r4
 8000592:	f641 110f 	movw	r1, #6415	; 0x190f
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f001 ff27 	bl	80023ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 800059e:	4e29      	ldr	r6, [pc, #164]	; (8000644 <MX_GPIO_Init+0x140>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	2103      	movs	r1, #3
 80005a4:	4630      	mov	r0, r6
 80005a6:	f001 ff21 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80005aa:	4622      	mov	r2, r4
 80005ac:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80005b0:	4630      	mov	r0, r6
 80005b2:	f001 ff1b 	bl	80023ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b6:	4f24      	ldr	r7, [pc, #144]	; (8000648 <MX_GPIO_Init+0x144>)
 80005b8:	4622      	mov	r2, r4
 80005ba:	2104      	movs	r1, #4
 80005bc:	4638      	mov	r0, r7
 80005be:	f001 ff15 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80005c2:	f24f 33f0 	movw	r3, #62448	; 0xf3f0
 80005c6:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2501      	movs	r5, #1
 80005ca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d0:	a905      	add	r1, sp, #20
 80005d2:	4648      	mov	r0, r9
 80005d4:	f001 fe38 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80005d8:	230b      	movs	r3, #11
 80005da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005e2:	a905      	add	r1, sp, #20
 80005e4:	4640      	mov	r0, r8
 80005e6:	f001 fe2f 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ea:	f641 130f 	movw	r3, #6415	; 0x190f
 80005ee:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	a905      	add	r1, sp, #20
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 fe24 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GRN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GRN_Pin|LED_RED_Pin;
 8000600:	2303      	movs	r3, #3
 8000602:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000604:	2311      	movs	r3, #17
 8000606:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	a905      	add	r1, sp, #20
 800060e:	4630      	mov	r0, r6
 8000610:	f001 fe1a 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000614:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000618:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000620:	a905      	add	r1, sp, #20
 8000622:	4630      	mov	r0, r6
 8000624:	f001 fe10 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000628:	2304      	movs	r3, #4
 800062a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000632:	a905      	add	r1, sp, #20
 8000634:	4638      	mov	r0, r7
 8000636:	f001 fe07 	bl	8002248 <HAL_GPIO_Init>

}
 800063a:	b00b      	add	sp, #44	; 0x2c
 800063c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400
 8000648:	48000c00 	.word	0x48000c00
 800064c:	48000800 	.word	0x48000800
 8000650:	48001c00 	.word	0x48001c00

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000654:	b500      	push	{lr}
 8000656:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_DMA_Init+0x70>)
 800065a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800065c:	f042 0201 	orr.w	r2, r2, #1
 8000660:	649a      	str	r2, [r3, #72]	; 0x48
 8000662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2105      	movs	r1, #5
 8000670:	200b      	movs	r0, #11
 8000672:	f002 f805 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000676:	200b      	movs	r0, #11
 8000678:	f002 f834 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2105      	movs	r1, #5
 8000680:	200c      	movs	r0, #12
 8000682:	f001 fffd 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000686:	200c      	movs	r0, #12
 8000688:	f002 f82c 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2105      	movs	r1, #5
 8000690:	200d      	movs	r0, #13
 8000692:	f001 fff5 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000696:	200d      	movs	r0, #13
 8000698:	f002 f824 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	200e      	movs	r0, #14
 80006a2:	f001 ffed 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006a6:	200e      	movs	r0, #14
 80006a8:	f002 f81c 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2105      	movs	r1, #5
 80006b0:	200f      	movs	r0, #15
 80006b2:	f001 ffe5 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f002 f814 	bl	80026e4 <HAL_NVIC_EnableIRQ>

}
 80006bc:	b003      	add	sp, #12
 80006be:	f85d fb04 	ldr.w	pc, [sp], #4
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80006ca:	6802      	ldr	r2, [r0, #0]
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d101      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 80006d2:	f000 fe57 	bl	8001384 <HAL_IncTick>
 80006d6:	bd08      	pop	{r3, pc}
 80006d8:	40014400 	.word	0x40014400

080006dc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
 80006de:	e7fe      	b.n	80006de <Error_Handler+0x2>

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e2:	480b      	ldr	r0, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x30>)
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x34>)
 80006e6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80006e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006ec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	2300      	movs	r3, #0
 80006f0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f6:	220c      	movs	r2, #12
 80006f8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	f002 fbd1 	bl	8002ea8 <HAL_UART_Init>
 8000706:	b108      	cbz	r0, 800070c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
 8000708:	f7ff ffe8 	bl	80006dc <Error_Handler>
 800070c:	bd08      	pop	{r3, pc}
 800070e:	bf00      	nop
 8000710:	200006c4 	.word	0x200006c4
 8000714:	40013800 	.word	0x40013800

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x30>)
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART3_UART_Init+0x34>)
 800071e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000720:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000724:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	2300      	movs	r3, #0
 8000728:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800072e:	220c      	movs	r2, #12
 8000730:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	f002 fbb5 	bl	8002ea8 <HAL_UART_Init>
 800073e:	b108      	cbz	r0, 8000744 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
 8000740:	f7ff ffcc 	bl	80006dc <Error_Handler>
 8000744:	bd08      	pop	{r3, pc}
 8000746:	bf00      	nop
 8000748:	20000504 	.word	0x20000504
 800074c:	40004800 	.word	0x40004800

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b500      	push	{lr}
 8000752:	b087      	sub	sp, #28

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	9303      	str	r3, [sp, #12]
 800075e:	9304      	str	r3, [sp, #16]
 8000760:	9305      	str	r3, [sp, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <MX_ADC1_Init+0x74>)
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_ADC1_Init+0x78>)
 8000766:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000768:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	2204      	movs	r2, #4
 8000772:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000774:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	2201      	movs	r2, #1
 800077a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000784:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000788:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	f000 fabd 	bl	8000d0c <HAL_ADC_Init>
 8000792:	b108      	cbz	r0, 8000798 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 8000794:	f7ff ffa2 	bl	80006dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_ADC1_Init+0x7c>)
 800079a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2306      	movs	r3, #6
 800079e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a4:	227f      	movs	r2, #127	; 0x7f
 80007a6:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a8:	2204      	movs	r2, #4
 80007aa:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 80007ac:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	4669      	mov	r1, sp
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_ADC1_Init+0x74>)
 80007b2:	f000 fb9d 	bl	8000ef0 <HAL_ADC_ConfigChannel>
 80007b6:	b108      	cbz	r0, 80007bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007b8:	f7ff ff90 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	b007      	add	sp, #28
 80007be:	f85d fb04 	ldr.w	pc, [sp], #4
 80007c2:	bf00      	nop
 80007c4:	20000618 	.word	0x20000618
 80007c8:	50040000 	.word	0x50040000
 80007cc:	04300002 	.word	0x04300002

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <MX_SPI1_Init+0x40>)
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x44>)
 80007d6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007dc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	2300      	movs	r3, #0
 80007e0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007e6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ea:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007fa:	2207      	movs	r2, #7
 80007fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	2308      	movs	r3, #8
 8000802:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	f002 fd1c 	bl	8003240 <HAL_SPI_Init>
 8000808:	b108      	cbz	r0, 800080e <MX_SPI1_Init+0x3e>
  {
    Error_Handler();
 800080a:	f7ff ff67 	bl	80006dc <Error_Handler>
 800080e:	bd08      	pop	{r3, pc}
 8000810:	20000790 	.word	0x20000790
 8000814:	40013000 	.word	0x40013000

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b500      	push	{lr}
 800081a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081c:	2244      	movs	r2, #68	; 0x44
 800081e:	2100      	movs	r1, #0
 8000820:	a805      	add	r0, sp, #20
 8000822:	f002 fe7f 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000826:	2300      	movs	r3, #0
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	9303      	str	r3, [sp, #12]
 8000830:	9304      	str	r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000832:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000836:	f001 fec9 	bl	80025cc <HAL_PWREx_ControlVoltageScaling>
 800083a:	b108      	cbz	r0, 8000840 <SystemClock_Config+0x28>
  {
    Error_Handler();
 800083c:	f7ff ff4e 	bl	80006dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000848:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2210      	movs	r2, #16
 800084c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000852:	2201      	movs	r2, #1
 8000854:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000856:	220a      	movs	r2, #10
 8000858:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085a:	2207      	movs	r2, #7
 800085c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000860:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	a805      	add	r0, sp, #20
 8000864:	f000 fe44 	bl	80014f0 <HAL_RCC_OscConfig>
 8000868:	b108      	cbz	r0, 800086e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800086a:	f7ff ff37 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	2104      	movs	r1, #4
 8000880:	4668      	mov	r0, sp
 8000882:	f001 f985 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000886:	b108      	cbz	r0, 800088c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000888:	f7ff ff28 	bl	80006dc <Error_Handler>
  }
}
 800088c:	b017      	add	sp, #92	; 0x5c
 800088e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000892:	bf00      	nop

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fd67 	bl	8001368 <HAL_Init>

  /* USER CODE BEGIN Init */
  DTW_counter_init();
 800089a:	f002 fd43 	bl	8003324 <DTW_counter_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f7ff ffbb 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f7ff fe2f 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f7ff fed5 	bl	8000654 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008aa:	f7ff ff19 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80008ae:	f7ff ff33 	bl	8000718 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008b2:	f7ff ff4d 	bl	8000750 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008b6:	f7ff ff8b 	bl	80007d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
morse_trap(1234);
 80008ba:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80008be:	f002 fdbd 	bl	800343c <morse_trap>
 80008c2:	e7fe      	b.n	80008c2 <main+0x2e>

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler>
 80008c6:	bf00      	nop

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	e7fe      	b.n	80008c8 <HardFault_Handler>
 80008ca:	bf00      	nop

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler>
 80008ce:	bf00      	nop

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	e7fe      	b.n	80008d0 <BusFault_Handler>
 80008d2:	bf00      	nop

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler>
 80008d6:	bf00      	nop

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008de:	4802      	ldr	r0, [pc, #8]	; (80008e8 <DMA1_Channel1_IRQHandler+0xc>)
 80008e0:	f001 fe0a 	bl	80024f8 <HAL_DMA_IRQHandler>
 80008e4:	bd08      	pop	{r3, pc}
 80008e6:	bf00      	nop
 80008e8:	20000748 	.word	0x20000748

080008ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80008ee:	4802      	ldr	r0, [pc, #8]	; (80008f8 <DMA1_Channel2_IRQHandler+0xc>)
 80008f0:	f001 fe02 	bl	80024f8 <HAL_DMA_IRQHandler>
 80008f4:	bd08      	pop	{r3, pc}
 80008f6:	bf00      	nop
 80008f8:	20000588 	.word	0x20000588

080008fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008fe:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel3_IRQHandler+0xc>)
 8000900:	f001 fdfa 	bl	80024f8 <HAL_DMA_IRQHandler>
 8000904:	bd08      	pop	{r3, pc}
 8000906:	bf00      	nop
 8000908:	200004bc 	.word	0x200004bc

0800090c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800090c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800090e:	4802      	ldr	r0, [pc, #8]	; (8000918 <DMA1_Channel4_IRQHandler+0xc>)
 8000910:	f001 fdf2 	bl	80024f8 <HAL_DMA_IRQHandler>
 8000914:	bd08      	pop	{r3, pc}
 8000916:	bf00      	nop
 8000918:	200005d0 	.word	0x200005d0

0800091c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800091c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800091e:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA1_Channel5_IRQHandler+0xc>)
 8000920:	f001 fdea 	bl	80024f8 <HAL_DMA_IRQHandler>
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	2000067c 	.word	0x2000067c

0800092c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800092c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800092e:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000930:	f001 ff26 	bl	8002780 <HAL_TIM_IRQHandler>
 8000934:	bd08      	pop	{r3, pc}
 8000936:	bf00      	nop
 8000938:	200007f4 	.word	0x200007f4

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b500      	push	{lr}
 800093e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x3c>)
 8000942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000944:	f042 0201 	orr.w	r2, r2, #1
 8000948:	661a      	str	r2, [r3, #96]	; 0x60
 800094a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094c:	f002 0201 	and.w	r2, r2, #1
 8000950:	9200      	str	r2, [sp, #0]
 8000952:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000956:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800095a:	659a      	str	r2, [r3, #88]	; 0x58
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f001 fe87 	bl	8002680 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	b003      	add	sp, #12
 8000974:	f85d fb04 	ldr.w	pc, [sp], #4
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	b0a0      	sub	sp, #128	; 0x80
 8000980:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	2100      	movs	r1, #0
 8000984:	911b      	str	r1, [sp, #108]	; 0x6c
 8000986:	911c      	str	r1, [sp, #112]	; 0x70
 8000988:	911d      	str	r1, [sp, #116]	; 0x74
 800098a:	911e      	str	r1, [sp, #120]	; 0x78
 800098c:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098e:	225c      	movs	r2, #92	; 0x5c
 8000990:	a804      	add	r0, sp, #16
 8000992:	f002 fdc7 	bl	8003524 <memset>
  if(hadc->Instance==ADC1)
 8000996:	6822      	ldr	r2, [r4, #0]
 8000998:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <HAL_ADC_MspInit+0xe8>)
 800099a:	429a      	cmp	r2, r3
 800099c:	d15f      	bne.n	8000a5e <HAL_ADC_MspInit+0xe2>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800099e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009a2:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009a8:	9318      	str	r3, [sp, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ae:	2201      	movs	r2, #1
 80009b0:	9206      	str	r2, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009b2:	2208      	movs	r2, #8
 80009b4:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009b6:	2207      	movs	r2, #7
 80009b8:	9208      	str	r2, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ba:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009bc:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	a804      	add	r0, sp, #16
 80009c6:	f001 fab1 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	b108      	cbz	r0, 80009d0 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80009cc:	f7ff fe86 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <HAL_ADC_MspInit+0xec>)
 80009d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80009da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80009e0:	9201      	str	r2, [sp, #4]
 80009e2:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e6:	f042 0204 	orr.w	r2, r2, #4
 80009ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ee:	f002 0204 	and.w	r2, r2, #4
 80009f2:	9202      	str	r2, [sp, #8]
 80009f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f8:	f042 0201 	orr.w	r2, r2, #1
 80009fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	9303      	str	r3, [sp, #12]
 8000a06:	9b03      	ldr	r3, [sp, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a0c:	260b      	movs	r6, #11
 8000a0e:	961c      	str	r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2500      	movs	r5, #0
 8000a12:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	a91b      	add	r1, sp, #108	; 0x6c
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <HAL_ADC_MspInit+0xf0>)
 8000a18:	f001 fc16 	bl	8002248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a20:	961c      	str	r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	a91b      	add	r1, sp, #108	; 0x6c
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f001 fc0d 	bl	8002248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <HAL_ADC_MspInit+0xf4>)
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_ADC_MspInit+0xf8>)
 8000a32:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a34:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a36:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a4a:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a4e:	f001 fcd3 	bl	80023f8 <HAL_DMA_Init>
 8000a52:	b108      	cbz	r0, 8000a58 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8000a54:	f7ff fe42 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_ADC_MspInit+0xf4>)
 8000a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000a5c:	629c      	str	r4, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5e:	b020      	add	sp, #128	; 0x80
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	50040000 	.word	0x50040000
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	20000748 	.word	0x20000748
 8000a74:	40020008 	.word	0x40020008

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b500      	push	{lr}
 8000a7a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9303      	str	r3, [sp, #12]
 8000a80:	9304      	str	r3, [sp, #16]
 8000a82:	9305      	str	r3, [sp, #20]
 8000a84:	9306      	str	r3, [sp, #24]
 8000a86:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000a88:	6802      	ldr	r2, [r0, #0]
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_SPI_MspInit+0x60>)
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d120      	bne.n	8000ad2 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a90:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a9a:	661a      	str	r2, [r3, #96]	; 0x60
 8000a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000aa2:	9201      	str	r2, [sp, #4]
 8000aa4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa8:	f042 0201 	orr.w	r2, r2, #1
 8000aac:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ab8:	23e0      	movs	r3, #224	; 0xe0
 8000aba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	a903      	add	r1, sp, #12
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f001 fbbb 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad2:	b009      	add	sp, #36	; 0x24
 8000ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad8:	40013000 	.word	0x40013000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	b0a0      	sub	sp, #128	; 0x80
 8000ae0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	911b      	str	r1, [sp, #108]	; 0x6c
 8000ae6:	911c      	str	r1, [sp, #112]	; 0x70
 8000ae8:	911d      	str	r1, [sp, #116]	; 0x74
 8000aea:	911e      	str	r1, [sp, #120]	; 0x78
 8000aec:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aee:	225c      	movs	r2, #92	; 0x5c
 8000af0:	a804      	add	r0, sp, #16
 8000af2:	f002 fd17 	bl	8003524 <memset>
  if(huart->Instance==USART1)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	4a5a      	ldr	r2, [pc, #360]	; (8000c64 <HAL_UART_MspInit+0x188>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d157      	bne.n	8000bae <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000afe:	a820      	add	r0, sp, #128	; 0x80
 8000b00:	2301      	movs	r3, #1
 8000b02:	f840 3d70 	str.w	r3, [r0, #-112]!
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b06:	f001 fa11 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	b108      	cbz	r0, 8000b10 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8000b0c:	f7ff fde6 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b10:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <HAL_UART_MspInit+0x18c>)
 8000b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b18:	661a      	str	r2, [r3, #96]	; 0x60
 8000b1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	9b01      	ldr	r3, [sp, #4]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3a:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2602      	movs	r6, #2
 8000b3e:	961c      	str	r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2500      	movs	r5, #0
 8000b42:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	a91b      	add	r1, sp, #108	; 0x6c
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 fb79 	bl	8002248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b56:	4845      	ldr	r0, [pc, #276]	; (8000c6c <HAL_UART_MspInit+0x190>)
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_UART_MspInit+0x194>)
 8000b5a:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000b5c:	6046      	str	r6, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b66:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b68:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b6a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b6e:	f001 fc43 	bl	80023f8 <HAL_DMA_Init>
 8000b72:	b108      	cbz	r0, 8000b78 <HAL_UART_MspInit+0x9c>
    {
      Error_Handler();
 8000b74:	f7ff fdb2 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b78:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <HAL_UART_MspInit+0x190>)
 8000b7a:	6723      	str	r3, [r4, #112]	; 0x70
 8000b7c:	629c      	str	r4, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000b7e:	483d      	ldr	r0, [pc, #244]	; (8000c74 <HAL_UART_MspInit+0x198>)
 8000b80:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_UART_MspInit+0x19c>)
 8000b82:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b94:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b96:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b98:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b9c:	f001 fc2c 	bl	80023f8 <HAL_DMA_Init>
 8000ba0:	b108      	cbz	r0, 8000ba6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000ba2:	f7ff fd9b 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_UART_MspInit+0x198>)
 8000ba8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000baa:	629c      	str	r4, [r3, #40]	; 0x28
 8000bac:	e058      	b.n	8000c60 <HAL_UART_MspInit+0x184>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000bae:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <HAL_UART_MspInit+0x1a0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d155      	bne.n	8000c60 <HAL_UART_MspInit+0x184>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bb4:	a820      	add	r0, sp, #128	; 0x80
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	f840 3d70 	str.w	r3, [r0, #-112]!
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	f001 f9b6 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	b108      	cbz	r0, 8000bc6 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8000bc2:	f7ff fd8b 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_UART_MspInit+0x18c>)
 8000bc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bce:	659a      	str	r2, [r3, #88]	; 0x58
 8000bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bd2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000bd6:	9202      	str	r2, [sp, #8]
 8000bd8:	9a02      	ldr	r2, [sp, #8]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bdc:	f042 0204 	orr.w	r2, r2, #4
 8000be0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	9303      	str	r3, [sp, #12]
 8000bea:	9b03      	ldr	r3, [sp, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf0:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2602      	movs	r6, #2
 8000bf4:	961c      	str	r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	a91b      	add	r1, sp, #108	; 0x6c
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <HAL_UART_MspInit+0x1a4>)
 8000c06:	f001 fb1f 	bl	8002248 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <HAL_UART_MspInit+0x1a8>)
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_UART_MspInit+0x1ac>)
 8000c0e:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000c10:	6046      	str	r6, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c12:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1a:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1c:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c1e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c22:	f001 fbe9 	bl	80023f8 <HAL_DMA_Init>
 8000c26:	b108      	cbz	r0, 8000c2c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8000c28:	f7ff fd58 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_MspInit+0x1a8>)
 8000c2e:	6723      	str	r3, [r4, #112]	; 0x70
 8000c30:	629c      	str	r4, [r3, #40]	; 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000c32:	4816      	ldr	r0, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0x1b0>)
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_UART_MspInit+0x1b4>)
 8000c36:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c48:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4a:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c4c:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c50:	f001 fbd2 	bl	80023f8 <HAL_DMA_Init>
 8000c54:	b108      	cbz	r0, 8000c5a <HAL_UART_MspInit+0x17e>
    {
      Error_Handler();
 8000c56:	f7ff fd41 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_UART_MspInit+0x1b0>)
 8000c5c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000c5e:	629c      	str	r4, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c60:	b020      	add	sp, #128	; 0x80
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	40013800 	.word	0x40013800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	2000067c 	.word	0x2000067c
 8000c70:	40020058 	.word	0x40020058
 8000c74:	200005d0 	.word	0x200005d0
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	48000800 	.word	0x48000800
 8000c84:	200004bc 	.word	0x200004bc
 8000c88:	40020030 	.word	0x40020030
 8000c8c:	20000588 	.word	0x20000588
 8000c90:	4002001c 	.word	0x4002001c

08000c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b500      	push	{lr}
 8000c96:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f001 fcef 	bl	8002680 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca2:	2019      	movs	r0, #25
 8000ca4:	f001 fd1e 	bl	80026e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_InitTick+0x68>)
 8000caa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cb0:	661a      	str	r2, [r3, #96]	; 0x60
 8000cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	a902      	add	r1, sp, #8
 8000cbe:	a803      	add	r0, sp, #12
 8000cc0:	f001 f858 	bl	8001d74 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc4:	f001 f844 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_InitTick+0x6c>)
 8000cca:	fba3 2300 	umull	r2, r3, r3, r0
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	3b01      	subs	r3, #1

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <HAL_InitTick+0x70>)
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_InitTick+0x74>)
 8000cd6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000cd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cdc:	60c2      	str	r2, [r0, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000cde:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000ce6:	f001 fe4b 	bl	8002980 <HAL_TIM_Base_Init>
 8000cea:	b918      	cbnz	r0, 8000cf4 <HAL_InitTick+0x60>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_InitTick+0x70>)
 8000cee:	f001 fd09 	bl	8002704 <HAL_TIM_Base_Start_IT>
 8000cf2:	e000      	b.n	8000cf6 <HAL_InitTick+0x62>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
}
 8000cf6:	b009      	add	sp, #36	; 0x24
 8000cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	200007f4 	.word	0x200007f4
 8000d08:	40014400 	.word	0x40014400

08000d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d0c:	b530      	push	{r4, r5, lr}
 8000d0e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d14:	2800      	cmp	r0, #0
 8000d16:	f000 80dd 	beq.w	8000ed4 <HAL_ADC_Init+0x1c8>
 8000d1a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000d1e:	b92b      	cbnz	r3, 8000d2c <HAL_ADC_Init+0x20>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d20:	f7ff fe2c 	bl	800097c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	2300      	movs	r3, #0
 8000d26:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d2c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d2e:	6893      	ldr	r3, [r2, #8]
 8000d30:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
 8000d34:	d000      	beq.n	8000d38 <HAL_ADC_Init+0x2c>
 8000d36:	2301      	movs	r3, #1
 8000d38:	b12b      	cbz	r3, 8000d46 <HAL_ADC_Init+0x3a>
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d3a:	6893      	ldr	r3, [r2, #8]
 8000d3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d44:	6093      	str	r3, [r2, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d46:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d48:	6893      	ldr	r3, [r2, #8]
 8000d4a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	d000      	beq.n	8000d52 <HAL_ADC_Init+0x46>
 8000d50:	2301      	movs	r3, #1
 8000d52:	b9c3      	cbnz	r3, 8000d86 <HAL_ADC_Init+0x7a>
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d54:	6893      	ldr	r3, [r2, #8]
 8000d56:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d62:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d64:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <HAL_ADC_Init+0x1d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ee0 <HAL_ADC_Init+0x1d4>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	3301      	adds	r3, #1
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d78:	e002      	b.n	8000d80 <HAL_ADC_Init+0x74>
    {
      wait_loop_index--;
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
    while (wait_loop_index != 0UL)
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f9      	bne.n	8000d7a <HAL_ADC_Init+0x6e>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d86:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d88:	6893      	ldr	r3, [r2, #8]
 8000d8a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	d000      	beq.n	8000d92 <HAL_ADC_Init+0x86>
 8000d90:	2301      	movs	r3, #1
 8000d92:	b94b      	cbnz	r3, 8000da8 <HAL_ADC_Init+0x9c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
 8000da6:	e000      	b.n	8000daa <HAL_ADC_Init+0x9e>
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da8:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000daa:	6893      	ldr	r3, [r2, #8]
 8000dac:	f013 0304 	ands.w	r3, r3, #4
 8000db0:	d000      	beq.n	8000db4 <HAL_ADC_Init+0xa8>
 8000db2:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000db4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000db6:	f011 0f10 	tst.w	r1, #16
 8000dba:	f040 8085 	bne.w	8000ec8 <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8082 	bne.w	8000ec8 <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dc6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6563      	str	r3, [r4, #84]	; 0x54
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dd0:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dd2:	f013 0f01 	tst.w	r3, #1
 8000dd6:	d10b      	bne.n	8000df0 <HAL_ADC_Init+0xe4>
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <HAL_ADC_Init+0x1d8>)
 8000dda:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ddc:	f013 0f01 	tst.w	r3, #1
 8000de0:	d106      	bne.n	8000df0 <HAL_ADC_Init+0xe4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000de2:	6861      	ldr	r1, [r4, #4]
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000de4:	4a40      	ldr	r2, [pc, #256]	; (8000ee8 <HAL_ADC_Init+0x1dc>)
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6093      	str	r3, [r2, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000df0:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8000df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000df4:	ea43 3242 	orr.w	r2, r3, r2, lsl #13
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000df8:	68e3      	ldr	r3, [r4, #12]
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
 8000dfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
 8000dfc:	68a3      	ldr	r3, [r4, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000dfe:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e00:	f894 2020 	ldrb.w	r2, [r4, #32]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e08:	2a01      	cmp	r2, #1
 8000e0a:	d103      	bne.n	8000e14 <HAL_ADC_Init+0x108>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e0e:	3a01      	subs	r2, #1
 8000e10:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e16:	b122      	cbz	r2, 8000e22 <HAL_ADC_Init+0x116>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e18:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e1e:	430a      	orrs	r2, r1
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e20:	4313      	orrs	r3, r2
                  | hadc->Init.ExternalTrigConvEdge
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e22:	6821      	ldr	r1, [r4, #0]
 8000e24:	68cd      	ldr	r5, [r1, #12]
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_ADC_Init+0x1e0>)
 8000e28:	402a      	ands	r2, r5
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e2e:	6821      	ldr	r1, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e30:	688b      	ldr	r3, [r1, #8]
 8000e32:	f013 0304 	ands.w	r3, r3, #4
 8000e36:	d000      	beq.n	8000e3a <HAL_ADC_Init+0x12e>
 8000e38:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e3a:	688a      	ldr	r2, [r1, #8]
 8000e3c:	f012 0208 	ands.w	r2, r2, #8
 8000e40:	d000      	beq.n	8000e44 <HAL_ADC_Init+0x138>
 8000e42:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e44:	bb43      	cbnz	r3, 8000e98 <HAL_ADC_Init+0x18c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e46:	bb3a      	cbnz	r2, 8000e98 <HAL_ADC_Init+0x18c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e48:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e4a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000e4e:	005b      	lsls	r3, r3, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e50:	ea43 3585 	orr.w	r5, r3, r5, lsl #14
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e54:	68ca      	ldr	r2, [r1, #12]
 8000e56:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8000e5a:	f023 0302 	bic.w	r3, r3, #2
 8000e5e:	432b      	orrs	r3, r5
 8000e60:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d111      	bne.n	8000e8e <HAL_ADC_Init+0x182>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e6a:	6825      	ldr	r5, [r4, #0]
 8000e6c:	692b      	ldr	r3, [r5, #16]
 8000e6e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000e72:	f022 0204 	bic.w	r2, r2, #4
 8000e76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e7e:	4319      	orrs	r1, r3
 8000e80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e82:	430b      	orrs	r3, r1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	612b      	str	r3, [r5, #16]
 8000e8c:	e004      	b.n	8000e98 <HAL_ADC_Init+0x18c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	6913      	ldr	r3, [r2, #16]
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e98:	6923      	ldr	r3, [r4, #16]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <HAL_ADC_Init+0x1a4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e9e:	6821      	ldr	r1, [r4, #0]
 8000ea0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ea2:	f023 020f 	bic.w	r2, r3, #15
 8000ea6:	69e3      	ldr	r3, [r4, #28]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	630b      	str	r3, [r1, #48]	; 0x30
 8000eae:	e004      	b.n	8000eba <HAL_ADC_Init+0x1ae>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000eba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ebc:	f023 0303 	bic.w	r3, r3, #3
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8000ec6:	e006      	b.n	8000ed6 <HAL_ADC_Init+0x1ca>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_ADC_Init+0x1ca>
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000ed6:	b003      	add	sp, #12
 8000ed8:	bd30      	pop	{r4, r5, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	053e2d63 	.word	0x053e2d63
 8000ee4:	50040000 	.word	0x50040000
 8000ee8:	50040300 	.word	0x50040300
 8000eec:	fff0c007 	.word	0xfff0c007

08000ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ef0:	b4f0      	push	{r4, r5, r6, r7}
 8000ef2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	f000 821e 	beq.w	800133e <HAL_ADC_ConfigChannel+0x44e>
 8000f02:	2301      	movs	r3, #1
 8000f04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f08:	6803      	ldr	r3, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f013 0304 	ands.w	r3, r3, #4
 8000f10:	d000      	beq.n	8000f14 <HAL_ADC_ConfigChannel+0x24>
 8000f12:	2301      	movs	r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 81fc 	bne.w	8001312 <HAL_ADC_ConfigChannel+0x422>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000f1a:	684b      	ldr	r3, [r1, #4]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d815      	bhi.n	8000f4c <HAL_ADC_ConfigChannel+0x5c>
    {
      switch (sConfig->Rank)
 8000f20:	3b02      	subs	r3, #2
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d810      	bhi.n	8000f48 <HAL_ADC_ConfigChannel+0x58>
 8000f26:	e8df f003 	tbb	[pc, r3]
 8000f2a:	0502      	.short	0x0502
 8000f2c:	0b08      	.short	0x0b08
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	604b      	str	r3, [r1, #4]
          break;
 8000f32:	e00b      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x5c>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000f34:	2312      	movs	r3, #18
 8000f36:	604b      	str	r3, [r1, #4]
          break;
 8000f38:	e008      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x5c>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	604b      	str	r3, [r1, #4]
          break;
 8000f3e:	e005      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x5c>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	604b      	str	r3, [r1, #4]
          break;
 8000f46:	e001      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x5c>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	604b      	str	r3, [r1, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000f4c:	6806      	ldr	r6, [r0, #0]
 8000f4e:	684d      	ldr	r5, [r1, #4]
 8000f50:	680b      	ldr	r3, [r1, #0]
{
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f52:	3630      	adds	r6, #48	; 0x30
 8000f54:	0a2c      	lsrs	r4, r5, #8
 8000f56:	00a4      	lsls	r4, r4, #2
 8000f58:	f004 040c 	and.w	r4, r4, #12

  MODIFY_REG(*preg,
 8000f5c:	5932      	ldr	r2, [r6, r4]
 8000f5e:	f005 051f 	and.w	r5, r5, #31
 8000f62:	271f      	movs	r7, #31
 8000f64:	40af      	lsls	r7, r5
 8000f66:	ea22 0707 	bic.w	r7, r2, r7
 8000f6a:	f3c3 6284 	ubfx	r2, r3, #26, #5
 8000f6e:	fa02 f305 	lsl.w	r3, r2, r5
 8000f72:	433b      	orrs	r3, r7
 8000f74:	5133      	str	r3, [r6, r4]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f76:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f78:	68a3      	ldr	r3, [r4, #8]
 8000f7a:	f013 0304 	ands.w	r3, r3, #4
 8000f7e:	d000      	beq.n	8000f82 <HAL_ADC_ConfigChannel+0x92>
 8000f80:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f82:	68a2      	ldr	r2, [r4, #8]
 8000f84:	f012 0208 	ands.w	r2, r2, #8
 8000f88:	d000      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0x9c>
 8000f8a:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f040 8092 	bne.w	80010b6 <HAL_ADC_ConfigChannel+0x1c6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	f040 808f 	bne.w	80010b6 <HAL_ADC_ConfigChannel+0x1c6>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000f98:	680d      	ldr	r5, [r1, #0]
 8000f9a:	688a      	ldr	r2, [r1, #8]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f9c:	3414      	adds	r4, #20
 8000f9e:	0e6b      	lsrs	r3, r5, #25
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8000fa6:	58e7      	ldr	r7, [r4, r3]
 8000fa8:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8000fac:	2607      	movs	r6, #7
 8000fae:	40ae      	lsls	r6, r5
 8000fb0:	ea27 0606 	bic.w	r6, r7, r6
 8000fb4:	40aa      	lsls	r2, r5
 8000fb6:	4332      	orrs	r2, r6
 8000fb8:	50e2      	str	r2, [r4, r3]

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000fba:	694c      	ldr	r4, [r1, #20]
 8000fbc:	6802      	ldr	r2, [r0, #0]
 8000fbe:	68d3      	ldr	r3, [r2, #12]
 8000fc0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	409c      	lsls	r4, r3

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000fc8:	690d      	ldr	r5, [r1, #16]
 8000fca:	2d04      	cmp	r5, #4
 8000fcc:	d010      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0x100>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000fce:	680b      	ldr	r3, [r1, #0]
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd0:	f102 0760 	add.w	r7, r2, #96	; 0x60

  MODIFY_REG(*preg,
 8000fd4:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8000fd8:	4e91      	ldr	r6, [pc, #580]	; (8001220 <HAL_ADC_ConfigChannel+0x330>)
 8000fda:	4016      	ands	r6, r2
 8000fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fe0:	ea44 0302 	orr.w	r3, r4, r2
 8000fe4:	4333      	orrs	r3, r6
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
 8000fee:	e062      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x1c6>
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000ff2:	6e14      	ldr	r4, [r2, #96]	; 0x60
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000ff4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8000ffe:	b915      	cbnz	r5, 8001006 <HAL_ADC_ConfigChannel+0x116>
 8001000:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001004:	e006      	b.n	8001014 <HAL_ADC_ConfigChannel+0x124>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800100a:	b113      	cbz	r3, 8001012 <HAL_ADC_ConfigChannel+0x122>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	e000      	b.n	8001014 <HAL_ADC_ConfigChannel+0x124>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001012:	2320      	movs	r3, #32
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001014:	42a3      	cmp	r3, r4
 8001016:	d103      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x130>
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  MODIFY_REG(*preg,
 8001018:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800101a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800101e:	6613      	str	r3, [r2, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001020:	6804      	ldr	r4, [r0, #0]
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001024:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001026:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800102a:	680b      	ldr	r3, [r1, #0]
 800102c:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8001030:	b915      	cbnz	r5, 8001038 <HAL_ADC_ConfigChannel+0x148>
 8001032:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001036:	e006      	b.n	8001046 <HAL_ADC_ConfigChannel+0x156>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800103c:	b113      	cbz	r3, 8001044 <HAL_ADC_ConfigChannel+0x154>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	e000      	b.n	8001046 <HAL_ADC_ConfigChannel+0x156>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001044:	2320      	movs	r3, #32
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001046:	4293      	cmp	r3, r2
 8001048:	d103      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x162>
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  MODIFY_REG(*preg,
 800104a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800104c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001050:	6663      	str	r3, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001052:	6804      	ldr	r4, [r0, #0]
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001054:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001056:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001058:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800105c:	680b      	ldr	r3, [r1, #0]
 800105e:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8001062:	b915      	cbnz	r5, 800106a <HAL_ADC_ConfigChannel+0x17a>
 8001064:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001068:	e006      	b.n	8001078 <HAL_ADC_ConfigChannel+0x188>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800106e:	b113      	cbz	r3, 8001076 <HAL_ADC_ConfigChannel+0x186>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	e000      	b.n	8001078 <HAL_ADC_ConfigChannel+0x188>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001076:	2320      	movs	r3, #32
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001078:	4293      	cmp	r3, r2
 800107a:	d103      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x194>
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  MODIFY_REG(*preg,
 800107c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800107e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001082:	66a3      	str	r3, [r4, #104]	; 0x68
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001084:	6804      	ldr	r4, [r0, #0]
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001086:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001088:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800108a:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800108e:	680b      	ldr	r3, [r1, #0]
 8001090:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8001094:	b915      	cbnz	r5, 800109c <HAL_ADC_ConfigChannel+0x1ac>
 8001096:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800109a:	e006      	b.n	80010aa <HAL_ADC_ConfigChannel+0x1ba>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010a0:	b113      	cbz	r3, 80010a8 <HAL_ADC_ConfigChannel+0x1b8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	e000      	b.n	80010aa <HAL_ADC_ConfigChannel+0x1ba>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 80010a8:	2320      	movs	r3, #32
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d103      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x1c6>
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);

  MODIFY_REG(*preg,
 80010ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80010b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010b4:	66e3      	str	r3, [r4, #108]	; 0x6c
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010b6:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	f013 0f01 	tst.w	r3, #1
 80010be:	f040 80d2 	bne.w	8001266 <HAL_ADC_ConfigChannel+0x376>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80010c2:	680b      	ldr	r3, [r1, #0]
 80010c4:	68ca      	ldr	r2, [r1, #12]
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010c6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80010ca:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80010ce:	ea25 0506 	bic.w	r5, r5, r6
 80010d2:	f002 0618 	and.w	r6, r2, #24
 80010d6:	4a53      	ldr	r2, [pc, #332]	; (8001224 <HAL_ADC_ConfigChannel+0x334>)
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	4013      	ands	r3, r2
 80010dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e0:	432b      	orrs	r3, r5
 80010e2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80010e6:	68ca      	ldr	r2, [r1, #12]
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <HAL_ADC_ConfigChannel+0x338>)
 80010ea:	429a      	cmp	r2, r3
 80010ec:	f040 80bb 	bne.w	8001266 <HAL_ADC_ConfigChannel+0x376>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010f0:	6805      	ldr	r5, [r0, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010f2:	680b      	ldr	r3, [r1, #0]
 80010f4:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80010f8:	b946      	cbnz	r6, 800110c <HAL_ADC_ConfigChannel+0x21c>
 80010fa:	0e9a      	lsrs	r2, r3, #26
 80010fc:	3201      	adds	r2, #1
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	2a09      	cmp	r2, #9
 8001104:	bf8c      	ite	hi
 8001106:	2200      	movhi	r2, #0
 8001108:	2201      	movls	r2, #1
 800110a:	e00d      	b.n	8001128 <HAL_ADC_ConfigChannel+0x238>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001110:	b112      	cbz	r2, 8001118 <HAL_ADC_ConfigChannel+0x228>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001112:	fab2 f282 	clz	r2, r2
 8001116:	e000      	b.n	800111a <HAL_ADC_ConfigChannel+0x22a>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001118:	2220      	movs	r2, #32
 800111a:	3201      	adds	r2, #1
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2a09      	cmp	r2, #9
 8001122:	bf8c      	ite	hi
 8001124:	2200      	movhi	r2, #0
 8001126:	2201      	movls	r2, #1
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001128:	b3fa      	cbz	r2, 80011aa <HAL_ADC_ConfigChannel+0x2ba>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800112a:	b92e      	cbnz	r6, 8001138 <HAL_ADC_ConfigChannel+0x248>
 800112c:	0e9a      	lsrs	r2, r3, #26
 800112e:	3201      	adds	r2, #1
 8001130:	0692      	lsls	r2, r2, #26
 8001132:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001136:	e00a      	b.n	800114e <HAL_ADC_ConfigChannel+0x25e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800113c:	b112      	cbz	r2, 8001144 <HAL_ADC_ConfigChannel+0x254>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	e000      	b.n	8001146 <HAL_ADC_ConfigChannel+0x256>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001144:	2220      	movs	r2, #32
 8001146:	3201      	adds	r2, #1
 8001148:	0692      	lsls	r2, r2, #26
 800114a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800114e:	b936      	cbnz	r6, 800115e <HAL_ADC_ConfigChannel+0x26e>
 8001150:	0e9c      	lsrs	r4, r3, #26
 8001152:	3401      	adds	r4, #1
 8001154:	f004 071f 	and.w	r7, r4, #31
 8001158:	2401      	movs	r4, #1
 800115a:	40bc      	lsls	r4, r7
 800115c:	e00c      	b.n	8001178 <HAL_ADC_ConfigChannel+0x288>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	fa93 f4a3 	rbit	r4, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001162:	b114      	cbz	r4, 800116a <HAL_ADC_ConfigChannel+0x27a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001164:	fab4 f484 	clz	r4, r4
 8001168:	e000      	b.n	800116c <HAL_ADC_ConfigChannel+0x27c>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 800116a:	2420      	movs	r4, #32
 800116c:	3401      	adds	r4, #1
 800116e:	f004 041f 	and.w	r4, r4, #31
 8001172:	2701      	movs	r7, #1
 8001174:	fa07 f404 	lsl.w	r4, r7, r4
 8001178:	4322      	orrs	r2, r4
 800117a:	b93e      	cbnz	r6, 800118c <HAL_ADC_ConfigChannel+0x29c>
 800117c:	0e9b      	lsrs	r3, r3, #26
 800117e:	3301      	adds	r3, #1
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001188:	051b      	lsls	r3, r3, #20
 800118a:	e00c      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x2b6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001190:	b113      	cbz	r3, 8001198 <HAL_ADC_ConfigChannel+0x2a8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	e000      	b.n	800119a <HAL_ADC_ConfigChannel+0x2aa>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 8001198:	2320      	movs	r3, #32
 800119a:	3301      	adds	r3, #1
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011a4:	051b      	lsls	r3, r3, #20
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011a6:	4313      	orrs	r3, r2
 80011a8:	e04c      	b.n	8001244 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011aa:	b92e      	cbnz	r6, 80011b8 <HAL_ADC_ConfigChannel+0x2c8>
 80011ac:	0e9a      	lsrs	r2, r3, #26
 80011ae:	3201      	adds	r2, #1
 80011b0:	0692      	lsls	r2, r2, #26
 80011b2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011b6:	e00a      	b.n	80011ce <HAL_ADC_ConfigChannel+0x2de>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011bc:	b112      	cbz	r2, 80011c4 <HAL_ADC_ConfigChannel+0x2d4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x2d6>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 80011c4:	2220      	movs	r2, #32
 80011c6:	3201      	adds	r2, #1
 80011c8:	0692      	lsls	r2, r2, #26
 80011ca:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011ce:	b936      	cbnz	r6, 80011de <HAL_ADC_ConfigChannel+0x2ee>
 80011d0:	0e9c      	lsrs	r4, r3, #26
 80011d2:	3401      	adds	r4, #1
 80011d4:	f004 071f 	and.w	r7, r4, #31
 80011d8:	2401      	movs	r4, #1
 80011da:	40bc      	lsls	r4, r7
 80011dc:	e00c      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x308>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	fa93 f4a3 	rbit	r4, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011e2:	b114      	cbz	r4, 80011ea <HAL_ADC_ConfigChannel+0x2fa>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80011e4:	fab4 f484 	clz	r4, r4
 80011e8:	e000      	b.n	80011ec <HAL_ADC_ConfigChannel+0x2fc>
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 80011ea:	2420      	movs	r4, #32
 80011ec:	3401      	adds	r4, #1
 80011ee:	f004 041f 	and.w	r4, r4, #31
 80011f2:	2701      	movs	r7, #1
 80011f4:	fa07 f404 	lsl.w	r4, r7, r4
 80011f8:	4314      	orrs	r4, r2
 80011fa:	b956      	cbnz	r6, 8001212 <HAL_ADC_ConfigChannel+0x322>
 80011fc:	0e9a      	lsrs	r2, r3, #26
 80011fe:	3201      	adds	r2, #1
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001208:	3b1e      	subs	r3, #30
 800120a:	051b      	lsls	r3, r3, #20
 800120c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001210:	e017      	b.n	8001242 <HAL_ADC_ConfigChannel+0x352>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001216:	b14b      	cbz	r3, 800122c <HAL_ADC_ConfigChannel+0x33c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	e007      	b.n	800122e <HAL_ADC_ConfigChannel+0x33e>
 800121e:	bf00      	nop
 8001220:	03fff000 	.word	0x03fff000
 8001224:	0007ffff 	.word	0x0007ffff
 8001228:	407f0000 	.word	0x407f0000
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
 800122c:	2320      	movs	r3, #32
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001238:	f1a2 031e 	sub.w	r3, r2, #30
 800123c:	051b      	lsls	r3, r3, #20
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001242:	4323      	orrs	r3, r4
 8001244:	688c      	ldr	r4, [r1, #8]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001246:	3514      	adds	r5, #20
 8001248:	0e5a      	lsrs	r2, r3, #25
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	f002 0204 	and.w	r2, r2, #4

  MODIFY_REG(*preg,
 8001250:	58af      	ldr	r7, [r5, r2]
 8001252:	f3c3 5304 	ubfx	r3, r3, #20, #5
 8001256:	2607      	movs	r6, #7
 8001258:	409e      	lsls	r6, r3
 800125a:	ea27 0606 	bic.w	r6, r7, r6
 800125e:	fa04 f303 	lsl.w	r3, r4, r3
 8001262:	4333      	orrs	r3, r6
 8001264:	50ab      	str	r3, [r5, r2]
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001266:	680b      	ldr	r3, [r1, #0]
 8001268:	4a37      	ldr	r2, [pc, #220]	; (8001348 <HAL_ADC_ConfigChannel+0x458>)
 800126a:	4213      	tst	r3, r2
 800126c:	d057      	beq.n	800131e <HAL_ADC_ConfigChannel+0x42e>
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800126e:	4a37      	ldr	r2, [pc, #220]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 8001270:	6892      	ldr	r2, [r2, #8]
 8001272:	f002 74e0 	and.w	r4, r2, #29360128	; 0x1c00000
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001276:	4936      	ldr	r1, [pc, #216]	; (8001350 <HAL_ADC_ConfigChannel+0x460>)
 8001278:	428b      	cmp	r3, r1
 800127a:	d122      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x3d2>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800127c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8001280:	d11f      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x3d2>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001282:	6802      	ldr	r2, [r0, #0]
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_ADC_ConfigChannel+0x464>)
 8001286:	429a      	cmp	r2, r3
 8001288:	d14b      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x432>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800128a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 8001290:	6893      	ldr	r3, [r2, #8]
 8001292:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001296:	431c      	orrs	r4, r3
 8001298:	6094      	str	r4, [r2, #8]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_ADC_ConfigChannel+0x468>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	099b      	lsrs	r3, r3, #6
 80012a0:	4a2e      	ldr	r2, [pc, #184]	; (800135c <HAL_ADC_ConfigChannel+0x46c>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	099b      	lsrs	r3, r3, #6
 80012a8:	3301      	adds	r3, #1
 80012aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012ae:	009a      	lsls	r2, r3, #2
 80012b0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80012b2:	e002      	b.n	80012ba <HAL_ADC_ConfigChannel+0x3ca>
          {
            wait_loop_index--;
 80012b4:	9b01      	ldr	r3, [sp, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
          while (wait_loop_index != 0UL)
 80012ba:	9b01      	ldr	r3, [sp, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x3c4>
 80012c0:	e038      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012c2:	4927      	ldr	r1, [pc, #156]	; (8001360 <HAL_ADC_ConfigChannel+0x470>)
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d110      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x3fa>
 80012c8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80012cc:	d10d      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x3fa>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012ce:	6802      	ldr	r2, [r0, #0]
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_ADC_ConfigChannel+0x464>)
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d127      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x436>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d6:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 80012dc:	6893      	ldr	r3, [r2, #8]
 80012de:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80012e2:	431c      	orrs	r4, r3
 80012e4:	6094      	str	r4, [r2, #8]
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e024      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_ADC_ConfigChannel+0x474>)
 80012ec:	428b      	cmp	r3, r1
 80012ee:	d11c      	bne.n	800132a <HAL_ADC_ConfigChannel+0x43a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012f0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80012f4:	d11b      	bne.n	800132e <HAL_ADC_ConfigChannel+0x43e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012f6:	6802      	ldr	r2, [r0, #0]
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_ADC_ConfigChannel+0x464>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d119      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x442>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012fe:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 8001304:	6893      	ldr	r3, [r2, #8]
 8001306:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800130a:	431c      	orrs	r4, r3
 800130c:	6094      	str	r4, [r2, #8]
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e010      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001312:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6543      	str	r3, [r0, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00a      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e008      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
 8001322:	2300      	movs	r3, #0
 8001324:	e006      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
 8001326:	2300      	movs	r3, #0
 8001328:	e004      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
 800132a:	2300      	movs	r3, #0
 800132c:	e002      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_ADC_ConfigChannel+0x444>
 8001332:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001334:	2200      	movs	r2, #0
 8001336:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800133a:	4618      	mov	r0, r3
 800133c:	e000      	b.n	8001340 <HAL_ADC_ConfigChannel+0x450>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001340:	b002      	add	sp, #8
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	80080000 	.word	0x80080000
 800134c:	50040300 	.word	0x50040300
 8001350:	c7520000 	.word	0xc7520000
 8001354:	50040000 	.word	0x50040000
 8001358:	20000008 	.word	0x20000008
 800135c:	053e2d63 	.word	0x053e2d63
 8001360:	cb840000 	.word	0xcb840000
 8001364:	80000001 	.word	0x80000001

08001368 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136a:	2003      	movs	r0, #3
 800136c:	f001 f976 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001370:	200f      	movs	r0, #15
 8001372:	f7ff fc8f 	bl	8000c94 <HAL_InitTick>
 8001376:	b918      	cbnz	r0, 8001380 <HAL_Init+0x18>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001378:	f7ff fae0 	bl	800093c <HAL_MspInit>
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2000      	movs	r0, #0
 800137e:	bd08      	pop	{r3, pc}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
  {
    status = HAL_ERROR;
 8001380:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001382:	bd08      	pop	{r3, pc}

08001384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_IncTick+0x10>)
 8001386:	7819      	ldrb	r1, [r3, #0]
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x14>)
 800138a:	6813      	ldr	r3, [r2, #0]
 800138c:	440b      	add	r3, r1
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000004 	.word	0x20000004
 8001398:	20000840 	.word	0x20000840

0800139c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800139c:	4b01      	ldr	r3, [pc, #4]	; (80013a4 <HAL_GetTick+0x8>)
 800139e:	6818      	ldr	r0, [r3, #0]
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000840 	.word	0x20000840

080013a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80013a8:	b530      	push	{r4, r5, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013b6:	d002      	beq.n	80013be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80013b8:	f001 f900 	bl	80025bc <HAL_PWREx_GetVoltageRange>
 80013bc:	e00f      	b.n	80013de <RCC_SetFlashLatencyFromMSIRange+0x36>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4c1c      	ldr	r4, [pc, #112]	; (8001430 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80013c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80013c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80013d2:	f001 f8f3 	bl	80025bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013dc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80013e2:	d105      	bne.n	80013f0 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    if(msirange > RCC_MSIRANGE_8)
 80013e4:	2d80      	cmp	r5, #128	; 0x80
 80013e6:	d90a      	bls.n	80013fe <RCC_SetFlashLatencyFromMSIRange+0x56>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80013e8:	2da0      	cmp	r5, #160	; 0xa0
 80013ea:	d90a      	bls.n	8001402 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80013ec:	2102      	movs	r1, #2
 80013ee:	e00f      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80013f0:	2d80      	cmp	r5, #128	; 0x80
 80013f2:	d808      	bhi.n	8001406 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80013f4:	d009      	beq.n	800140a <RCC_SetFlashLatencyFromMSIRange+0x62>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80013f6:	2d70      	cmp	r5, #112	; 0x70
 80013f8:	d009      	beq.n	800140e <RCC_SetFlashLatencyFromMSIRange+0x66>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80013fa:	2100      	movs	r1, #0
 80013fc:	e008      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
 80013fe:	2100      	movs	r1, #0
 8001400:	e006      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001402:	2101      	movs	r1, #1
 8001404:	e004      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
    }
#else
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001406:	2103      	movs	r1, #3
 8001408:	e002      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
    else
    {
      if(msirange == RCC_MSIRANGE_8)
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800140a:	2102      	movs	r1, #2
 800140c:	e000      	b.n	8001410 <RCC_SetFlashLatencyFromMSIRange+0x68>
      }
      else if(msirange == RCC_MSIRANGE_7)
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800140e:	2101      	movs	r1, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	f023 0307 	bic.w	r3, r3, #7
 8001418:	430b      	orrs	r3, r1
 800141a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	4299      	cmp	r1, r3
 8001424:	d001      	beq.n	800142a <RCC_SetFlashLatencyFromMSIRange+0x82>
  {
    return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e000      	b.n	800142c <RCC_SetFlashLatencyFromMSIRange+0x84>
  }

  return HAL_OK;
 800142a:	2000      	movs	r0, #0
}
 800142c:	b003      	add	sp, #12
 800142e:	bd30      	pop	{r4, r5, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800143a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800143e:	f013 030c 	ands.w	r3, r3, #12
 8001442:	d005      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x18>
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d116      	bne.n	800147a <HAL_RCC_GetSysClockFreq+0x42>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800144c:	2a01      	cmp	r2, #1
 800144e:	d114      	bne.n	800147a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	f012 0f08 	tst.w	r2, #8
 8001458:	d105      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x2e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800145c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8001460:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8001464:	e003      	b.n	800146e <HAL_RCC_GetSysClockFreq+0x36>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800146e:	491d      	ldr	r1, [pc, #116]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001470:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001474:	b143      	cbz	r3, 8001488 <HAL_RCC_GetSysClockFreq+0x50>
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001476:	2000      	movs	r0, #0
 8001478:	e00d      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800147a:	2b04      	cmp	r3, #4
 800147c:	d006      	beq.n	800148c <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800147e:	2b08      	cmp	r3, #8
 8001480:	d007      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0x5a>
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001482:	2000      	movs	r0, #0
 8001484:	4601      	mov	r1, r0
 8001486:	e006      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5e>
    msirange = MSIRangeTable[msirange];

    if(sysclk_source == RCC_CFGR_SWS_MSI)
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001488:	4608      	mov	r0, r1
 800148a:	e004      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5e>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb0>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800148e:	2100      	movs	r1, #0
 8001490:	e001      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <HAL_RCC_GetSysClockFreq+0xb4>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001494:	2100      	movs	r1, #0
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d121      	bne.n	80014de <HAL_RCC_GetSysClockFreq+0xa6>
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149a:	b410      	push	{r4}
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d002      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x76>
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d002      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x7a>
 80014ac:	e002      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x7c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x7c>
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_RCC_GetSysClockFreq+0xb4>)
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014b4:	4c0a      	ldr	r4, [pc, #40]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80014b6:	68e0      	ldr	r0, [r4, #12]
 80014b8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80014bc:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014be:	68e2      	ldr	r2, [r4, #12]
 80014c0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80014c4:	fb02 f301 	mul.w	r3, r2, r1
 80014c8:	fbb3 f3f0 	udiv	r3, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014cc:	68e0      	ldr	r0, [r4, #12]
 80014ce:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80014d2:	3001      	adds	r0, #1
 80014d4:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80014d6:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 80014da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08003568 	.word	0x08003568
 80014e8:	00f42400 	.word	0x00f42400
 80014ec:	007a1200 	.word	0x007a1200

080014f0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f000 830f 	beq.w	8001b14 <HAL_RCC_OscConfig+0x624>
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f8:	b083      	sub	sp, #12
 80014fa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4ba4      	ldr	r3, [pc, #656]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 80014fe:	689d      	ldr	r5, [r3, #8]
 8001500:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001504:	68de      	ldr	r6, [r3, #12]
 8001506:	f006 0603 	and.w	r6, r6, #3

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800150a:	6803      	ldr	r3, [r0, #0]
 800150c:	f013 0f10 	tst.w	r3, #16
 8001510:	f000 80a3 	beq.w	800165a <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001514:	b11d      	cbz	r5, 800151e <HAL_RCC_OscConfig+0x2e>
 8001516:	2d0c      	cmp	r5, #12
 8001518:	d162      	bne.n	80015e0 <HAL_RCC_OscConfig+0xf0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800151a:	2e01      	cmp	r6, #1
 800151c:	d160      	bne.n	80015e0 <HAL_RCC_OscConfig+0xf0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151e:	4b9c      	ldr	r3, [pc, #624]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f013 0f02 	tst.w	r3, #2
 8001526:	d003      	beq.n	8001530 <HAL_RCC_OscConfig+0x40>
 8001528:	69a3      	ldr	r3, [r4, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 82f4 	beq.w	8001b18 <HAL_RCC_OscConfig+0x628>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001530:	6a20      	ldr	r0, [r4, #32]
 8001532:	4b97      	ldr	r3, [pc, #604]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f013 0f08 	tst.w	r3, #8
 800153a:	d004      	beq.n	8001546 <HAL_RCC_OscConfig+0x56>
 800153c:	4b94      	ldr	r3, [pc, #592]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001544:	e005      	b.n	8001552 <HAL_RCC_OscConfig+0x62>
 8001546:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	4283      	cmp	r3, r0
 8001554:	d217      	bcs.n	8001586 <HAL_RCC_OscConfig+0x96>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001556:	f7ff ff27 	bl	80013a8 <RCC_SetFlashLatencyFromMSIRange>
 800155a:	2800      	cmp	r0, #0
 800155c:	f040 82de 	bne.w	8001b1c <HAL_RCC_OscConfig+0x62c>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	f042 0208 	orr.w	r2, r2, #8
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001570:	6a22      	ldr	r2, [r4, #32]
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800157c:	69e1      	ldr	r1, [r4, #28]
 800157e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0xc8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001586:	4b82      	ldr	r3, [pc, #520]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	f042 0208 	orr.w	r2, r2, #8
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001596:	6a22      	ldr	r2, [r4, #32]
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80015a2:	69e1      	ldr	r1, [r4, #28]
 80015a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015a8:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015aa:	b92d      	cbnz	r5, 80015b8 <HAL_RCC_OscConfig+0xc8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ac:	6a20      	ldr	r0, [r4, #32]
 80015ae:	f7ff fefb 	bl	80013a8 <RCC_SetFlashLatencyFromMSIRange>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	f040 82b4 	bne.w	8001b20 <HAL_RCC_OscConfig+0x630>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015b8:	f7ff ff3e 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015c4:	4a73      	ldr	r2, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x2a4>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	40d8      	lsrs	r0, r3
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x2a8>)
 80015d0:	6018      	str	r0, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f7ff fb5d 	bl	8000c94 <HAL_InitTick>
        if(status != HAL_OK)
 80015da:	2800      	cmp	r0, #0
 80015dc:	d03d      	beq.n	800165a <HAL_RCC_OscConfig+0x16a>
 80015de:	e2a1      	b.n	8001b24 <HAL_RCC_OscConfig+0x634>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e0:	69a3      	ldr	r3, [r4, #24]
 80015e2:	b333      	cbz	r3, 8001632 <HAL_RCC_OscConfig+0x142>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fed5 	bl	800139c <HAL_GetTick>
 80015f2:	4607      	mov	r7, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f4:	e005      	b.n	8001602 <HAL_RCC_OscConfig+0x112>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f6:	f7ff fed1 	bl	800139c <HAL_GetTick>
 80015fa:	1bc0      	subs	r0, r0, r7
 80015fc:	2802      	cmp	r0, #2
 80015fe:	f200 8292 	bhi.w	8001b26 <HAL_RCC_OscConfig+0x636>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f013 0f02 	tst.w	r3, #2
 800160a:	d0f4      	beq.n	80015f6 <HAL_RCC_OscConfig+0x106>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b60      	ldr	r3, [pc, #384]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f042 0208 	orr.w	r2, r2, #8
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 800161c:	6a22      	ldr	r2, [r4, #32]
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001628:	69e1      	ldr	r1, [r4, #28]
 800162a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	e013      	b.n	800165a <HAL_RCC_OscConfig+0x16a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001632:	4a57      	ldr	r2, [pc, #348]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001634:	6813      	ldr	r3, [r2, #0]
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163c:	f7ff feae 	bl	800139c <HAL_GetTick>
 8001640:	4607      	mov	r7, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001642:	e005      	b.n	8001650 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001644:	f7ff feaa 	bl	800139c <HAL_GetTick>
 8001648:	1bc0      	subs	r0, r0, r7
 800164a:	2802      	cmp	r0, #2
 800164c:	f200 826d 	bhi.w	8001b2a <HAL_RCC_OscConfig+0x63a>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001650:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f013 0f02 	tst.w	r3, #2
 8001658:	d1f4      	bne.n	8001644 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f013 0f01 	tst.w	r3, #1
 8001660:	d052      	beq.n	8001708 <HAL_RCC_OscConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001662:	2d08      	cmp	r5, #8
 8001664:	d003      	beq.n	800166e <HAL_RCC_OscConfig+0x17e>
 8001666:	2d0c      	cmp	r5, #12
 8001668:	d10a      	bne.n	8001680 <HAL_RCC_OscConfig+0x190>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166a:	2e03      	cmp	r6, #3
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x190>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166e:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001676:	d047      	beq.n	8001708 <HAL_RCC_OscConfig+0x218>
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d144      	bne.n	8001708 <HAL_RCC_OscConfig+0x218>
 800167e:	e256      	b.n	8001b2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d105      	bne.n	8001694 <HAL_RCC_OscConfig+0x1a4>
 8001688:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1c4>
 800169a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800169e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c6:	6863      	ldr	r3, [r4, #4]
 80016c8:	b17b      	cbz	r3, 80016ea <HAL_RCC_OscConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fe67 	bl	800139c <HAL_GetTick>
 80016ce:	4607      	mov	r7, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d0:	e005      	b.n	80016de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff fe63 	bl	800139c <HAL_GetTick>
 80016d6:	1bc0      	subs	r0, r0, r7
 80016d8:	2864      	cmp	r0, #100	; 0x64
 80016da:	f200 822a 	bhi.w	8001b32 <HAL_RCC_OscConfig+0x642>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016e6:	d0f4      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1e2>
 80016e8:	e00e      	b.n	8001708 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fe57 	bl	800139c <HAL_GetTick>
 80016ee:	4607      	mov	r7, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f0:	e005      	b.n	80016fe <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f2:	f7ff fe53 	bl	800139c <HAL_GetTick>
 80016f6:	1bc0      	subs	r0, r0, r7
 80016f8:	2864      	cmp	r0, #100	; 0x64
 80016fa:	f200 821c 	bhi.w	8001b36 <HAL_RCC_OscConfig+0x646>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001706:	d1f4      	bne.n	80016f2 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	f013 0f02 	tst.w	r3, #2
 800170e:	d052      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001710:	2d04      	cmp	r5, #4
 8001712:	d003      	beq.n	800171c <HAL_RCC_OscConfig+0x22c>
 8001714:	2d0c      	cmp	r5, #12
 8001716:	d113      	bne.n	8001740 <HAL_RCC_OscConfig+0x250>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001718:	2e02      	cmp	r6, #2
 800171a:	d111      	bne.n	8001740 <HAL_RCC_OscConfig+0x250>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001724:	d003      	beq.n	800172e <HAL_RCC_OscConfig+0x23e>
 8001726:	68e3      	ldr	r3, [r4, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8206 	beq.w	8001b3a <HAL_RCC_OscConfig+0x64a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001730:	6853      	ldr	r3, [r2, #4]
 8001732:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001736:	6921      	ldr	r1, [r4, #16]
 8001738:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800173c:	6053      	str	r3, [r2, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	68e3      	ldr	r3, [r4, #12]
 8001742:	b1e3      	cbz	r3, 800177e <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fe25 	bl	800139c <HAL_GetTick>
 8001752:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001754:	e005      	b.n	8001762 <HAL_RCC_OscConfig+0x272>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fe21 	bl	800139c <HAL_GetTick>
 800175a:	1b80      	subs	r0, r0, r6
 800175c:	2802      	cmp	r0, #2
 800175e:	f200 81ee 	bhi.w	8001b3e <HAL_RCC_OscConfig+0x64e>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800176a:	d0f4      	beq.n	8001756 <HAL_RCC_OscConfig+0x266>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800176e:	6853      	ldr	r3, [r2, #4]
 8001770:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001774:	6921      	ldr	r1, [r4, #16]
 8001776:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800177a:	6053      	str	r3, [r2, #4]
 800177c:	e01b      	b.n	80017b6 <HAL_RCC_OscConfig+0x2c6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fe08 	bl	800139c <HAL_GetTick>
 800178c:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178e:	e00d      	b.n	80017ac <HAL_RCC_OscConfig+0x2bc>
 8001790:	40021000 	.word	0x40021000
 8001794:	08003550 	.word	0x08003550
 8001798:	20000008 	.word	0x20000008
 800179c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fdfc 	bl	800139c <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	f200 81cb 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x652>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ac:	4bb9      	ldr	r3, [pc, #740]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80017b4:	d1f4      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2b0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f013 0f08 	tst.w	r3, #8
 80017bc:	d030      	beq.n	8001820 <HAL_RCC_OscConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017be:	6963      	ldr	r3, [r4, #20]
 80017c0:	b1bb      	cbz	r3, 80017f2 <HAL_RCC_OscConfig+0x302>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4ab4      	ldr	r2, [pc, #720]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80017c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fde4 	bl	800139c <HAL_GetTick>
 80017d4:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e005      	b.n	80017e4 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fde0 	bl	800139c <HAL_GetTick>
 80017dc:	1b80      	subs	r0, r0, r6
 80017de:	2802      	cmp	r0, #2
 80017e0:	f200 81b1 	bhi.w	8001b46 <HAL_RCC_OscConfig+0x656>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e4:	4bab      	ldr	r3, [pc, #684]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f013 0f02 	tst.w	r3, #2
 80017ee:	d0f3      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2e8>
 80017f0:	e016      	b.n	8001820 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f2:	4aa8      	ldr	r2, [pc, #672]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80017f4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fdcc 	bl	800139c <HAL_GetTick>
 8001804:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001806:	e005      	b.n	8001814 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fdc8 	bl	800139c <HAL_GetTick>
 800180c:	1b80      	subs	r0, r0, r6
 800180e:	2802      	cmp	r0, #2
 8001810:	f200 819b 	bhi.w	8001b4a <HAL_RCC_OscConfig+0x65a>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b9f      	ldr	r3, [pc, #636]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	f013 0f02 	tst.w	r3, #2
 800181e:	d1f3      	bne.n	8001808 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f013 0f04 	tst.w	r3, #4
 8001826:	d07f      	beq.n	8001928 <HAL_RCC_OscConfig+0x438>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001828:	4b9a      	ldr	r3, [pc, #616]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x35a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b98      	ldr	r3, [pc, #608]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001834:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001836:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800183a:	659a      	str	r2, [r3, #88]	; 0x58
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001846:	2601      	movs	r6, #1
 8001848:	e000      	b.n	800184c <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800184a:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184c:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x5a8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001854:	d113      	bne.n	800187e <HAL_RCC_OscConfig+0x38e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001856:	4a90      	ldr	r2, [pc, #576]	; (8001a98 <HAL_RCC_OscConfig+0x5a8>)
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fd9c 	bl	800139c <HAL_GetTick>
 8001864:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	e005      	b.n	8001874 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7ff fd98 	bl	800139c <HAL_GetTick>
 800186c:	1bc0      	subs	r0, r0, r7
 800186e:	2802      	cmp	r0, #2
 8001870:	f200 816d 	bhi.w	8001b4e <HAL_RCC_OscConfig+0x65e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x5a8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f413 7f80 	tst.w	r3, #256	; 0x100
 800187c:	d0f4      	beq.n	8001868 <HAL_RCC_OscConfig+0x378>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187e:	68a3      	ldr	r3, [r4, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x3a4>
 8001884:	4a83      	ldr	r2, [pc, #524]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001886:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x3de>
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3c4>
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 800189a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800189e:	f042 0204 	orr.w	r2, r2, #4
 80018a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80018a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80018b2:	e00c      	b.n	80018ce <HAL_RCC_OscConfig+0x3de>
 80018b4:	4b77      	ldr	r3, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80018b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80018c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	68a3      	ldr	r3, [r4, #8]
 80018d0:	b193      	cbz	r3, 80018f8 <HAL_RCC_OscConfig+0x408>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff fd63 	bl	800139c <HAL_GetTick>
 80018d6:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d8:	e007      	b.n	80018ea <HAL_RCC_OscConfig+0x3fa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff fd5f 	bl	800139c <HAL_GetTick>
 80018de:	1bc0      	subs	r0, r0, r7
 80018e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80018e4:	4298      	cmp	r0, r3
 80018e6:	f200 8134 	bhi.w	8001b52 <HAL_RCC_OscConfig+0x662>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	f013 0f02 	tst.w	r3, #2
 80018f4:	d0f1      	beq.n	80018da <HAL_RCC_OscConfig+0x3ea>
 80018f6:	e011      	b.n	800191c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fd50 	bl	800139c <HAL_GetTick>
 80018fc:	4607      	mov	r7, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fe:	e007      	b.n	8001910 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fd4c 	bl	800139c <HAL_GetTick>
 8001904:	1bc0      	subs	r0, r0, r7
 8001906:	f241 3388 	movw	r3, #5000	; 0x1388
 800190a:	4298      	cmp	r0, r3
 800190c:	f200 8123 	bhi.w	8001b56 <HAL_RCC_OscConfig+0x666>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f013 0f02 	tst.w	r3, #2
 800191a:	d1f1      	bne.n	8001900 <HAL_RCC_OscConfig+0x410>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191c:	b126      	cbz	r6, 8001928 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4a5d      	ldr	r2, [pc, #372]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001920:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	f013 0f20 	tst.w	r3, #32
 800192e:	d030      	beq.n	8001992 <HAL_RCC_OscConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001932:	b1bb      	cbz	r3, 8001964 <HAL_RCC_OscConfig+0x474>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001934:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001936:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fd2b 	bl	800139c <HAL_GetTick>
 8001946:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001948:	e005      	b.n	8001956 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff fd27 	bl	800139c <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	2802      	cmp	r0, #2
 8001952:	f200 8102 	bhi.w	8001b5a <HAL_RCC_OscConfig+0x66a>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001956:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195c:	f013 0f02 	tst.w	r3, #2
 8001960:	d0f3      	beq.n	800194a <HAL_RCC_OscConfig+0x45a>
 8001962:	e016      	b.n	8001992 <HAL_RCC_OscConfig+0x4a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001966:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fd13 	bl	800139c <HAL_GetTick>
 8001976:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001978:	e005      	b.n	8001986 <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff fd0f 	bl	800139c <HAL_GetTick>
 800197e:	1b80      	subs	r0, r0, r6
 8001980:	2802      	cmp	r0, #2
 8001982:	f200 80ec 	bhi.w	8001b5e <HAL_RCC_OscConfig+0x66e>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198c:	f013 0f02 	tst.w	r3, #2
 8001990:	d1f3      	bne.n	800197a <HAL_RCC_OscConfig+0x48a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80e4 	beq.w	8001b62 <HAL_RCC_OscConfig+0x672>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 809e 	bne.w	8001adc <HAL_RCC_OscConfig+0x5ec>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80019a2:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	f003 0103 	and.w	r1, r3, #3
 80019a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019aa:	4291      	cmp	r1, r2
 80019ac:	d122      	bne.n	80019f4 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80019b4:	3901      	subs	r1, #1
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80019ba:	d11b      	bne.n	80019f4 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c2:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80019c6:	d115      	bne.n	80019f4 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ce:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80019d2:	d10f      	bne.n	80019f4 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80019d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019de:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x504>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019e4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80019e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80019f2:	d055      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x5b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f4:	2d0c      	cmp	r5, #12
 80019f6:	f000 80b6 	beq.w	8001b66 <HAL_RCC_OscConfig+0x676>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001a02:	f040 80b2 	bne.w	8001b6a <HAL_RCC_OscConfig+0x67a>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a06:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a10:	f7ff fcc4 	bl	800139c <HAL_GetTick>
 8001a14:	4605      	mov	r5, r0

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	e005      	b.n	8001a24 <HAL_RCC_OscConfig+0x534>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fcc0 	bl	800139c <HAL_GetTick>
 8001a1c:	1b40      	subs	r0, r0, r5
 8001a1e:	2802      	cmp	r0, #2
 8001a20:	f200 80a5 	bhi.w	8001b6e <HAL_RCC_OscConfig+0x67e>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a2c:	d1f4      	bne.n	8001a18 <HAL_RCC_OscConfig+0x528>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4919      	ldr	r1, [pc, #100]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001a30:	68cb      	ldr	r3, [r1, #12]
 8001a32:	4d1a      	ldr	r5, [pc, #104]	; (8001a9c <HAL_RCC_OscConfig+0x5ac>)
 8001a34:	401d      	ands	r5, r3
 8001a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001a40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001a46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a48:	0840      	lsrs	r0, r0, #1
 8001a4a:	3801      	subs	r0, #1
 8001a4c:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001a50:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001a52:	0840      	lsrs	r0, r0, #1
 8001a54:	1e43      	subs	r3, r0, #1
 8001a56:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 8001a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a5c:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
 8001a60:	432b      	orrs	r3, r5
 8001a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a64:	680b      	ldr	r3, [r1, #0]
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	600b      	str	r3, [r1, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6c:	68cb      	ldr	r3, [r1, #12]
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	60cb      	str	r3, [r1, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a74:	f7ff fc92 	bl	800139c <HAL_GetTick>
 8001a78:	4604      	mov	r4, r0

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e004      	b.n	8001a86 <HAL_RCC_OscConfig+0x596>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fc8e 	bl	800139c <HAL_GetTick>
 8001a80:	1b00      	subs	r0, r0, r4
 8001a82:	2802      	cmp	r0, #2
 8001a84:	d875      	bhi.n	8001b72 <HAL_RCC_OscConfig+0x682>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_OscConfig+0x5a4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a8e:	d0f5      	beq.n	8001a7c <HAL_RCC_OscConfig+0x58c>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e077      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aa8:	d165      	bne.n	8001b76 <HAL_RCC_OscConfig+0x686>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aba:	60da      	str	r2, [r3, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001abc:	f7ff fc6e 	bl	800139c <HAL_GetTick>
 8001ac0:	4604      	mov	r4, r0

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	e004      	b.n	8001ace <HAL_RCC_OscConfig+0x5de>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fc6a 	bl	800139c <HAL_GetTick>
 8001ac8:	1b00      	subs	r0, r0, r4
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d855      	bhi.n	8001b7a <HAL_RCC_OscConfig+0x68a>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ad6:	d0f5      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x5d4>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	e053      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	2d0c      	cmp	r5, #12
 8001ade:	d04e      	beq.n	8001b7e <HAL_RCC_OscConfig+0x68e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc57 	bl	800139c <HAL_GetTick>
 8001aee:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	e004      	b.n	8001afc <HAL_RCC_OscConfig+0x60c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff fc53 	bl	800139c <HAL_GetTick>
 8001af6:	1b00      	subs	r0, r0, r4
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d842      	bhi.n	8001b82 <HAL_RCC_OscConfig+0x692>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b04:	d1f5      	bne.n	8001af2 <HAL_RCC_OscConfig+0x602>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b06:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <HAL_RCC_OscConfig+0x698>)
 8001b08:	68d1      	ldr	r1, [r2, #12]
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_OscConfig+0x69c>)
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	60d3      	str	r3, [r2, #12]
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001b10:	2000      	movs	r0, #0
 8001b12:	e037      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8001b16:	4770      	bx	lr
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
      {
        return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e033      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
          {
            return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	e031      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
            {
              return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	e02f      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
 8001b28:	e02c      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	e02a      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e028      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b32:	2003      	movs	r0, #3
 8001b34:	e026      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b36:	2003      	movs	r0, #3
 8001b38:	e024      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
      {
        return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	e022      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b3e:	2003      	movs	r0, #3
 8001b40:	e020      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
 8001b44:	e01e      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	e01a      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
 8001b50:	e018      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b52:	2003      	movs	r0, #3
 8001b54:	e016      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b56:	2003      	movs	r0, #3
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	e012      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001b5e:	2003      	movs	r0, #3
 8001b60:	e010      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e00e      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b66:	2001      	movs	r0, #1
 8001b68:	e00c      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
              {
                return HAL_TIMEOUT;
 8001b6e:	2003      	movs	r0, #3
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
              {
                return HAL_TIMEOUT;
 8001b72:	2003      	movs	r0, #3
 8001b74:	e006      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e004      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
            {
              return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e002      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x694>
        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001b82:	2003      	movs	r0, #3
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8001b84:	b003      	add	sp, #12
 8001b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	feeefffc 	.word	0xfeeefffc

08001b90 <HAL_RCC_ClockConfig>:
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b90:	2800      	cmp	r0, #0
 8001b92:	f000 80ab 	beq.w	8001cec <HAL_RCC_ClockConfig+0x15c>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b96:	b570      	push	{r4, r5, r6, lr}
 8001b98:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <HAL_RCC_ClockConfig+0x17c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	428b      	cmp	r3, r1
 8001ba4:	d20b      	bcs.n	8001bbe <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <HAL_RCC_ClockConfig+0x17c>)
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	f040 8099 	bne.w	8001cf0 <HAL_RCC_ClockConfig+0x160>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f013 0f02 	tst.w	r3, #2
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x50>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc6:	68a2      	ldr	r2, [r4, #8]
 8001bc8:	4b51      	ldr	r3, [pc, #324]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d905      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	484e      	ldr	r0, [pc, #312]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001bd6:	6883      	ldr	r3, [r0, #8]
 8001bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	6083      	str	r3, [r0, #8]
 8001be0:	460d      	mov	r5, r1
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	f013 0f01 	tst.w	r3, #1
 8001be8:	d035      	beq.n	8001c56 <HAL_RCC_ClockConfig+0xc6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001bf8:	d114      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x94>
 8001bfa:	e07b      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x164>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c00:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x94>
 8001c0a:	e075      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x168>
        {
          return HAL_ERROR;
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c0c:	b92b      	cbnz	r3, 8001c1a <HAL_RCC_ClockConfig+0x8a>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f012 0f02 	tst.w	r2, #2
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x94>
 8001c18:	e070      	b.n	8001cfc <HAL_RCC_ClockConfig+0x16c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001c22:	d06d      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x170>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c24:	493a      	ldr	r1, [pc, #232]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c26:	688a      	ldr	r2, [r1, #8]
 8001c28:	f022 0203 	bic.w	r2, r2, #3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c30:	f7ff fbb4 	bl	800139c <HAL_GetTick>
 8001c34:	4606      	mov	r6, r0

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e006      	b.n	8001c46 <HAL_RCC_ClockConfig+0xb6>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff fbb0 	bl	800139c <HAL_GetTick>
 8001c3c:	1b80      	subs	r0, r0, r6
 8001c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c42:	4298      	cmp	r0, r3
 8001c44:	d85e      	bhi.n	8001d04 <HAL_RCC_ClockConfig+0x174>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	6862      	ldr	r2, [r4, #4]
 8001c50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xa8>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	f013 0f02 	tst.w	r3, #2
 8001c5c:	d00c      	beq.n	8001c78 <HAL_RCC_ClockConfig+0xe8>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c5e:	68a2      	ldr	r2, [r4, #8]
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d205      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0xe8>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4928      	ldr	r1, [pc, #160]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001c6e:	688b      	ldr	r3, [r1, #8]
 8001c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x17c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	429d      	cmp	r5, r3
 8001c82:	d20a      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x10a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_RCC_ClockConfig+0x17c>)
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	f023 0307 	bic.w	r3, r3, #7
 8001c8c:	432b      	orrs	r3, r5
 8001c8e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	429d      	cmp	r5, r3
 8001c98:	d136      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x178>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f013 0f04 	tst.w	r3, #4
 8001ca0:	d006      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	491b      	ldr	r1, [pc, #108]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001ca4:	688b      	ldr	r3, [r1, #8]
 8001ca6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001caa:	68e3      	ldr	r3, [r4, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	f013 0f08 	tst.w	r3, #8
 8001cb6:	d007      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x138>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001cba:	6893      	ldr	r3, [r2, #8]
 8001cbc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001cc0:	6921      	ldr	r1, [r4, #16]
 8001cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cc6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc8:	f7ff fbb6 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_ClockConfig+0x180>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	40d8      	lsrs	r0, r3
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x188>)
 8001ce0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_RCC_ClockConfig+0x18c>)
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	f7fe ffd5 	bl	8000c94 <HAL_InitTick>

  return status;
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8001cec:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);

  return status;
}
 8001cee:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
      {
        return HAL_ERROR;
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
        {
          return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
        {
          return HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
        {
          return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	bd70      	pop	{r4, r5, r6, pc}

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);

  return status;
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003550 	.word	0x08003550
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d20:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d2e:	f7ff fff7 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
}
 8001d42:	40d8      	lsrs	r0, r3
 8001d44:	bd08      	pop	{r3, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08003560 	.word	0x08003560

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d52:	f7ff ffe5 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	f003 031f 	and.w	r3, r3, #31
}
 8001d66:	40d8      	lsrs	r0, r3
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08003560 	.word	0x08003560

08001d74 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d74:	230f      	movs	r3, #15
 8001d76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_GetClockConfig+0x34>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001d90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetClockConfig+0x38>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	600b      	str	r3, [r1, #0]
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40022000 	.word	0x40022000

08001db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f013 0f03 	tst.w	r3, #3
 8001dba:	d012      	beq.n	8001de2 <RCCEx_PLLSAI1_Config+0x32>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	6802      	ldr	r2, [r0, #0]
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d141      	bne.n	8001e4e <RCCEx_PLLSAI1_Config+0x9e>
       ||
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d041      	beq.n	8001e52 <RCCEx_PLLSAI1_Config+0xa2>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	6842      	ldr	r2, [r0, #4]
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d13b      	bne.n	8001e56 <RCCEx_PLLSAI1_Config+0xa6>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2400      	movs	r4, #0
 8001de0:	e03a      	b.n	8001e58 <RCCEx_PLLSAI1_Config+0xa8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001de2:	6803      	ldr	r3, [r0, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d00a      	beq.n	8001dfe <RCCEx_PLLSAI1_Config+0x4e>
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d00f      	beq.n	8001e0c <RCCEx_PLLSAI1_Config+0x5c>
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d119      	bne.n	8001e24 <RCCEx_PLLSAI1_Config+0x74>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f012 0f02 	tst.w	r2, #2
 8001df8:	d016      	beq.n	8001e28 <RCCEx_PLLSAI1_Config+0x78>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	e01b      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001dfe:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001e06:	d011      	beq.n	8001e2c <RCCEx_PLLSAI1_Config+0x7c>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2400      	movs	r4, #0
 8001e0a:	e014      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e14:	d10c      	bne.n	8001e30 <RCCEx_PLLSAI1_Config+0x80>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e16:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001e1e:	d009      	beq.n	8001e34 <RCCEx_PLLSAI1_Config+0x84>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2400      	movs	r4, #0
 8001e22:	e008      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
          status = HAL_ERROR;
        }
      }
      break;
    default:
      status = HAL_ERROR;
 8001e24:	2401      	movs	r4, #1
 8001e26:	e006      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
    switch(PllSai1->PLLSAI1Source)
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 8001e28:	2401      	movs	r4, #1
 8001e2a:	e004      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
      {
        status = HAL_ERROR;
 8001e2c:	2401      	movs	r4, #1
 8001e2e:	e002      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2400      	movs	r4, #0
 8001e32:	e000      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x86>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
        {
          status = HAL_ERROR;
 8001e34:	2401      	movs	r4, #1
    default:
      status = HAL_ERROR;
      break;
    }

    if(status == HAL_OK)
 8001e36:	b97c      	cbnz	r4, 8001e58 <RCCEx_PLLSAI1_Config+0xa8>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e38:	4e3b      	ldr	r6, [pc, #236]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e3a:	68f2      	ldr	r2, [r6, #12]
 8001e3c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001e40:	6845      	ldr	r5, [r0, #4]
 8001e42:	3d01      	subs	r5, #1
 8001e44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60f3      	str	r3, [r6, #12]
 8001e4c:	e004      	b.n	8001e58 <RCCEx_PLLSAI1_Config+0xa8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8001e4e:	2401      	movs	r4, #1
 8001e50:	e002      	b.n	8001e58 <RCCEx_PLLSAI1_Config+0xa8>
 8001e52:	2401      	movs	r4, #1
 8001e54:	e000      	b.n	8001e58 <RCCEx_PLLSAI1_Config+0xa8>
 8001e56:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8001e58:	2c00      	cmp	r4, #0
 8001e5a:	d163      	bne.n	8001f24 <RCCEx_PLLSAI1_Config+0x174>
 8001e5c:	460f      	mov	r7, r1
 8001e5e:	4605      	mov	r5, r0
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e60:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6a:	f7ff fa97 	bl	800139c <HAL_GetTick>
 8001e6e:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e70:	e004      	b.n	8001e7c <RCCEx_PLLSAI1_Config+0xcc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e72:	f7ff fa93 	bl	800139c <HAL_GetTick>
 8001e76:	1b80      	subs	r0, r0, r6
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	d805      	bhi.n	8001e88 <RCCEx_PLLSAI1_Config+0xd8>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e84:	d1f5      	bne.n	8001e72 <RCCEx_PLLSAI1_Config+0xc2>
 8001e86:	e000      	b.n	8001e8a <RCCEx_PLLSAI1_Config+0xda>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
 8001e88:	2403      	movs	r4, #3
        break;
      }
    }

    if(status == HAL_OK)
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d14a      	bne.n	8001f24 <RCCEx_PLLSAI1_Config+0x174>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e8e:	b96f      	cbnz	r7, 8001eac <RCCEx_PLLSAI1_Config+0xfc>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e90:	4925      	ldr	r1, [pc, #148]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001e92:	690b      	ldr	r3, [r1, #16]
 8001e94:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001e98:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001e9c:	68a8      	ldr	r0, [r5, #8]
 8001e9e:	68eb      	ldr	r3, [r5, #12]
 8001ea0:	06db      	lsls	r3, r3, #27
 8001ea2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	610b      	str	r3, [r1, #16]
 8001eaa:	e020      	b.n	8001eee <RCCEx_PLLSAI1_Config+0x13e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001eac:	2f01      	cmp	r7, #1
 8001eae:	d10f      	bne.n	8001ed0 <RCCEx_PLLSAI1_Config+0x120>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001eb0:	4e1d      	ldr	r6, [pc, #116]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001eb2:	6933      	ldr	r3, [r6, #16]
 8001eb4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001eb8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8001ebc:	68a8      	ldr	r0, [r5, #8]
 8001ebe:	692b      	ldr	r3, [r5, #16]
 8001ec0:	085a      	lsrs	r2, r3, #1
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	0552      	lsls	r2, r2, #21
 8001ec6:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	6133      	str	r3, [r6, #16]
 8001ece:	e00e      	b.n	8001eee <RCCEx_PLLSAI1_Config+0x13e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ed0:	4e15      	ldr	r6, [pc, #84]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001ed2:	6933      	ldr	r3, [r6, #16]
 8001ed4:	f023 61c0 	bic.w	r1, r3, #100663296	; 0x6000000
 8001ed8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8001edc:	68a8      	ldr	r0, [r5, #8]
 8001ede:	696b      	ldr	r3, [r5, #20]
 8001ee0:	085a      	lsrs	r2, r3, #1
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	0652      	lsls	r2, r2, #25
 8001ee6:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6133      	str	r3, [r6, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa50 	bl	800139c <HAL_GetTick>
 8001efc:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001efe:	e004      	b.n	8001f0a <RCCEx_PLLSAI1_Config+0x15a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f00:	f7ff fa4c 	bl	800139c <HAL_GetTick>
 8001f04:	1b80      	subs	r0, r0, r6
 8001f06:	2802      	cmp	r0, #2
 8001f08:	d805      	bhi.n	8001f16 <RCCEx_PLLSAI1_Config+0x166>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f12:	d0f5      	beq.n	8001f00 <RCCEx_PLLSAI1_Config+0x150>
 8001f14:	e000      	b.n	8001f18 <RCCEx_PLLSAI1_Config+0x168>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
        {
          status = HAL_TIMEOUT;
 8001f16:	2403      	movs	r4, #3
          break;
        }
      }

      if(status == HAL_OK)
 8001f18:	b924      	cbnz	r4, 8001f24 <RCCEx_PLLSAI1_Config+0x174>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f1a:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <RCCEx_PLLSAI1_Config+0x178>)
 8001f1c:	6911      	ldr	r1, [r2, #16]
 8001f1e:	69ab      	ldr	r3, [r5, #24]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return status;
}
 8001f24:	4620      	mov	r0, r4
 8001f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f34:	6803      	ldr	r3, [r0, #0]
 8001f36:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001f3a:	d024      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f42:	d006      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f48:	d001      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001f4a:	b97b      	cbnz	r3, 8001f6c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001f4c:	e008      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f4e:	2600      	movs	r6, #0
 8001f50:	e00d      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f52:	4aa1      	ldr	r2, [pc, #644]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001f54:	68d3      	ldr	r3, [r2, #12]
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f5c:	2600      	movs	r6, #0
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5e:	e006      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x42>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f60:	2100      	movs	r1, #0
 8001f62:	3004      	adds	r0, #4
 8001f64:	f7ff ff24 	bl	8001db0 <RCCEx_PLLSAI1_Config>
 8001f68:	4606      	mov	r6, r0
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6a:	e000      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x42>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6c:	2601      	movs	r6, #1
      break;
    }

    if(ret == HAL_OK)
 8001f6e:	b96e      	cbnz	r6, 8001f8c <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f70:	4999      	ldr	r1, [pc, #612]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001f72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f82:	4637      	mov	r7, r6
 8001f84:	e003      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001f86:	2700      	movs	r7, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f88:	463e      	mov	r6, r7
 8001f8a:	e000      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f8c:	4637      	mov	r7, r6
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f94:	d076      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x158>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f96:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	b163      	cbz	r3, 8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001faa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fbc:	f04f 0801 	mov.w	r8, #1
 8001fc0:	e001      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc6:	4a85      	ldr	r2, [pc, #532]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff f9e4 	bl	800139c <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd8:	f7ff f9e0 	bl	800139c <HAL_GetTick>
 8001fdc:	1b40      	subs	r0, r0, r5
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d805      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xc2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe2:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fea:	d0f5      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001fec:	e000      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8001fee:	2603      	movs	r6, #3
        break;
      }
    }

    if(ret == HAL_OK)
 8001ff0:	2e00      	cmp	r6, #0
 8001ff2:	d13c      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff4:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ffa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ffe:	d015      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002000:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002002:	4293      	cmp	r3, r2
 8002004:	d012      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x100>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002006:	4a74      	ldr	r2, [pc, #464]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002008:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800200c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002014:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002018:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800201c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002020:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002024:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800202c:	f013 0f01 	tst.w	r3, #1
 8002030:	d012      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f9b3 	bl	800139c <HAL_GetTick>
 8002036:	4605      	mov	r5, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff f9af 	bl	800139c <HAL_GetTick>
 800203e:	1b40      	subs	r0, r0, r5
 8002040:	f241 3388 	movw	r3, #5000	; 0x1388
 8002044:	4298      	cmp	r0, r3
 8002046:	d806      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002048:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f013 0f02 	tst.w	r3, #2
 8002052:	d0f2      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8002054:	e000      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            ret = HAL_TIMEOUT;
 8002056:	2603      	movs	r6, #3
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8002058:	b95e      	cbnz	r6, 8002072 <HAL_RCCEx_PeriphCLKConfig+0x146>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205a:	495f      	ldr	r1, [pc, #380]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800205c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8002060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002064:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800206c:	e002      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206e:	4637      	mov	r7, r6
 8002070:	e000      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x148>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002072:	4637      	mov	r7, r6
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	f1b8 0f00 	cmp.w	r8, #0
 8002078:	d004      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800207c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	f013 0f01 	tst.w	r3, #1
 800208a:	d008      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208c:	4952      	ldr	r1, [pc, #328]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800208e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	6a23      	ldr	r3, [r4, #32]
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	d008      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a6:	494c      	ldr	r1, [pc, #304]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80020a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020ac:	f023 020c 	bic.w	r2, r3, #12
 80020b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	f013 0f04 	tst.w	r3, #4
 80020be:	d008      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c0:	4945      	ldr	r1, [pc, #276]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80020c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	f013 0f20 	tst.w	r3, #32
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020da:	493f      	ldr	r1, [pc, #252]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80020dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80020f2:	d008      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020f4:	4938      	ldr	r1, [pc, #224]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80020f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800210e:	4932      	ldr	r1, [pc, #200]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002110:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002126:	d008      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002128:	492b      	ldr	r1, [pc, #172]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800212a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800212e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002140:	d008      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002142:	4925      	ldr	r1, [pc, #148]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002144:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800214c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f413 7f80 	tst.w	r3, #256	; 0x100
 800215a:	d008      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800215c:	491e      	ldr	r1, [pc, #120]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800215e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002174:	d01a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002176:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002178:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800217c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002180:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002188:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800218a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800218e:	d104      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002190:	68cb      	ldr	r3, [r1, #12]
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002196:	60cb      	str	r3, [r1, #12]
 8002198:	e008      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800219a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219e:	d105      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a0:	2101      	movs	r1, #1
 80021a2:	1d20      	adds	r0, r4, #4
 80021a4:	f7ff fe04 	bl	8001db0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 80021a8:	b100      	cbz	r0, 80021ac <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* set overall return value */
        status = ret;
 80021aa:	4607      	mov	r7, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80021b2:	d01e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021b4:	4908      	ldr	r1, [pc, #32]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80021b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ce:	68cb      	ldr	r3, [r1, #12]
 80021d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d4:	60cb      	str	r3, [r1, #12]
 80021d6:	e00c      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e4:	d105      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e6:	2101      	movs	r1, #1
 80021e8:	1d20      	adds	r0, r4, #4
 80021ea:	f7ff fde1 	bl	8001db0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 80021ee:	b100      	cbz	r0, 80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      {
        /* set overall return value */
        status = ret;
 80021f0:	4607      	mov	r7, r0
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80021f8:	d012      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021fa:	4912      	ldr	r1, [pc, #72]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80021fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002200:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002204:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800220c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800220e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002212:	d105      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002214:	2102      	movs	r1, #2
 8002216:	1d20      	adds	r0, r4, #4
 8002218:	f7ff fdca 	bl	8001db0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 800221c:	b100      	cbz	r0, 8002220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* set overall return value */
        status = ret;
 800221e:	4607      	mov	r7, r0
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002226:	d008      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002228:	4906      	ldr	r1, [pc, #24]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800222a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800222e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002232:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800223a:	4638      	mov	r0, r7
 800223c:	b002      	add	sp, #8
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800224c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e0bd      	b.n	80023cc <HAL_GPIO_Init+0x184>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	2401      	movs	r4, #1
 8002252:	409c      	lsls	r4, r3

    if (iocurrent != 0x00u)
 8002254:	4022      	ands	r2, r4
 8002256:	f000 80b8 	beq.w	80023ca <HAL_GPIO_Init+0x182>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225a:	684d      	ldr	r5, [r1, #4]
 800225c:	f005 0503 	and.w	r5, r5, #3
 8002260:	3d01      	subs	r5, #1
 8002262:	2d01      	cmp	r5, #1
 8002264:	d815      	bhi.n	8002292 <HAL_GPIO_Init+0x4a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002266:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002268:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800226c:	2603      	movs	r6, #3
 800226e:	fa06 f60e 	lsl.w	r6, r6, lr
 8002272:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002276:	68cd      	ldr	r5, [r1, #12]
 8002278:	fa05 f50e 	lsl.w	r5, r5, lr
 800227c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800227e:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002282:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002286:	684d      	ldr	r5, [r1, #4]
 8002288:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800228c:	409d      	lsls	r5, r3
 800228e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002290:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002292:	684c      	ldr	r4, [r1, #4]
 8002294:	f004 0403 	and.w	r4, r4, #3
 8002298:	2c03      	cmp	r4, #3
 800229a:	d009      	beq.n	80022b0 <HAL_GPIO_Init+0x68>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800229c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229e:	005f      	lsls	r7, r3, #1
 80022a0:	2503      	movs	r5, #3
 80022a2:	40bd      	lsls	r5, r7
 80022a4:	ea26 0505 	bic.w	r5, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	688c      	ldr	r4, [r1, #8]
 80022aa:	40bc      	lsls	r4, r7
 80022ac:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80022ae:	60c4      	str	r4, [r0, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	684c      	ldr	r4, [r1, #4]
 80022b2:	f004 0403 	and.w	r4, r4, #3
 80022b6:	2c02      	cmp	r4, #2
 80022b8:	d10f      	bne.n	80022da <HAL_GPIO_Init+0x92>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ba:	08dd      	lsrs	r5, r3, #3
 80022bc:	3508      	adds	r5, #8
 80022be:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c2:	f003 0407 	and.w	r4, r3, #7
 80022c6:	00a6      	lsls	r6, r4, #2
 80022c8:	240f      	movs	r4, #15
 80022ca:	40b4      	lsls	r4, r6
 80022cc:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022d0:	690c      	ldr	r4, [r1, #16]
 80022d2:	40b4      	lsls	r4, r6
 80022d4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80022d6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022dc:	005f      	lsls	r7, r3, #1
 80022de:	2603      	movs	r6, #3
 80022e0:	40be      	lsls	r6, r7
 80022e2:	ea25 0606 	bic.w	r6, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e6:	684c      	ldr	r4, [r1, #4]
 80022e8:	f004 0503 	and.w	r5, r4, #3
 80022ec:	fa05 f407 	lsl.w	r4, r5, r7
 80022f0:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 80022f2:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f4:	684c      	ldr	r4, [r1, #4]
 80022f6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80022fa:	d066      	beq.n	80023ca <HAL_GPIO_Init+0x182>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4c37      	ldr	r4, [pc, #220]	; (80023dc <HAL_GPIO_Init+0x194>)
 80022fe:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002300:	f045 0501 	orr.w	r5, r5, #1
 8002304:	6625      	str	r5, [r4, #96]	; 0x60
 8002306:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002308:	f004 0401 	and.w	r4, r4, #1
 800230c:	9401      	str	r4, [sp, #4]
 800230e:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002310:	089e      	lsrs	r6, r3, #2
 8002312:	1cb5      	adds	r5, r6, #2
 8002314:	4c32      	ldr	r4, [pc, #200]	; (80023e0 <HAL_GPIO_Init+0x198>)
 8002316:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231a:	f003 0403 	and.w	r4, r3, #3
 800231e:	00a4      	lsls	r4, r4, #2
 8002320:	270f      	movs	r7, #15
 8002322:	40a7      	lsls	r7, r4
 8002324:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002328:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800232c:	d010      	beq.n	8002350 <HAL_GPIO_Init+0x108>
 800232e:	4d2d      	ldr	r5, [pc, #180]	; (80023e4 <HAL_GPIO_Init+0x19c>)
 8002330:	42a8      	cmp	r0, r5
 8002332:	d00f      	beq.n	8002354 <HAL_GPIO_Init+0x10c>
 8002334:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002338:	42a8      	cmp	r0, r5
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x110>
 800233c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002340:	42a8      	cmp	r0, r5
 8002342:	d00b      	beq.n	800235c <HAL_GPIO_Init+0x114>
 8002344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002348:	42a8      	cmp	r0, r5
 800234a:	d109      	bne.n	8002360 <HAL_GPIO_Init+0x118>
 800234c:	2504      	movs	r5, #4
 800234e:	e008      	b.n	8002362 <HAL_GPIO_Init+0x11a>
 8002350:	2500      	movs	r5, #0
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x11a>
 8002354:	2501      	movs	r5, #1
 8002356:	e004      	b.n	8002362 <HAL_GPIO_Init+0x11a>
 8002358:	2502      	movs	r5, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x11a>
 800235c:	2503      	movs	r5, #3
 800235e:	e000      	b.n	8002362 <HAL_GPIO_Init+0x11a>
 8002360:	2507      	movs	r5, #7
 8002362:	fa05 f404 	lsl.w	r4, r5, r4
 8002366:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002368:	3602      	adds	r6, #2
 800236a:	4d1d      	ldr	r5, [pc, #116]	; (80023e0 <HAL_GPIO_Init+0x198>)
 800236c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002370:	4c1d      	ldr	r4, [pc, #116]	; (80023e8 <HAL_GPIO_Init+0x1a0>)
 8002372:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002374:	43d4      	mvns	r4, r2
 8002376:	ea05 0604 	and.w	r6, r5, r4
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800237a:	684f      	ldr	r7, [r1, #4]
 800237c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002380:	d001      	beq.n	8002386 <HAL_GPIO_Init+0x13e>
        {
          temp |= iocurrent;
 8002382:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002386:	4d18      	ldr	r5, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x1a0>)
 8002388:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800238a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800238c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002390:	684f      	ldr	r7, [r1, #4]
 8002392:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002396:	d001      	beq.n	800239c <HAL_GPIO_Init+0x154>
        {
          temp |= iocurrent;
 8002398:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800239c:	4d12      	ldr	r5, [pc, #72]	; (80023e8 <HAL_GPIO_Init+0x1a0>)
 800239e:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023a0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80023a2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023a6:	684f      	ldr	r7, [r1, #4]
 80023a8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80023ac:	d001      	beq.n	80023b2 <HAL_GPIO_Init+0x16a>
        {
          temp |= iocurrent;
 80023ae:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80023b2:	4d0d      	ldr	r5, [pc, #52]	; (80023e8 <HAL_GPIO_Init+0x1a0>)
 80023b4:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80023b6:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80023b8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ba:	684e      	ldr	r6, [r1, #4]
 80023bc:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80023c0:	d001      	beq.n	80023c6 <HAL_GPIO_Init+0x17e>
        {
          temp |= iocurrent;
 80023c2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_GPIO_Init+0x1a0>)
 80023c8:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80023ca:	3301      	adds	r3, #1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	680a      	ldr	r2, [r1, #0]
 80023ce:	fa32 f403 	lsrs.w	r4, r2, r3
 80023d2:	f47f af3d 	bne.w	8002250 <HAL_GPIO_Init+0x8>
      }
    }

    position++;
  }
}
 80023d6:	b003      	add	sp, #12
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	b10a      	cbz	r2, 80023f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ee:	6181      	str	r1, [r0, #24]
 80023f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	6281      	str	r1, [r0, #40]	; 0x28
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d068      	beq.n	80024ce <HAL_DMA_Init+0xd6>
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023fc:	b410      	push	{r4}
 80023fe:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002400:	6801      	ldr	r1, [r0, #0]
 8002402:	4a35      	ldr	r2, [pc, #212]	; (80024d8 <HAL_DMA_Init+0xe0>)
 8002404:	4291      	cmp	r1, r2
 8002406:	d80a      	bhi.n	800241e <HAL_DMA_Init+0x26>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002408:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_DMA_Init+0xe4>)
 800240a:	440a      	add	r2, r1
 800240c:	4934      	ldr	r1, [pc, #208]	; (80024e0 <HAL_DMA_Init+0xe8>)
 800240e:	fba1 1202 	umull	r1, r2, r1, r2
 8002412:	0912      	lsrs	r2, r2, #4
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_DMA_Init+0xec>)
 800241a:	6402      	str	r2, [r0, #64]	; 0x40
 800241c:	e009      	b.n	8002432 <HAL_DMA_Init+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_DMA_Init+0xf0>)
 8002420:	440a      	add	r2, r1
 8002422:	492f      	ldr	r1, [pc, #188]	; (80024e0 <HAL_DMA_Init+0xe8>)
 8002424:	fba1 1202 	umull	r1, r2, r1, r2
 8002428:	0912      	lsrs	r2, r2, #4
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_DMA_Init+0xf4>)
 8002430:	6402      	str	r2, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002438:	681c      	ldr	r4, [r3, #0]
 800243a:	6822      	ldr	r2, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800243c:	f422 41ff 	bic.w	r1, r2, #32640	; 0x7f80
 8002440:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002444:	6898      	ldr	r0, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002446:	68da      	ldr	r2, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002448:	4310      	orrs	r0, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	4310      	orrs	r0, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	695a      	ldr	r2, [r3, #20]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002450:	4310      	orrs	r0, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	4310      	orrs	r0, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002456:	69da      	ldr	r2, [r3, #28]
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002458:	4310      	orrs	r0, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4302      	orrs	r2, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800245e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002460:	6022      	str	r2, [r4, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002468:	d029      	beq.n	80024be <HAL_DMA_Init+0xc6>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800246a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_DMA_Init+0xec>)
 800246e:	4291      	cmp	r1, r2
 8002470:	d112      	bne.n	8002498 <HAL_DMA_Init+0xa0>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002472:	491f      	ldr	r1, [pc, #124]	; (80024f0 <HAL_DMA_Init+0xf8>)
 8002474:	6808      	ldr	r0, [r1, #0]
 8002476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002478:	f002 041c 	and.w	r4, r2, #28
 800247c:	220f      	movs	r2, #15
 800247e:	40a2      	lsls	r2, r4
 8002480:	ea20 0202 	bic.w	r2, r0, r2
 8002484:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002486:	680c      	ldr	r4, [r1, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800248c:	f000 001c 	and.w	r0, r0, #28
 8002490:	4082      	lsls	r2, r0
 8002492:	4322      	orrs	r2, r4
 8002494:	600a      	str	r2, [r1, #0]
 8002496:	e012      	b.n	80024be <HAL_DMA_Init+0xc6>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_DMA_Init+0xfc>)
 800249a:	6808      	ldr	r0, [r1, #0]
 800249c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249e:	f002 021c 	and.w	r2, r2, #28
 80024a2:	240f      	movs	r4, #15
 80024a4:	fa04 f202 	lsl.w	r2, r4, r2
 80024a8:	ea20 0202 	bic.w	r2, r0, r2
 80024ac:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024ae:	680c      	ldr	r4, [r1, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80024b4:	f000 001c 	and.w	r0, r0, #28
 80024b8:	4082      	lsls	r2, r0
 80024ba:	4322      	orrs	r2, r4
 80024bc:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024be:	2000      	movs	r0, #0
 80024c0:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c8:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
 80024cc:	e001      	b.n	80024d2 <HAL_DMA_Init+0xda>
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
 80024d0:	4770      	bx	lr

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
}
 80024d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40020407 	.word	0x40020407
 80024dc:	bffdfff8 	.word	0xbffdfff8
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	40020000 	.word	0x40020000
 80024e8:	bffdfbf8 	.word	0xbffdfbf8
 80024ec:	40020400 	.word	0x40020400
 80024f0:	400200a8 	.word	0x400200a8
 80024f4:	400204a8 	.word	0x400204a8

080024f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024fc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80024fe:	6804      	ldr	r4, [r0, #0]
 8002500:	6825      	ldr	r5, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002502:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002504:	f003 031c 	and.w	r3, r3, #28
 8002508:	2204      	movs	r2, #4
 800250a:	409a      	lsls	r2, r3
 800250c:	4211      	tst	r1, r2
 800250e:	d016      	beq.n	800253e <HAL_DMA_IRQHandler+0x46>
 8002510:	f015 0f04 	tst.w	r5, #4
 8002514:	d013      	beq.n	800253e <HAL_DMA_IRQHandler+0x46>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	f013 0f20 	tst.w	r3, #32
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x2e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6023      	str	r3, [r4, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002526:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002528:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800252a:	f003 021c 	and.w	r2, r3, #28
 800252e:	2304      	movs	r3, #4
 8002530:	4093      	lsls	r3, r2
 8002532:	604b      	str	r3, [r1, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002534:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03e      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800253a:	4798      	blx	r3
 800253c:	bd38      	pop	{r3, r4, r5, pc}
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800253e:	2202      	movs	r2, #2
 8002540:	409a      	lsls	r2, r3
 8002542:	4211      	tst	r1, r2
 8002544:	d01b      	beq.n	800257e <HAL_DMA_IRQHandler+0x86>
 8002546:	f015 0f02 	tst.w	r5, #2
 800254a:	d018      	beq.n	800257e <HAL_DMA_IRQHandler+0x86>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f013 0f20 	tst.w	r3, #32
 8002552:	d106      	bne.n	8002562 <HAL_DMA_IRQHandler+0x6a>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	f023 030a 	bic.w	r3, r3, #10
 800255a:	6023      	str	r3, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800255c:	2301      	movs	r3, #1
 800255e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002562:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002564:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002566:	f003 021c 	and.w	r2, r3, #28
 800256a:	2302      	movs	r3, #2
 800256c:	4093      	lsls	r3, r2
 800256e:	604b      	str	r3, [r1, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002570:	2300      	movs	r3, #0
 8002572:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002576:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002578:	b1f3      	cbz	r3, 80025b8 <HAL_DMA_IRQHandler+0xc0>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800257a:	4798      	blx	r3
 800257c:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800257e:	2208      	movs	r2, #8
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	4219      	tst	r1, r3
 8002586:	d017      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xc0>
 8002588:	f015 0f08 	tst.w	r5, #8
 800258c:	d014      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xc0>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f023 030e 	bic.w	r3, r3, #14
 8002594:	6023      	str	r3, [r4, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002596:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002598:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800259a:	f003 031c 	and.w	r3, r3, #28
 800259e:	2201      	movs	r2, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	604b      	str	r3, [r1, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a6:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	2300      	movs	r3, #0
 80025ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025b4:	b103      	cbz	r3, 80025b8 <HAL_DMA_IRQHandler+0xc0>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b6:	4798      	blx	r3
 80025b8:	bd38      	pop	{r3, r4, r5, pc}
 80025ba:	bf00      	nop

080025bc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80025be:	6818      	ldr	r0, [r3, #0]
#endif
}
 80025c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40007000 	.word	0x40007000

080025cc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80025d0:	d127      	bne.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x56>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	d030      	beq.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x76>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e0:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80025e2:	6813      	ldr	r3, [r2, #0]
 80025e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2332      	movs	r3, #50	; 0x32
 80025f4:	fb03 f302 	mul.w	r3, r3, r2
 80025f8:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002602:	e000      	b.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 8002604:	3b01      	subs	r3, #1
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002608:	6952      	ldr	r2, [r2, #20]
 800260a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800260e:	d001      	beq.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x48>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f7      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x38>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800261c:	d013      	beq.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x7a>
      {
        return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	4770      	bx	lr
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d00c      	beq.n	800264a <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800263e:	2000      	movs	r0, #0
 8002640:	4770      	bx	lr
 8002642:	2000      	movs	r0, #0
 8002644:	4770      	bx	lr
 8002646:	2000      	movs	r0, #0
 8002648:	4770      	bx	lr
 800264a:	2000      	movs	r0, #0
}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000
 8002654:	20000008 	.word	0x20000008
 8002658:	431bde83 	.word	0x431bde83

0800265c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800265e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	0200      	lsls	r0, r0, #8
 800266a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266e:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002670:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002674:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002678:	60d0      	str	r0, [r2, #12]
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_NVIC_SetPriority+0x5c>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268a:	f1c3 0407 	rsb	r4, r3, #7
 800268e:	2c04      	cmp	r4, #4
 8002690:	bf28      	it	cs
 8002692:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002694:	1d1d      	adds	r5, r3, #4
 8002696:	2d06      	cmp	r5, #6
 8002698:	d901      	bls.n	800269e <HAL_NVIC_SetPriority+0x1e>
 800269a:	1edd      	subs	r5, r3, #3
 800269c:	e000      	b.n	80026a0 <HAL_NVIC_SetPriority+0x20>
 800269e:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	2301      	movs	r3, #1
 80026a2:	fa03 f404 	lsl.w	r4, r3, r4
 80026a6:	3c01      	subs	r4, #1
 80026a8:	4021      	ands	r1, r4
 80026aa:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	40ab      	lsls	r3, r5
 80026ae:	3b01      	subs	r3, #1
 80026b0:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80026b2:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80026b4:	2800      	cmp	r0, #0
 80026b6:	db08      	blt.n	80026ca <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026c4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80026c8:	e005      	b.n	80026d6 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	f000 000f 	and.w	r0, r0, #15
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_NVIC_SetPriority+0x60>)
 80026d4:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026d6:	bc30      	pop	{r4, r5}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00
 80026e0:	e000ed14 	.word	0xe000ed14

080026e4 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80026e4:	2800      	cmp	r0, #0
 80026e6:	db08      	blt.n	80026fa <HAL_NVIC_EnableIRQ+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e8:	0942      	lsrs	r2, r0, #5
 80026ea:	f000 001f 	and.w	r0, r0, #31
 80026ee:	2301      	movs	r3, #1
 80026f0:	fa03 f000 	lsl.w	r0, r3, r0
 80026f4:	4b01      	ldr	r3, [pc, #4]	; (80026fc <HAL_NVIC_EnableIRQ+0x18>)
 80026f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002704:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d126      	bne.n	800275c <HAL_TIM_Base_Start_IT+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270e:	2302      	movs	r3, #2
 8002710:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002714:	6802      	ldr	r2, [r0, #0]
 8002716:	68d3      	ldr	r3, [r2, #12]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271e:	6803      	ldr	r3, [r0, #0]
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_TIM_Base_Start_IT+0x64>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d006      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x30>
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d003      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x30>
 800272c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002730:	4293      	cmp	r3, r2
 8002732:	d10d      	bne.n	8002750 <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_TIM_Base_Start_IT+0x68>)
 8002738:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	2a06      	cmp	r2, #6
 800273c:	d010      	beq.n	8002760 <HAL_TIM_Base_Start_IT+0x5c>
 800273e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002742:	d00f      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x60>
    {
      __HAL_TIM_ENABLE(htim);
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	4770      	bx	lr
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002758:	2000      	movs	r0, #0
 800275a:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
  {
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
 800275e:	4770      	bx	lr
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2000      	movs	r0, #0
 8002762:	4770      	bx	lr
 8002764:	2000      	movs	r0, #0
}
 8002766:	4770      	bx	lr
 8002768:	40012c00 	.word	0x40012c00
 800276c:	00010007 	.word	0x00010007

08002770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002780:	b510      	push	{r4, lr}
 8002782:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002784:	6803      	ldr	r3, [r0, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	f012 0f02 	tst.w	r2, #2
 800278c:	d017      	beq.n	80027be <HAL_TIM_IRQHandler+0x3e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	f012 0f02 	tst.w	r2, #2
 8002794:	d013      	beq.n	80027be <HAL_TIM_IRQHandler+0x3e>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002796:	f06f 0202 	mvn.w	r2, #2
 800279a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279c:	2301      	movs	r3, #1
 800279e:	7703      	strb	r3, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	6803      	ldr	r3, [r0, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f013 0f03 	tst.w	r3, #3
 80027a8:	d002      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x30>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	f7ff ffe3 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
 80027ae:	e004      	b.n	80027ba <HAL_TIM_IRQHandler+0x3a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b0:	f7ff ffde 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ffdf 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	2300      	movs	r3, #0
 80027bc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	f012 0f04 	tst.w	r2, #4
 80027c6:	d019      	beq.n	80027fc <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	f012 0f04 	tst.w	r2, #4
 80027ce:	d015      	beq.n	80027fc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	f06f 0204 	mvn.w	r2, #4
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80027e2:	d003      	beq.n	80027ec <HAL_TIM_IRQHandler+0x6c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ffc5 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
 80027ea:	e005      	b.n	80027f8 <HAL_TIM_IRQHandler+0x78>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff ffbf 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff ffc0 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f8:	2300      	movs	r3, #0
 80027fa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	f012 0f08 	tst.w	r2, #8
 8002804:	d019      	beq.n	800283a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	f012 0f08 	tst.w	r2, #8
 800280c:	d015      	beq.n	800283a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800280e:	f06f 0208 	mvn.w	r2, #8
 8002812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002814:	2304      	movs	r3, #4
 8002816:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f013 0f03 	tst.w	r3, #3
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ffa6 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xb6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff ffa0 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff ffa1 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	2300      	movs	r3, #0
 8002838:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	f012 0f10 	tst.w	r2, #16
 8002842:	d019      	beq.n	8002878 <HAL_TIM_IRQHandler+0xf8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	f012 0f10 	tst.w	r2, #16
 800284a:	d015      	beq.n	8002878 <HAL_TIM_IRQHandler+0xf8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284c:	f06f 0210 	mvn.w	r2, #16
 8002850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002852:	2308      	movs	r3, #8
 8002854:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800285e:	d003      	beq.n	8002868 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff ff87 	bl	8002774 <HAL_TIM_IC_CaptureCallback>
 8002866:	e005      	b.n	8002874 <HAL_TIM_IRQHandler+0xf4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ff81 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff ff82 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002874:	2300      	movs	r3, #0
 8002876:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	f012 0f01 	tst.w	r2, #1
 8002880:	d009      	beq.n	8002896 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	f012 0f01 	tst.w	r2, #1
 8002888:	d005      	beq.n	8002896 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800288a:	f06f 0201 	mvn.w	r2, #1
 800288e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002890:	4620      	mov	r0, r4
 8002892:	f7fd ff19 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x134>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028a6:	d005      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x134>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 f89a 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80028bc:	d009      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x152>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028c4:	d005      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x152>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 f88d 	bl	80029ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028da:	d009      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x170>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028e2:	d005      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x170>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff ff46 	bl	800277c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	f012 0f20 	tst.w	r2, #32
 80028f8:	d009      	beq.n	800290e <HAL_TIM_IRQHandler+0x18e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	f012 0f20 	tst.w	r2, #32
 8002900:	d005      	beq.n	800290e <HAL_TIM_IRQHandler+0x18e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002902:	f06f 0220 	mvn.w	r2, #32
 8002906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f86b 	bl	80029e4 <HAL_TIMEx_CommutCallback>
 800290e:	bd10      	pop	{r4, pc}

08002910 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002910:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <TIM_Base_SetConfig+0x6c>)
 8002914:	4290      	cmp	r0, r2
 8002916:	d002      	beq.n	800291e <TIM_Base_SetConfig+0xe>
 8002918:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800291c:	d103      	bne.n	8002926 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <TIM_Base_SetConfig+0x6c>)
 8002928:	4290      	cmp	r0, r2
 800292a:	d00a      	beq.n	8002942 <TIM_Base_SetConfig+0x32>
 800292c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002930:	d007      	beq.n	8002942 <TIM_Base_SetConfig+0x32>
 8002932:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002936:	4290      	cmp	r0, r2
 8002938:	d003      	beq.n	8002942 <TIM_Base_SetConfig+0x32>
 800293a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800293e:	4290      	cmp	r0, r2
 8002940:	d103      	bne.n	800294a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002946:	68ca      	ldr	r2, [r1, #12]
 8002948:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800294a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294e:	694a      	ldr	r2, [r1, #20]
 8002950:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002952:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	688b      	ldr	r3, [r1, #8]
 8002956:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	680b      	ldr	r3, [r1, #0]
 800295a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <TIM_Base_SetConfig+0x6c>)
 800295e:	4298      	cmp	r0, r3
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x62>
 8002962:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002966:	4298      	cmp	r0, r3
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x62>
 800296a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296e:	4298      	cmp	r0, r3
 8002970:	d101      	bne.n	8002976 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002972:	690b      	ldr	r3, [r1, #16]
 8002974:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002976:	2301      	movs	r3, #1
 8002978:	6143      	str	r3, [r0, #20]
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00

08002980 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	b368      	cbz	r0, 80029de <HAL_TIM_Base_Init+0x5e>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002982:	b510      	push	{r4, lr}
 8002984:	4604      	mov	r4, r0
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800298a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800298e:	d104      	bne.n	800299a <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002990:	2300      	movs	r3, #0
 8002992:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002996:	f7ff feb3 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	1d21      	adds	r1, r4, #4
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	f7ff ffb4 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80029b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80029b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80029be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80029ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80029d2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80029da:	2000      	movs	r0, #0
 80029dc:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80029f4:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f6:	6882      	ldr	r2, [r0, #8]
 80029f8:	6903      	ldr	r3, [r0, #16]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	6943      	ldr	r3, [r0, #20]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	69c3      	ldr	r3, [r0, #28]
 8002a02:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a04:	6801      	ldr	r1, [r0, #0]
 8002a06:	6808      	ldr	r0, [r1, #0]
 8002a08:	4b99      	ldr	r3, [pc, #612]	; (8002c70 <UART_SetConfig+0x280>)
 8002a0a:	4003      	ands	r3, r0
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	6821      	ldr	r1, [r4, #0]
 8002a12:	684b      	ldr	r3, [r1, #4]
 8002a14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a18:	68e3      	ldr	r3, [r4, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1e:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	4b94      	ldr	r3, [pc, #592]	; (8002c74 <UART_SetConfig+0x284>)
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a28:	6a23      	ldr	r3, [r4, #32]
 8002a2a:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2c:	6893      	ldr	r3, [r2, #8]
 8002a2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	4a8f      	ldr	r2, [pc, #572]	; (8002c78 <UART_SetConfig+0x288>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d113      	bne.n	8002a66 <UART_SetConfig+0x76>
 8002a3e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002a42:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	2a03      	cmp	r2, #3
 8002a4c:	d809      	bhi.n	8002a62 <UART_SetConfig+0x72>
 8002a4e:	e8df f002 	tbb	[pc, r2]
 8002a52:	0402      	.short	0x0402
 8002a54:	065f      	.short	0x065f
 8002a56:	2201      	movs	r2, #1
 8002a58:	e063      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	e061      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a5e:	2208      	movs	r2, #8
 8002a60:	e05f      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a62:	2210      	movs	r2, #16
 8002a64:	e05d      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a66:	4a85      	ldr	r2, [pc, #532]	; (8002c7c <UART_SetConfig+0x28c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d118      	bne.n	8002a9e <UART_SetConfig+0xae>
 8002a6c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002a70:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002a74:	f002 020c 	and.w	r2, r2, #12
 8002a78:	2a0c      	cmp	r2, #12
 8002a7a:	d80e      	bhi.n	8002a9a <UART_SetConfig+0xaa>
 8002a7c:	e8df f002 	tbb	[pc, r2]
 8002a80:	0d0d0d07 	.word	0x0d0d0d07
 8002a84:	0d0d0d09 	.word	0x0d0d0d09
 8002a88:	0d0d0d4a 	.word	0x0d0d0d4a
 8002a8c:	0b          	.byte	0x0b
 8002a8d:	00          	.byte	0x00
 8002a8e:	2200      	movs	r2, #0
 8002a90:	e047      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a92:	2204      	movs	r2, #4
 8002a94:	e045      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a96:	2208      	movs	r2, #8
 8002a98:	e043      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	e041      	b.n	8002b22 <UART_SetConfig+0x132>
 8002a9e:	4a78      	ldr	r2, [pc, #480]	; (8002c80 <UART_SetConfig+0x290>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d117      	bne.n	8002ad4 <UART_SetConfig+0xe4>
 8002aa4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002aa8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002aac:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002ab0:	2a10      	cmp	r2, #16
 8002ab2:	d009      	beq.n	8002ac8 <UART_SetConfig+0xd8>
 8002ab4:	d801      	bhi.n	8002aba <UART_SetConfig+0xca>
 8002ab6:	b12a      	cbz	r2, 8002ac4 <UART_SetConfig+0xd4>
 8002ab8:	e00a      	b.n	8002ad0 <UART_SetConfig+0xe0>
 8002aba:	2a20      	cmp	r2, #32
 8002abc:	d02c      	beq.n	8002b18 <UART_SetConfig+0x128>
 8002abe:	2a30      	cmp	r2, #48	; 0x30
 8002ac0:	d004      	beq.n	8002acc <UART_SetConfig+0xdc>
 8002ac2:	e005      	b.n	8002ad0 <UART_SetConfig+0xe0>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	e02c      	b.n	8002b22 <UART_SetConfig+0x132>
 8002ac8:	2204      	movs	r2, #4
 8002aca:	e02a      	b.n	8002b22 <UART_SetConfig+0x132>
 8002acc:	2208      	movs	r2, #8
 8002ace:	e028      	b.n	8002b22 <UART_SetConfig+0x132>
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	e026      	b.n	8002b22 <UART_SetConfig+0x132>
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <UART_SetConfig+0x284>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d120      	bne.n	8002b1c <UART_SetConfig+0x12c>
 8002ada:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002ade:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ae2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002ae6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002aea:	d00b      	beq.n	8002b04 <UART_SetConfig+0x114>
 8002aec:	d801      	bhi.n	8002af2 <UART_SetConfig+0x102>
 8002aee:	b13a      	cbz	r2, 8002b00 <UART_SetConfig+0x110>
 8002af0:	e00c      	b.n	8002b0c <UART_SetConfig+0x11c>
 8002af2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002af6:	d013      	beq.n	8002b20 <UART_SetConfig+0x130>
 8002af8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002afc:	d004      	beq.n	8002b08 <UART_SetConfig+0x118>
 8002afe:	e005      	b.n	8002b0c <UART_SetConfig+0x11c>
 8002b00:	2200      	movs	r2, #0
 8002b02:	e00e      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b04:	2204      	movs	r2, #4
 8002b06:	e00c      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b08:	2208      	movs	r2, #8
 8002b0a:	e00a      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	e008      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b10:	2202      	movs	r2, #2
 8002b12:	e006      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b14:	2202      	movs	r2, #2
 8002b16:	e004      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b18:	2202      	movs	r2, #2
 8002b1a:	e002      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	e000      	b.n	8002b22 <UART_SetConfig+0x132>
 8002b20:	2202      	movs	r2, #2

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b22:	4954      	ldr	r1, [pc, #336]	; (8002c74 <UART_SetConfig+0x284>)
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d138      	bne.n	8002b9a <UART_SetConfig+0x1aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b28:	2a08      	cmp	r2, #8
 8002b2a:	d811      	bhi.n	8002b50 <UART_SetConfig+0x160>
 8002b2c:	e8df f002 	tbb	[pc, r2]
 8002b30:	10051008 	.word	0x10051008
 8002b34:	1010100c 	.word	0x1010100c
 8002b38:	13          	.byte	0x13
 8002b39:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b3a:	4852      	ldr	r0, [pc, #328]	; (8002c84 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3c:	2500      	movs	r5, #0
 8002b3e:	e00d      	b.n	8002b5c <UART_SetConfig+0x16c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b40:	f7ff f8f4 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b44:	2500      	movs	r5, #0
    /* Retrieve frequency clock */
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8002b46:	e009      	b.n	8002b5c <UART_SetConfig+0x16c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b48:	f7fe fc76 	bl	8001438 <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b4c:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 8002b4e:	e005      	b.n	8002b5c <UART_SetConfig+0x16c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8002b50:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8002b52:	2501      	movs	r5, #1
        break;
 8002b54:	e002      	b.n	8002b5c <UART_SetConfig+0x16c>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b5a:	2500      	movs	r5, #0
        ret = HAL_ERROR;
        break;
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f000 809a 	beq.w	8002c96 <UART_SetConfig+0x2a6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002b68:	4298      	cmp	r0, r3
 8002b6a:	d37d      	bcc.n	8002c68 <UART_SetConfig+0x278>
 8002b6c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002b70:	d87c      	bhi.n	8002c6c <UART_SetConfig+0x27c>
      {
        ret = HAL_ERROR;
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b72:	2300      	movs	r3, #0
 8002b74:	0e07      	lsrs	r7, r0, #24
 8002b76:	0206      	lsls	r6, r0, #8
 8002b78:	0850      	lsrs	r0, r2, #1
 8002b7a:	eb16 0b00 	adds.w	fp, r6, r0
 8002b7e:	f147 0c00 	adc.w	ip, r7, #0
 8002b82:	4658      	mov	r0, fp
 8002b84:	4661      	mov	r1, ip
 8002b86:	f7fd fb31 	bl	80001ec <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b8a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <UART_SetConfig+0x298>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d87b      	bhi.n	8002c8c <UART_SetConfig+0x29c>
        {
          huart->Instance->BRR = usartdiv;
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	60d8      	str	r0, [r3, #12]
 8002b98:	e07d      	b.n	8002c96 <UART_SetConfig+0x2a6>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b9a:	69e3      	ldr	r3, [r4, #28]
 8002b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba0:	d134      	bne.n	8002c0c <UART_SetConfig+0x21c>
  {
    switch (clocksource)
 8002ba2:	2a08      	cmp	r2, #8
 8002ba4:	d815      	bhi.n	8002bd2 <UART_SetConfig+0x1e2>
 8002ba6:	e8df f002 	tbb	[pc, r2]
 8002baa:	0c08      	.short	0x0c08
 8002bac:	14101405 	.word	0x14101405
 8002bb0:	1414      	.short	0x1414
 8002bb2:	17          	.byte	0x17
 8002bb3:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb4:	4833      	ldr	r0, [pc, #204]	; (8002c84 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e011      	b.n	8002bde <UART_SetConfig+0x1ee>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff f8b7 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bbe:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8002bc0:	e00d      	b.n	8002bde <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bc2:	f7ff f8c5 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc6:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 8002bc8:	e009      	b.n	8002bde <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bca:	f7fe fc35 	bl	8001438 <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bce:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 8002bd0:	e005      	b.n	8002bde <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8002bd2:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8002bd4:	2501      	movs	r5, #1
        break;
 8002bd6:	e002      	b.n	8002bde <UART_SetConfig+0x1ee>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bdc:	2500      	movs	r5, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d059      	beq.n	8002c96 <UART_SetConfig+0x2a6>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	0853      	lsrs	r3, r2, #1
 8002be6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002bea:	fbb0 f0f2 	udiv	r0, r0, r2
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bee:	f1a0 0210 	sub.w	r2, r0, #16
 8002bf2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d84a      	bhi.n	8002c90 <UART_SetConfig+0x2a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bfa:	b283      	uxth	r3, r0
 8002bfc:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c00:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002c04:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	60d8      	str	r0, [r3, #12]
 8002c0a:	e044      	b.n	8002c96 <UART_SetConfig+0x2a6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c0c:	2a08      	cmp	r2, #8
 8002c0e:	d815      	bhi.n	8002c3c <UART_SetConfig+0x24c>
 8002c10:	e8df f002 	tbb	[pc, r2]
 8002c14:	14050c08 	.word	0x14050c08
 8002c18:	14141410 	.word	0x14141410
 8002c1c:	17          	.byte	0x17
 8002c1d:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c1e:	4819      	ldr	r0, [pc, #100]	; (8002c84 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c20:	2500      	movs	r5, #0
 8002c22:	e011      	b.n	8002c48 <UART_SetConfig+0x258>
  else
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff f882 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c28:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8002c2a:	e00d      	b.n	8002c48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7ff f890 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c30:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 8002c32:	e009      	b.n	8002c48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c34:	f7fe fc00 	bl	8001438 <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c38:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 8002c3a:	e005      	b.n	8002c48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8002c3c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8002c3e:	2501      	movs	r5, #1
        break;
 8002c40:	e002      	b.n	8002c48 <UART_SetConfig+0x258>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c46:	2500      	movs	r5, #0
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002c48:	b328      	cbz	r0, 8002c96 <UART_SetConfig+0x2a6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c4a:	6863      	ldr	r3, [r4, #4]
 8002c4c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c50:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c54:	f1a0 0210 	sub.w	r2, r0, #16
 8002c58:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d819      	bhi.n	8002c94 <UART_SetConfig+0x2a4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	b280      	uxth	r0, r0
 8002c64:	60d8      	str	r0, [r3, #12]
 8002c66:	e016      	b.n	8002c96 <UART_SetConfig+0x2a6>
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
          (pclk > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8002c68:	2501      	movs	r5, #1
 8002c6a:	e014      	b.n	8002c96 <UART_SetConfig+0x2a6>
 8002c6c:	2501      	movs	r5, #1
 8002c6e:	e012      	b.n	8002c96 <UART_SetConfig+0x2a6>
 8002c70:	efff69f3 	.word	0xefff69f3
 8002c74:	40008000 	.word	0x40008000
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40004800 	.word	0x40004800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	000ffcff 	.word	0x000ffcff
        {
          huart->Instance->BRR = usartdiv;
        }
        else
        {
          ret = HAL_ERROR;
 8002c8c:	2501      	movs	r5, #1
 8002c8e:	e002      	b.n	8002c96 <UART_SetConfig+0x2a6>
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
        huart->Instance->BRR = brrtemp;
      }
      else
      {
        ret = HAL_ERROR;
 8002c90:	2501      	movs	r5, #1
 8002c92:	e000      	b.n	8002c96 <UART_SetConfig+0x2a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 8002c94:	2501      	movs	r5, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002c9a:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002ca2:	bf00      	nop

08002ca4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ca6:	f013 0f01 	tst.w	r3, #1
 8002caa:	d006      	beq.n	8002cba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cac:	6801      	ldr	r1, [r0, #0]
 8002cae:	684b      	ldr	r3, [r1, #4]
 8002cb0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cbc:	f013 0f02 	tst.w	r3, #2
 8002cc0:	d006      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc2:	6801      	ldr	r1, [r0, #0]
 8002cc4:	684b      	ldr	r3, [r1, #4]
 8002cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cd2:	f013 0f04 	tst.w	r3, #4
 8002cd6:	d006      	beq.n	8002ce6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cd8:	6801      	ldr	r1, [r0, #0]
 8002cda:	684b      	ldr	r3, [r1, #4]
 8002cdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ce0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ce6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ce8:	f013 0f08 	tst.w	r3, #8
 8002cec:	d006      	beq.n	8002cfc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cee:	6801      	ldr	r1, [r0, #0]
 8002cf0:	684b      	ldr	r3, [r1, #4]
 8002cf2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cfe:	f013 0f10 	tst.w	r3, #16
 8002d02:	d006      	beq.n	8002d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d04:	6801      	ldr	r1, [r0, #0]
 8002d06:	688b      	ldr	r3, [r1, #8]
 8002d08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d14:	f013 0f20 	tst.w	r3, #32
 8002d18:	d006      	beq.n	8002d28 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d1a:	6801      	ldr	r1, [r0, #0]
 8002d1c:	688b      	ldr	r3, [r1, #8]
 8002d1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d2e:	d011      	beq.n	8002d54 <UART_AdvFeatureConfig+0xb0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d30:	6801      	ldr	r1, [r0, #0]
 8002d32:	684b      	ldr	r3, [r1, #4]
 8002d34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d44:	d106      	bne.n	8002d54 <UART_AdvFeatureConfig+0xb0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d46:	6801      	ldr	r1, [r0, #0]
 8002d48:	684b      	ldr	r3, [r1, #4]
 8002d4a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8002d4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d5a:	d006      	beq.n	8002d6a <UART_AdvFeatureConfig+0xc6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5c:	6801      	ldr	r1, [r0, #0]
 8002d5e:	684b      	ldr	r3, [r1, #4]
 8002d60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d64:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
 8002d6a:	4770      	bx	lr

08002d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d70:	4604      	mov	r4, r0
 8002d72:	460f      	mov	r7, r1
 8002d74:	4616      	mov	r6, r2
 8002d76:	4698      	mov	r8, r3
 8002d78:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	e053      	b.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xb8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d80:	d050      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xb8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe fb0b 	bl	800139c <HAL_GetTick>
 8002d86:	ebc8 0000 	rsb	r0, r8, r0
 8002d8a:	4285      	cmp	r5, r0
 8002d8c:	d300      	bcc.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x24>
 8002d8e:	b9ed      	cbnz	r5, 8002dcc <UART_WaitOnFlagUntilTimeout+0x60>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d90:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	e852 3f00 	ldrex	r3, [r2]
 8002d96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	e842 3100 	strex	r1, r3, [r2]
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d1f6      	bne.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x24>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	f102 0308 	add.w	r3, r2, #8
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	3208      	adds	r2, #8
 8002db2:	e842 3100 	strex	r1, r3, [r2]
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d1f3      	bne.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x36>

        huart->gState = HAL_UART_STATE_READY;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	67e3      	str	r3, [r4, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

        return HAL_TIMEOUT;
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	f012 0f04 	tst.w	r2, #4
 8002dd4:	d026      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xb8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002ddc:	d022      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0xb8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de2:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de4:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	e852 3f00 	ldrex	r3, [r2]
 8002dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	e842 3100 	strex	r1, r3, [r2]
 8002df2:	2900      	cmp	r1, #0
 8002df4:	d1f6      	bne.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x78>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df6:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	f102 0308 	add.w	r3, r2, #8
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	3208      	adds	r2, #8
 8002e06:	e842 3100 	strex	r1, r3, [r2]
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d1f3      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>

          huart->gState = HAL_UART_STATE_READY;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e12:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e14:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e1e:	2003      	movs	r0, #3
 8002e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	ea37 0303 	bics.w	r3, r7, r3
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	42b3      	cmp	r3, r6
 8002e34:	d0a2      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x10>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
}
 8002e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e3c:	b530      	push	{r4, r5, lr}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e48:	f7fe faa8 	bl	800139c <HAL_GetTick>
 8002e4c:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f013 0f08 	tst.w	r3, #8
 8002e56:	d00a      	beq.n	8002e6e <UART_CheckIdleState+0x32>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff ff80 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002e6c:	b9b8      	cbnz	r0, 8002e9e <UART_CheckIdleState+0x62>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f013 0f04 	tst.w	r3, #4
 8002e76:	d00a      	beq.n	8002e8e <UART_CheckIdleState+0x52>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462b      	mov	r3, r5
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ff70 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002e8c:	b948      	cbnz	r0, 8002ea2 <UART_CheckIdleState+0x66>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e92:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	2000      	movs	r0, #0
 8002e96:	6620      	str	r0, [r4, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e98:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74

  return HAL_OK;
 8002e9c:	e002      	b.n	8002ea4 <UART_CheckIdleState+0x68>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	e000      	b.n	8002ea4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ea2:	2003      	movs	r0, #3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002ea4:	b003      	add	sp, #12
 8002ea6:	bd30      	pop	{r4, r5, pc}

08002ea8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	b358      	cbz	r0, 8002f02 <HAL_UART_Init+0x5a>
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	4604      	mov	r4, r0
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002eb0:	b91b      	cbnz	r3, 8002eba <HAL_UART_Init+0x12>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	f7fd fe11 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eba:	2324      	movs	r3, #36	; 0x24
 8002ebc:	67a3      	str	r3, [r4, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	6813      	ldr	r3, [r2, #0]
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff fd91 	bl	80029f0 <UART_SetConfig>
 8002ece:	2801      	cmp	r0, #1
 8002ed0:	d019      	beq.n	8002f06 <HAL_UART_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ed4:	b113      	cbz	r3, 8002edc <HAL_UART_Init+0x34>
  {
    UART_AdvFeatureConfig(huart);
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fee4 	bl	8002ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	6853      	ldr	r3, [r2, #4]
 8002ee0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ee4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee6:	6822      	ldr	r2, [r4, #0]
 8002ee8:	6893      	ldr	r3, [r2, #8]
 8002eea:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002eee:	6093      	str	r3, [r2, #8]

  __HAL_UART_ENABLE(huart);
 8002ef0:	6822      	ldr	r2, [r4, #0]
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7ff ff9e 	bl	8002e3c <UART_CheckIdleState>
 8002f00:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
 8002f04:	4770      	bx	lr

  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <SystemInit+0x10>)
 8002f0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f1c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f1e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f28:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f2a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002f2c:	6803      	ldr	r3, [r0, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	6003      	str	r3, [r0, #0]
 8002f32:	4770      	bx	lr

08002f34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f36:	6842      	ldr	r2, [r0, #4]
 8002f38:	6881      	ldr	r1, [r0, #8]
 8002f3a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f3c:	6882      	ldr	r2, [r0, #8]
 8002f3e:	6841      	ldr	r1, [r0, #4]
 8002f40:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4290      	cmp	r0, r2
 8002f46:	d101      	bne.n	8002f4c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f48:	6882      	ldr	r2, [r0, #8]
 8002f4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	3a01      	subs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f56:	6818      	ldr	r0, [r3, #0]
}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <prvResetNextTaskUnblockTime+0x24>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b923      	cbnz	r3, 8002f6e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <prvResetNextTaskUnblockTime+0x28>)
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <prvResetNextTaskUnblockTime+0x24>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <prvResetNextTaskUnblockTime+0x28>)
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000002c 	.word	0x2000002c
 8002f84:	200004ac 	.word	0x200004ac

08002f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <xTaskIncrementTick+0xf0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d168      	bne.n	8003064 <xTaskIncrementTick+0xdc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f92:	4b3a      	ldr	r3, [pc, #232]	; (800307c <xTaskIncrementTick+0xf4>)
 8002f94:	681d      	ldr	r5, [r3, #0]
 8002f96:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f98:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f9a:	b9c5      	cbnz	r5, 8002fce <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <xTaskIncrementTick+0xf8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b143      	cbz	r3, 8002fb6 <xTaskIncrementTick+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	e7fe      	b.n	8002fb4 <xTaskIncrementTick+0x2c>
 8002fb6:	4a32      	ldr	r2, [pc, #200]	; (8003080 <xTaskIncrementTick+0xf8>)
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <xTaskIncrementTick+0xfc>)
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	6010      	str	r0, [r2, #0]
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	4a31      	ldr	r2, [pc, #196]	; (8003088 <xTaskIncrementTick+0x100>)
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	f7ff ffc7 	bl	8002f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <xTaskIncrementTick+0x104>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429d      	cmp	r5, r3
 8002fd4:	d203      	bcs.n	8002fde <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fd6:	2400      	movs	r4, #0
 8002fd8:	e035      	b.n	8003046 <xTaskIncrementTick+0xbe>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 8002fda:	2401      	movs	r4, #1
 8002fdc:	e000      	b.n	8002fe0 <xTaskIncrementTick+0x58>
 8002fde:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <xTaskIncrementTick+0xf8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b923      	cbnz	r3, 8002ff2 <xTaskIncrementTick+0x6a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <xTaskIncrementTick+0x104>)
 8002fee:	601a      	str	r2, [r3, #0]
					break;
 8002ff0:	e029      	b.n	8003046 <xTaskIncrementTick+0xbe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <xTaskIncrementTick+0xf8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ffa:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 8002ffc:	429d      	cmp	r5, r3
 8002ffe:	d202      	bcs.n	8003006 <xTaskIncrementTick+0x7e>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <xTaskIncrementTick+0x104>)
 8003002:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003004:	e01f      	b.n	8003046 <xTaskIncrementTick+0xbe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003006:	1d37      	adds	r7, r6, #4
 8003008:	4638      	mov	r0, r7
 800300a:	f7ff ff93 	bl	8002f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800300e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003010:	b11b      	cbz	r3, 800301a <xTaskIncrementTick+0x92>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003012:	f106 0018 	add.w	r0, r6, #24
 8003016:	f7ff ff8d 	bl	8002f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800301a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <xTaskIncrementTick+0x108>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <xTaskIncrementTick+0xa0>
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <xTaskIncrementTick+0x108>)
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800302c:	009a      	lsls	r2, r3, #2
 800302e:	4639      	mov	r1, r7
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <xTaskIncrementTick+0x10c>)
 8003032:	4410      	add	r0, r2
 8003034:	f7ff ff72 	bl	8002f1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003038:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <xTaskIncrementTick+0x110>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d2ca      	bcs.n	8002fda <xTaskIncrementTick+0x52>
 8003044:	e7cc      	b.n	8002fe0 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <xTaskIncrementTick+0x110>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <xTaskIncrementTick+0x10c>)
 8003054:	589b      	ldr	r3, [r3, r2]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d900      	bls.n	800305c <xTaskIncrementTick+0xd4>
			{
				xSwitchRequired = pdTRUE;
 800305a:	2401      	movs	r4, #1
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <xTaskIncrementTick+0x114>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	b933      	cbnz	r3, 8003070 <xTaskIncrementTick+0xe8>
 8003062:	e006      	b.n	8003072 <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <xTaskIncrementTick+0x118>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800306c:	2400      	movs	r4, #0
 800306e:	e000      	b.n	8003072 <xTaskIncrementTick+0xea>

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
			{
				xSwitchRequired = pdTRUE;
 8003070:	2401      	movs	r4, #1
		}
		#endif
	}

	return xSwitchRequired;
}
 8003072:	4620      	mov	r0, r4
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003076:	bf00      	nop
 8003078:	2000049c 	.word	0x2000049c
 800307c:	200004a8 	.word	0x200004a8
 8003080:	2000002c 	.word	0x2000002c
 8003084:	20000034 	.word	0x20000034
 8003088:	200004a4 	.word	0x200004a4
 800308c:	200004ac 	.word	0x200004ac
 8003090:	200004b0 	.word	0x200004b0
 8003094:	2000003c 	.word	0x2000003c
 8003098:	200004a0 	.word	0x200004a0
 800309c:	200004b4 	.word	0x200004b4
 80030a0:	20000038 	.word	0x20000038

080030a4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <vTaskSwitchContext+0x84>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b11b      	cbz	r3, 80030b2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030aa:	2201      	movs	r2, #1
 80030ac:	4b1f      	ldr	r3, [pc, #124]	; (800312c <vTaskSwitchContext+0x88>)
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
 80030b2:	2200      	movs	r2, #0
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <vTaskSwitchContext+0x88>)
 80030b6:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <vTaskSwitchContext+0x8c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e00a      	b.n	80030d4 <vTaskSwitchContext+0x30>
 80030be:	b943      	cbnz	r3, 80030d2 <vTaskSwitchContext+0x2e>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	e7fe      	b.n	80030d0 <vTaskSwitchContext+0x2c>
 80030d2:	3b01      	subs	r3, #1
 80030d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80030d8:	008a      	lsls	r2, r1, #2
 80030da:	4916      	ldr	r1, [pc, #88]	; (8003134 <vTaskSwitchContext+0x90>)
 80030dc:	588a      	ldr	r2, [r1, r2]
 80030de:	2a00      	cmp	r2, #0
 80030e0:	d0ed      	beq.n	80030be <vTaskSwitchContext+0x1a>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e2:	b430      	push	{r4, r5}
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e4:	460d      	mov	r5, r1
 80030e6:	0099      	lsls	r1, r3, #2
 80030e8:	18ca      	adds	r2, r1, r3
 80030ea:	0090      	lsls	r0, r2, #2
 80030ec:	4428      	add	r0, r5
 80030ee:	6842      	ldr	r2, [r0, #4]
 80030f0:	6854      	ldr	r4, [r2, #4]
 80030f2:	6044      	str	r4, [r0, #4]
 80030f4:	4419      	add	r1, r3
 80030f6:	008a      	lsls	r2, r1, #2
 80030f8:	3208      	adds	r2, #8
 80030fa:	442a      	add	r2, r5
 80030fc:	4294      	cmp	r4, r2
 80030fe:	d105      	bne.n	800310c <vTaskSwitchContext+0x68>
 8003100:	6860      	ldr	r0, [r4, #4]
 8003102:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003106:	008a      	lsls	r2, r1, #2
 8003108:	442a      	add	r2, r5
 800310a:	6050      	str	r0, [r2, #4]
 800310c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003110:	008a      	lsls	r2, r1, #2
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <vTaskSwitchContext+0x90>)
 8003114:	440a      	add	r2, r1
 8003116:	6852      	ldr	r2, [r2, #4]
 8003118:	68d1      	ldr	r1, [r2, #12]
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <vTaskSwitchContext+0x94>)
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <vTaskSwitchContext+0x8c>)
 8003120:	6013      	str	r3, [r2, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003122:	bc30      	pop	{r4, r5}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000049c 	.word	0x2000049c
 800312c:	200004b4 	.word	0x200004b4
 8003130:	200004b0 	.word	0x200004b0
 8003134:	2000003c 	.word	0x2000003c
 8003138:	200004a0 	.word	0x200004a0

0800313c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <xTaskGetSchedulerState+0x18>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b123      	cbz	r3, 800314c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <xTaskGetSchedulerState+0x1c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b91b      	cbnz	r3, 8003150 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003148:	2002      	movs	r0, #2
 800314a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800314c:	2001      	movs	r0, #1
 800314e:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003150:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8003152:	4770      	bx	lr
 8003154:	20000030 	.word	0x20000030
 8003158:	2000049c 	.word	0x2000049c

0800315c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800315c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Handler+0x14>)
 8003160:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003162:	f7ff ffeb 	bl	800313c <xTaskGetSchedulerState>
 8003166:	2801      	cmp	r0, #1
 8003168:	d001      	beq.n	800316e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800316a:	f000 f853 	bl	8003214 <xPortSysTickHandler>
 800316e:	bd08      	pop	{r3, pc}
 8003170:	e000e010 	.word	0xe000e010
	...

08003180 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <pxCurrentTCBConst2>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	6808      	ldr	r0, [r1, #0]
 8003186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	f380 8809 	msr	PSP, r0
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f380 8811 	msr	BASEPRI, r0
 800319a:	4770      	bx	lr
 800319c:	f3af 8000 	nop.w

080031a0 <pxCurrentTCBConst2>:
 80031a0:	200004a0 	.word	0x200004a0
	...

080031b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031b0:	f3ef 8009 	mrs	r0, PSP
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <pxCurrentTCBConst>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f01e 0f10 	tst.w	lr, #16
 80031c0:	bf08      	it	eq
 80031c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ca:	6010      	str	r0, [r2, #0]
 80031cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031d4:	f380 8811 	msr	BASEPRI, r0
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f7ff ff60 	bl	80030a4 <vTaskSwitchContext>
 80031e4:	f04f 0000 	mov.w	r0, #0
 80031e8:	f380 8811 	msr	BASEPRI, r0
 80031ec:	bc09      	pop	{r0, r3}
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f6:	f01e 0f10 	tst.w	lr, #16
 80031fa:	bf08      	it	eq
 80031fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003200:	f380 8809 	msr	PSP, r0
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	f3af 8000 	nop.w

08003210 <pxCurrentTCBConst>:
 8003210:	200004a0 	.word	0x200004a0

08003214 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003214:	b508      	push	{r3, lr}
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003226:	f7ff feaf 	bl	8002f88 <xTaskIncrementTick>
 800322a:	b118      	cbz	r0, 8003234 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <xPortSysTickHandler+0x28>)
 8003232:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003234:	2300      	movs	r3, #0
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	bd08      	pop	{r3, pc}
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003240:	2800      	cmp	r0, #0
 8003242:	d06d      	beq.n	8003320 <HAL_SPI_Init+0xe0>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003248:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800324a:	b933      	cbnz	r3, 800325a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324c:	6843      	ldr	r3, [r0, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003252:	d005      	beq.n	8003260 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003254:	2300      	movs	r3, #0
 8003256:	61c3      	str	r3, [r0, #28]
 8003258:	e002      	b.n	8003260 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800325e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003264:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003268:	f013 0fff 	tst.w	r3, #255	; 0xff
 800326c:	d105      	bne.n	800327a <HAL_SPI_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326e:	2300      	movs	r3, #0
 8003270:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003274:	4620      	mov	r0, r4
 8003276:	f7fd fbff 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003288:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800328a:	68e3      	ldr	r3, [r4, #12]
 800328c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003290:	d901      	bls.n	8003296 <HAL_SPI_Init+0x56>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003292:	2600      	movs	r6, #0
 8003294:	e001      	b.n	800329a <HAL_SPI_Init+0x5a>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003296:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800329a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800329e:	d004      	beq.n	80032aa <HAL_SPI_Init+0x6a>
 80032a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032a4:	d001      	beq.n	80032aa <HAL_SPI_Init+0x6a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	6863      	ldr	r3, [r4, #4]
 80032ae:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80032b2:	68a2      	ldr	r2, [r4, #8]
 80032b4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80032b8:	4313      	orrs	r3, r2
 80032ba:	6920      	ldr	r0, [r4, #16]
 80032bc:	f000 0002 	and.w	r0, r0, #2
 80032c0:	4303      	orrs	r3, r0
 80032c2:	6967      	ldr	r7, [r4, #20]
 80032c4:	f007 0701 	and.w	r7, r7, #1
 80032c8:	433b      	orrs	r3, r7
 80032ca:	69a5      	ldr	r5, [r4, #24]
 80032cc:	f405 7500 	and.w	r5, r5, #512	; 0x200
 80032d0:	432b      	orrs	r3, r5
 80032d2:	69e0      	ldr	r0, [r4, #28]
 80032d4:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80032d8:	ea43 0200 	orr.w	r2, r3, r0
 80032dc:	6a23      	ldr	r3, [r4, #32]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	4313      	orrs	r3, r2
 80032e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032ea:	431a      	orrs	r2, r3
 80032ec:	600a      	str	r2, [r1, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	8b61      	ldrh	r1, [r4, #26]
 80032f2:	f001 0104 	and.w	r1, r1, #4
 80032f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032f8:	f005 0510 	and.w	r5, r5, #16
 80032fc:	4329      	orrs	r1, r5
 80032fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003300:	f002 0208 	and.w	r2, r2, #8
 8003304:	4311      	orrs	r1, r2
 8003306:	68e3      	ldr	r3, [r4, #12]
 8003308:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800330c:	ea41 0302 	orr.w	r3, r1, r2
 8003310:	4333      	orrs	r3, r6
 8003312:	6043      	str	r3, [r0, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003314:	2000      	movs	r0, #0
 8003316:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003318:	2301      	movs	r3, #1
 800331a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8003320:	2001      	movs	r0, #1
 8003322:	4770      	bx	lr

08003324 <DTW_counter_init>:
void DTW_counter_init(void)
{
/* Use DTW_CYCCNT counter for timing */
/* CYCCNT counter is in the Cortex-M-series core.  See the following for details 
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337g/BABJFFGJ.html */
	*(volatile unsigned int*)0xE000EDFC |= 0x01000000; // SCB_DEMCR = 0x01000000;
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <DTW_counter_init+0x18>)
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]
	*(volatile unsigned int*)0xE0001000 |= 0x1;	// Enable DTW_CYCCNT (Data Watch cycle counter)
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <DTW_counter_init+0x1c>)
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000edfc 	.word	0xe000edfc
 8003340:	e0001000 	.word	0xe0001000

08003344 <delay>:
 * @param	: ticks = DTW count to delay
 * @param	: pin = pin number, e.g. GPIO_PIN_0
 * @param	: on = GPIO_PIN_RESET or GPIO_PIN_SET
 * *************************************************************************/
static void delay(uint32_t ticks, uint32_t pin, uint8_t on)
{
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	460e      	mov	r6, r1
 8003348:	4615      	mov	r5, r2
	uint32_t tx = DTWTIME + ticks;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <delay+0x24>)
 800334c:	681c      	ldr	r4, [r3, #0]
 800334e:	4404      	add	r4, r0
	while ((int32_t)(tx - DTWTIME) > 0)
 8003350:	e004      	b.n	800335c <delay+0x18>
	{
			HAL_GPIO_WritePin(GPIOB, pin, on); 
 8003352:	462a      	mov	r2, r5
 8003354:	b2b1      	uxth	r1, r6
 8003356:	4805      	ldr	r0, [pc, #20]	; (800336c <delay+0x28>)
 8003358:	f7ff f848 	bl	80023ec <HAL_GPIO_WritePin>
 * @param	: on = GPIO_PIN_RESET or GPIO_PIN_SET
 * *************************************************************************/
static void delay(uint32_t ticks, uint32_t pin, uint8_t on)
{
	uint32_t tx = DTWTIME + ticks;
	while ((int32_t)(tx - DTWTIME) > 0)
 800335c:	4b02      	ldr	r3, [pc, #8]	; (8003368 <delay+0x24>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1ae3      	subs	r3, r4, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	dcf5      	bgt.n	8003352 <delay+0xe>
	{
			HAL_GPIO_WritePin(GPIOB, pin, on); 
	}
	return;
}
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	e0001004 	.word	0xe0001004
 800336c:	48000400 	.word	0x48000400

08003370 <morse_generate>:
 * static void morse_generate(char c, uint32_t pin);
 *	@brief	: c = character to send as Morse cdoe
 * @param	: pin = pin number, e.g. GPIO_PIN_0
 * *************************************************************************/
static void morse_generate(char c, uint32_t pin)
{
 8003370:	b570      	push	{r4, r5, r6, lr}
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 8003372:	2200      	movs	r2, #0
 *	@brief	: c = character to send as Morse cdoe
 * @param	: pin = pin number, e.g. GPIO_PIN_0
 * *************************************************************************/
static void morse_generate(char c, uint32_t pin)
{
	const struct MORSE_ELEMENT* ptbl = mrse;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <morse_generate+0x60>)
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 8003376:	e027      	b.n	80033c8 <morse_generate+0x58>
	{
		if (ptbl->c == c)
 8003378:	781c      	ldrb	r4, [r3, #0]
 800337a:	4284      	cmp	r4, r0
 800337c:	d122      	bne.n	80033c4 <morse_generate+0x54>
 800337e:	460e      	mov	r6, r1
		{
				ct = ptbl->ct;
 8003380:	789c      	ldrb	r4, [r3, #2]
				dd = ptbl->dd;	
 8003382:	785d      	ldrb	r5, [r3, #1]
				while (ct > 0)
 8003384:	e016      	b.n	80033b4 <morse_generate+0x44>
				{
					if ((dd & 0x80) == 0)
 8003386:	f015 0f80 	tst.w	r5, #128	; 0x80
 800338a:	d105      	bne.n	8003398 <morse_generate+0x28>
					{ // Here, dot
						delay(TIC_DIT, pin, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	4631      	mov	r1, r6
 8003390:	4810      	ldr	r0, [pc, #64]	; (80033d4 <morse_generate+0x64>)
 8003392:	f7ff ffd7 	bl	8003344 <delay>
 8003396:	e004      	b.n	80033a2 <morse_generate+0x32>
					}
					else
					{ // Here, dash
						delay(TIC_DAH, pin, GPIO_PIN_RESET);						
 8003398:	2200      	movs	r2, #0
 800339a:	4631      	mov	r1, r6
 800339c:	480e      	ldr	r0, [pc, #56]	; (80033d8 <morse_generate+0x68>)
 800339e:	f7ff ffd1 	bl	8003344 <delay>
					}
					delay(TIC_IDIT, pin, GPIO_PIN_SET);
 80033a2:	2201      	movs	r2, #1
 80033a4:	4631      	mov	r1, r6
 80033a6:	480d      	ldr	r0, [pc, #52]	; (80033dc <morse_generate+0x6c>)
 80033a8:	f7ff ffcc 	bl	8003344 <delay>
					dd = dd << 1;
 80033ac:	006d      	lsls	r5, r5, #1
 80033ae:	b2ed      	uxtb	r5, r5
					ct -= 1;
 80033b0:	3c01      	subs	r4, #1
 80033b2:	b2e4      	uxtb	r4, r4
	{
		if (ptbl->c == c)
		{
				ct = ptbl->ct;
				dd = ptbl->dd;	
				while (ct > 0)
 80033b4:	2c00      	cmp	r4, #0
 80033b6:	d1e6      	bne.n	8003386 <morse_generate+0x16>
					}
					delay(TIC_IDIT, pin, GPIO_PIN_SET);
					dd = dd << 1;
					ct -= 1;
				}
				delay(TIC_ICHAR, pin, GPIO_PIN_SET);
 80033b8:	2201      	movs	r2, #1
 80033ba:	4631      	mov	r1, r6
 80033bc:	4808      	ldr	r0, [pc, #32]	; (80033e0 <morse_generate+0x70>)
 80033be:	f7ff ffc1 	bl	8003344 <delay>
				return;
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
		}
		ptbl++;
 80033c4:	3303      	adds	r3, #3
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 80033c6:	3201      	adds	r2, #1
 80033c8:	2a39      	cmp	r2, #57	; 0x39
 80033ca:	ddd5      	ble.n	8003378 <morse_generate+0x8>
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	bf00      	nop
 80033d0:	08003598 	.word	0x08003598
 80033d4:	00cb7355 	.word	0x00cb7355
 80033d8:	032dcd54 	.word	0x032dcd54
 80033dc:	01087c54 	.word	0x01087c54
 80033e0:	0421f153 	.word	0x0421f153

080033e4 <morse_number>:
 *	@brief	: Send a character string as Morse code
 * @param	: nx = number to send
 * @param	: pin = pin number, e.g. GPIO_PIN_0
 * *************************************************************************/
void morse_number(uint32_t nx, uint32_t pin)
{
 80033e4:	b530      	push	{r4, r5, lr}
 80033e6:	b085      	sub	sp, #20
 80033e8:	460d      	mov	r5, r1
	char c[16];
	int i = 0;
 80033ea:	2400      	movs	r4, #0
	do
	{
		c[i] = (nx % 10) + '0';
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <morse_number+0x50>)
 80033ee:	fba3 2300 	umull	r2, r3, r3, r0
 80033f2:	08db      	lsrs	r3, r3, #3
 80033f4:	461a      	mov	r2, r3
 80033f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033fa:	0059      	lsls	r1, r3, #1
 80033fc:	1a43      	subs	r3, r0, r1
 80033fe:	a904      	add	r1, sp, #16
 8003400:	4421      	add	r1, r4
 8003402:	3330      	adds	r3, #48	; 0x30
 8003404:	f801 3c10 	strb.w	r3, [r1, #-16]
		nx = nx/10;
 8003408:	4610      	mov	r0, r2
		i += 1;
 800340a:	3401      	adds	r4, #1
	} while (nx != 0);
 800340c:	2a00      	cmp	r2, #0
 800340e:	d1ed      	bne.n	80033ec <morse_number+0x8>
 8003410:	e006      	b.n	8003420 <morse_number+0x3c>

	while (--i >= 0)
	{
		morse_generate(c[i], pin);
 8003412:	4629      	mov	r1, r5
 8003414:	ab04      	add	r3, sp, #16
 8003416:	4423      	add	r3, r4
 8003418:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 800341c:	f7ff ffa8 	bl	8003370 <morse_generate>
		c[i] = (nx % 10) + '0';
		nx = nx/10;
		i += 1;
	} while (nx != 0);

	while (--i >= 0)
 8003420:	3c01      	subs	r4, #1
 8003422:	d5f6      	bpl.n	8003412 <morse_number+0x2e>
	{
		morse_generate(c[i], pin);

	}
	delay(TIC_IWORD, pin, GPIO_PIN_SET);
 8003424:	2201      	movs	r2, #1
 8003426:	4629      	mov	r1, r5
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <morse_number+0x54>)
 800342a:	f7ff ff8b 	bl	8003344 <delay>
	return;
}
 800342e:	b005      	add	sp, #20
 8003430:	bd30      	pop	{r4, r5, pc}
 8003432:	bf00      	nop
 8003434:	cccccccd 	.word	0xcccccccd
 8003438:	0c65d3fa 	.word	0x0c65d3fa

0800343c <morse_trap>:
 * void morse_trap(uint32_t x);
 *	@brief	: Disable interrupts, Send 'x' and endless loop
 * @param	: x = trap number to flash
 * *************************************************************************/
void morse_trap(uint32_t x)
{
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4605      	mov	r5, r0
	/* Disable global interrupts */
__asm__ volatile ("CPSID I");
 8003440:	b672      	cpsid	i
	/* Save trap code for storage in RTC registers. */
//	morse_err = x;
//	rtcregs_update(); // Refresh the back RTC sram registers

	/* Flash a few times then do a reset. */
	for (int i=0; i <2; i++)
 8003442:	2400      	movs	r4, #0
 8003444:	e009      	b.n	800345a <morse_trap+0x1e>
	{
		morse_number(x, (GPIO_PIN_0|GPIO_PIN_1));
 8003446:	2103      	movs	r1, #3
 8003448:	4628      	mov	r0, r5
 800344a:	f7ff ffcb 	bl	80033e4 <morse_number>
		delay(TIC_PAUSE, (GPIO_PIN_0|GPIO_PIN_1), GPIO_PIN_SET);	
 800344e:	2201      	movs	r2, #1
 8003450:	2103      	movs	r1, #3
 8003452:	4808      	ldr	r0, [pc, #32]	; (8003474 <morse_trap+0x38>)
 8003454:	f7ff ff76 	bl	8003344 <delay>
	/* Save trap code for storage in RTC registers. */
//	morse_err = x;
//	rtcregs_update(); // Refresh the back RTC sram registers

	/* Flash a few times then do a reset. */
	for (int i=0; i <2; i++)
 8003458:	3401      	adds	r4, #1
 800345a:	2c01      	cmp	r4, #1
 800345c:	ddf3      	ble.n	8003446 <morse_trap+0xa>
		morse_number(x, (GPIO_PIN_0|GPIO_PIN_1));
		delay(TIC_PAUSE, (GPIO_PIN_0|GPIO_PIN_1), GPIO_PIN_SET);	
	}

	// Turn off Cell #3 power (JIC)
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <morse_trap+0x3c>)
 8003466:	f7fe ffc1 	bl	80023ec <HAL_GPIO_WritePin>

	// Execute a RESET
	#define SCB_AIRCR 0xE000ED0C
	*(volatile unsigned int*)SCB_AIRCR = (0x5FA << 16) | 0x4;	// Cause a RESET
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <morse_trap+0x40>)
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <morse_trap+0x44>)
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e7fe      	b.n	8003470 <morse_trap+0x34>
 8003472:	bf00      	nop
 8003474:	04c4b400 	.word	0x04c4b400
 8003478:	48000800 	.word	0x48000800
 800347c:	05fa0004 	.word	0x05fa0004
 8003480:	e000ed0c 	.word	0xe000ed0c

08003484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003488:	f7ff fd3e 	bl	8002f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800348e:	490d      	ldr	r1, [pc, #52]	; (80034c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <LoopForever+0xe>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003494:	e002      	b.n	800349c <LoopCopyDataInit>

08003496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349a:	3304      	adds	r3, #4

0800349c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800349c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a0:	d3f9      	bcc.n	8003496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80034a4:	4c0a      	ldr	r4, [pc, #40]	; (80034d0 <LoopForever+0x16>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a8:	e001      	b.n	80034ae <LoopFillZerobss>

080034aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ac:	3204      	adds	r2, #4

080034ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b0:	d3fb      	bcc.n	80034aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b2:	f000 f811 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034b6:	f7fd f9ed 	bl	8000894 <main>

080034ba <LoopForever>:

LoopForever:
    b LoopForever
 80034ba:	e7fe      	b.n	80034ba <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034bc:	2000c000 	.word	0x2000c000

/* Call the clock system initialization function.*/
    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80034c8:	08003640 	.word	0x08003640
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80034d0:	20000844 	.word	0x20000844

080034d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC1_IRQHandler>
	...

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <__libc_init_array+0x3c>)
 80034dc:	4c0e      	ldr	r4, [pc, #56]	; (8003518 <__libc_init_array+0x40>)
 80034de:	1ae4      	subs	r4, r4, r3
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	2500      	movs	r5, #0
 80034e4:	461e      	mov	r6, r3
 80034e6:	42a5      	cmp	r5, r4
 80034e8:	d004      	beq.n	80034f4 <__libc_init_array+0x1c>
 80034ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ee:	4798      	blx	r3
 80034f0:	3501      	adds	r5, #1
 80034f2:	e7f8      	b.n	80034e6 <__libc_init_array+0xe>
 80034f4:	f000 f81e 	bl	8003534 <_init>
 80034f8:	4c08      	ldr	r4, [pc, #32]	; (800351c <__libc_init_array+0x44>)
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <__libc_init_array+0x48>)
 80034fc:	1ae4      	subs	r4, r4, r3
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	2500      	movs	r5, #0
 8003502:	461e      	mov	r6, r3
 8003504:	42a5      	cmp	r5, r4
 8003506:	d004      	beq.n	8003512 <__libc_init_array+0x3a>
 8003508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800350c:	4798      	blx	r3
 800350e:	3501      	adds	r5, #1
 8003510:	e7f8      	b.n	8003504 <__libc_init_array+0x2c>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	08003630 	.word	0x08003630
 8003518:	08003630 	.word	0x08003630
 800351c:	08003634 	.word	0x08003634
 8003520:	08003630 	.word	0x08003630

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d002      	beq.n	8003532 <memset+0xe>
 800352c:	f803 1b01 	strb.w	r1, [r3], #1
 8003530:	e7fa      	b.n	8003528 <memset+0x4>
 8003532:	4770      	bx	lr

08003534 <_init>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr

08003540 <_fini>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr
 800354c:	0000      	movs	r0, r0
	...
