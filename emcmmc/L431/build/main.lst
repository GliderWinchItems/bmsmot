ARM GAS  /tmp/ccsjc6Ci.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB299:
  28              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include "morse.h"
  28:Core/Src/main.c **** #include "DTW_counter.h"
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** #include "adcparams.h"
ARM GAS  /tmp/ccsjc6Ci.s 			page 2


  31:Core/Src/main.c **** #include "SerialTaskSend.h"
  32:Core/Src/main.c **** #include "SerialTaskReceive.h"
  33:Core/Src/main.c **** #include "CanTask.h"
  34:Core/Src/main.c **** #include "can_iface.h"
  35:Core/Src/main.c **** #include "canfilter_setup.h"
  36:Core/Src/main.c **** #include "getserialbuf.h"
  37:Core/Src/main.c **** #include "yprintf.h"
  38:Core/Src/main.c **** #include "DTW_counter.h"
  39:Core/Src/main.c **** #include "ADCTask.h"
  40:Core/Src/main.c **** #include "MailboxTask.h"
  41:Core/Src/main.c **** #include "CanCommTask.h"
  42:Core/Src/main.c **** //#include "BMSTask.h"
  43:Core/Src/main.c **** #include "rtcregs.h"
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** #include "FreeRTOS.h"
  46:Core/Src/main.c **** #include "semphr.h"
  47:Core/Src/main.c **** /* USER CODE END Includes */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PTD */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  55:Core/Src/main.c **** /* USER CODE BEGIN PD */
  56:Core/Src/main.c **** /* USER CODE END PD */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  59:Core/Src/main.c **** /* USER CODE BEGIN PM */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PM */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  64:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  65:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** UART_HandleTypeDef huart1;
  70:Core/Src/main.c **** UART_HandleTypeDef huart3;
  71:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  72:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  73:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart3_rx;
  74:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart3_tx;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Definitions for defaultTask */
  77:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
  78:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
  79:Core/Src/main.c ****   .name = "defaultTask",
  80:Core/Src/main.c ****   .stack_size = 128 * 4,
  81:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  82:Core/Src/main.c **** };
  83:Core/Src/main.c **** /* USER CODE BEGIN PV */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* USER CODE END PV */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccsjc6Ci.s 			page 3


  88:Core/Src/main.c **** void SystemClock_Config(void);
  89:Core/Src/main.c **** static void MX_GPIO_Init(void);
  90:Core/Src/main.c **** static void MX_DMA_Init(void);
  91:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  92:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  93:Core/Src/main.c **** static void MX_ADC1_Init(void);
  94:Core/Src/main.c **** static void MX_SPI1_Init(void);
  95:Core/Src/main.c **** void StartDefaultTask(void *argument);
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END PFP */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 102:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /* USER CODE END 0 */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /**
 107:Core/Src/main.c ****   * @brief  The application entry point.
 108:Core/Src/main.c ****   * @retval int
 109:Core/Src/main.c ****   */
 110:Core/Src/main.c **** int main(void)
 111:Core/Src/main.c **** {
 112:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE END 1 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 119:Core/Src/main.c ****   HAL_Init();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 122:Core/Src/main.c ****   DTW_counter_init();
 123:Core/Src/main.c ****   /* USER CODE END Init */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Configure the system clock */
 126:Core/Src/main.c ****   SystemClock_Config();
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* USER CODE END SysInit */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* Initialize all configured peripherals */
 133:Core/Src/main.c ****   MX_GPIO_Init();
 134:Core/Src/main.c ****   MX_DMA_Init();
 135:Core/Src/main.c ****   MX_USART1_UART_Init();
 136:Core/Src/main.c ****   MX_USART3_UART_Init();
 137:Core/Src/main.c ****   MX_ADC1_Init();
 138:Core/Src/main.c ****   MX_SPI1_Init();
 139:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 140:Core/Src/main.c **** morse_trap(1234);
 141:Core/Src/main.c **** //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 142:Core/Src/main.c **** while(1==1);
 143:Core/Src/main.c ****   /* USER CODE END 2 */
 144:Core/Src/main.c **** 
ARM GAS  /tmp/ccsjc6Ci.s 			page 4


 145:Core/Src/main.c ****   /* Init scheduler */
 146:Core/Src/main.c ****   osKernelInitialize();
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 149:Core/Src/main.c ****   /* add mutexes, ... */
 150:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 153:Core/Src/main.c ****   /* add semaphores, ... */
 154:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 157:Core/Src/main.c ****   /* start timers, add new ones, ... */
 158:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 161:Core/Src/main.c ****   /* add queues, ... */
 162:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* Create the thread(s) */
 165:Core/Src/main.c ****   /* creation of defaultTask */
 166:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 169:Core/Src/main.c ****   /* add threads, ... */
 170:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 173:Core/Src/main.c ****   /* add events, ... */
 174:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /* Start scheduler */
 177:Core/Src/main.c ****   osKernelStart();
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 180:Core/Src/main.c ****   /* Infinite loop */
 181:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 182:Core/Src/main.c ****   while (1)
 183:Core/Src/main.c ****   {
 184:Core/Src/main.c ****     /* USER CODE END WHILE */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c ****   /* USER CODE END 3 */
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** /**
 192:Core/Src/main.c ****   * @brief System Clock Configuration
 193:Core/Src/main.c ****   * @retval None
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c **** void SystemClock_Config(void)
 196:Core/Src/main.c **** {
 197:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 198:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 201:Core/Src/main.c ****   */
ARM GAS  /tmp/ccsjc6Ci.s 			page 5


 202:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 203:Core/Src/main.c ****   {
 204:Core/Src/main.c ****     Error_Handler();
 205:Core/Src/main.c ****   }
 206:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 207:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 211:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 10;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 219:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 226:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 230:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c ****     Error_Handler();
 235:Core/Src/main.c ****   }
 236:Core/Src/main.c **** }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** /**
 239:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 240:Core/Src/main.c ****   * @param None
 241:Core/Src/main.c ****   * @retval None
 242:Core/Src/main.c ****   */
 243:Core/Src/main.c **** static void MX_ADC1_Init(void)
 244:Core/Src/main.c **** {
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 255:Core/Src/main.c ****   /** Common config
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c ****   hadc1.Instance = ADC1;
 258:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
ARM GAS  /tmp/ccsjc6Ci.s 			page 6


 259:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 260:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 261:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 262:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 263:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 264:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 265:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 266:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 267:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 268:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 269:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 270:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 271:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 272:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /** Configure Regular Channel
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 279:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 280:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 281:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 282:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 283:Core/Src/main.c ****   sConfig.Offset = 0;
 284:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c **** }
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** /**
 295:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 296:Core/Src/main.c ****   * @param None
 297:Core/Src/main.c ****   * @retval None
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c **** static void MX_SPI1_Init(void)
 300:Core/Src/main.c **** {
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 309:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 310:Core/Src/main.c ****   hspi1.Instance = SPI1;
 311:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 312:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 313:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 314:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 315:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
ARM GAS  /tmp/ccsjc6Ci.s 			page 7


 316:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 317:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 318:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 319:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 320:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 321:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 322:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 323:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 324:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c **** }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** /**
 335:Core/Src/main.c ****   * @brief USART1 Initialization Function
 336:Core/Src/main.c ****   * @param None
 337:Core/Src/main.c ****   * @retval None
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 340:Core/Src/main.c **** {
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 349:Core/Src/main.c ****   huart1.Instance = USART1;
 350:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 351:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 352:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 353:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 354:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 355:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 356:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 357:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 358:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 359:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 360:Core/Src/main.c ****   {
 361:Core/Src/main.c ****     Error_Handler();
 362:Core/Src/main.c ****   }
 363:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /**
 370:Core/Src/main.c ****   * @brief USART3 Initialization Function
 371:Core/Src/main.c ****   * @param None
 372:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccsjc6Ci.s 			page 8


 373:Core/Src/main.c ****   */
 374:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 375:Core/Src/main.c **** {
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 384:Core/Src/main.c ****   huart3.Instance = USART3;
 385:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 386:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 387:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 388:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 389:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 390:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 391:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 392:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 393:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 394:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 395:Core/Src/main.c ****   {
 396:Core/Src/main.c ****     Error_Handler();
 397:Core/Src/main.c ****   }
 398:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** }
 403:Core/Src/main.c **** 
 404:Core/Src/main.c **** /**
 405:Core/Src/main.c ****   * Enable DMA controller clock
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c **** static void MX_DMA_Init(void)
 408:Core/Src/main.c **** {
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* DMA controller clock enable */
 411:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* DMA interrupt init */
 414:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 415:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 416:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 417:Core/Src/main.c ****   /* DMA1_Channel2_IRQn interrupt configuration */
 418:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 419:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 420:Core/Src/main.c ****   /* DMA1_Channel3_IRQn interrupt configuration */
 421:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 422:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 423:Core/Src/main.c ****   /* DMA1_Channel4_IRQn interrupt configuration */
 424:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 425:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 426:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 427:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 428:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 429:Core/Src/main.c **** 
ARM GAS  /tmp/ccsjc6Ci.s 			page 9


 430:Core/Src/main.c **** }
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** /**
 433:Core/Src/main.c ****   * @brief GPIO Initialization Function
 434:Core/Src/main.c ****   * @param None
 435:Core/Src/main.c ****   * @retval None
 436:Core/Src/main.c ****   */
 437:Core/Src/main.c **** static void MX_GPIO_Init(void)
 438:Core/Src/main.c **** {
  29              		.loc 1 438 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 28
  36              		.cfi_offset 4, -28
  37              		.cfi_offset 5, -24
  38              		.cfi_offset 6, -20
  39              		.cfi_offset 7, -16
  40              		.cfi_offset 8, -12
  41              		.cfi_offset 9, -8
  42              		.cfi_offset 14, -4
  43 0004 8BB0     		sub	sp, sp, #44
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 72
 439:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  46              		.loc 1 439 0
  47 0006 0024     		movs	r4, #0
  48 0008 0594     		str	r4, [sp, #20]
  49 000a 0694     		str	r4, [sp, #24]
  50 000c 0794     		str	r4, [sp, #28]
  51 000e 0894     		str	r4, [sp, #32]
  52 0010 0994     		str	r4, [sp, #36]
  53              	.LBB4:
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 442:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  54              		.loc 1 442 0
  55 0012 4A4B     		ldr	r3, .L3
  56 0014 DA6C     		ldr	r2, [r3, #76]
  57 0016 42F00402 		orr	r2, r2, #4
  58 001a DA64     		str	r2, [r3, #76]
  59 001c DA6C     		ldr	r2, [r3, #76]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0092     		str	r2, [sp]
  62 0024 009A     		ldr	r2, [sp]
  63              	.LBE4:
  64              	.LBB5:
 443:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 443 0
  66 0026 DA6C     		ldr	r2, [r3, #76]
  67 0028 42F08002 		orr	r2, r2, #128
  68 002c DA64     		str	r2, [r3, #76]
  69 002e DA6C     		ldr	r2, [r3, #76]
  70 0030 02F08002 		and	r2, r2, #128
  71 0034 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccsjc6Ci.s 			page 10


  72 0036 019A     		ldr	r2, [sp, #4]
  73              	.LBE5:
  74              	.LBB6:
 444:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  75              		.loc 1 444 0
  76 0038 DA6C     		ldr	r2, [r3, #76]
  77 003a 42F00102 		orr	r2, r2, #1
  78 003e DA64     		str	r2, [r3, #76]
  79 0040 DA6C     		ldr	r2, [r3, #76]
  80 0042 02F00102 		and	r2, r2, #1
  81 0046 0292     		str	r2, [sp, #8]
  82 0048 029A     		ldr	r2, [sp, #8]
  83              	.LBE6:
  84              	.LBB7:
 445:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  85              		.loc 1 445 0
  86 004a DA6C     		ldr	r2, [r3, #76]
  87 004c 42F00202 		orr	r2, r2, #2
  88 0050 DA64     		str	r2, [r3, #76]
  89 0052 DA6C     		ldr	r2, [r3, #76]
  90 0054 02F00202 		and	r2, r2, #2
  91 0058 0392     		str	r2, [sp, #12]
  92 005a 039A     		ldr	r2, [sp, #12]
  93              	.LBE7:
  94              	.LBB8:
 446:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  95              		.loc 1 446 0
  96 005c DA6C     		ldr	r2, [r3, #76]
  97 005e 42F00802 		orr	r2, r2, #8
  98 0062 DA64     		str	r2, [r3, #76]
  99 0064 DB6C     		ldr	r3, [r3, #76]
 100 0066 03F00803 		and	r3, r3, #8
 101 006a 0493     		str	r3, [sp, #16]
 102 006c 049B     		ldr	r3, [sp, #16]
 103              	.LBE8:
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 449:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 104              		.loc 1 449 0
 105 006e DFF8D890 		ldr	r9, .L3+12
 106 0072 2246     		mov	r2, r4
 107 0074 4FF2F031 		movw	r1, #62448
 108 0078 4846     		mov	r0, r9
 109 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 110              	.LVL0:
 450:Core/Src/main.c ****                           |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 451:Core/Src/main.c ****                           |GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 454:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 111              		.loc 1 454 0
 112 007e DFF8CC80 		ldr	r8, .L3+16
 113 0082 2246     		mov	r2, r4
 114 0084 0B21     		movs	r1, #11
 115 0086 4046     		mov	r0, r8
 116 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 117              	.LVL1:
ARM GAS  /tmp/ccsjc6Ci.s 			page 11


 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 457:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 118              		.loc 1 457 0
 119 008c 2246     		mov	r2, r4
 120 008e 41F60F11 		movw	r1, #6415
 121 0092 4FF09040 		mov	r0, #1207959552
 122 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 123              	.LVL2:
 458:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 461:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 124              		.loc 1 461 0
 125 009a 294E     		ldr	r6, .L3+4
 126 009c 0122     		movs	r2, #1
 127 009e 0321     		movs	r1, #3
 128 00a0 3046     		mov	r0, r6
 129 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 130              	.LVL3:
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 464:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 131              		.loc 1 464 0
 132 00a6 2246     		mov	r2, r4
 133 00a8 4FF6FC71 		movw	r1, #65532
 134 00ac 3046     		mov	r0, r6
 135 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 136              	.LVL4:
 465:Core/Src/main.c ****                           |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 466:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 467:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 470:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 137              		.loc 1 470 0
 138 00b2 244F     		ldr	r7, .L3+8
 139 00b4 2246     		mov	r2, r4
 140 00b6 0421     		movs	r1, #4
 141 00b8 3846     		mov	r0, r7
 142 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL5:
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /*Configure GPIO pins : PC13 PC14 PC15 PC4
 473:Core/Src/main.c ****                            PC5 PC6 PC7 PC8
 474:Core/Src/main.c ****                            PC9 PC12 */
 475:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 144              		.loc 1 475 0
 145 00be 4FF2F033 		movw	r3, #62448
 146 00c2 0593     		str	r3, [sp, #20]
 476:Core/Src/main.c ****                           |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 477:Core/Src/main.c ****                           |GPIO_PIN_9|GPIO_PIN_12;
 478:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 147              		.loc 1 478 0
 148 00c4 0125     		movs	r5, #1
 149 00c6 0695     		str	r5, [sp, #24]
 479:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccsjc6Ci.s 			page 12


 150              		.loc 1 479 0
 151 00c8 0794     		str	r4, [sp, #28]
 480:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 152              		.loc 1 480 0
 153 00ca 0894     		str	r4, [sp, #32]
 481:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 154              		.loc 1 481 0
 155 00cc 05A9     		add	r1, sp, #20
 156 00ce 4846     		mov	r0, r9
 157 00d0 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL6:
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /*Configure GPIO pins : PH0 PH1 PH3 */
 484:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 159              		.loc 1 484 0
 160 00d4 0B23     		movs	r3, #11
 161 00d6 0593     		str	r3, [sp, #20]
 485:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 162              		.loc 1 485 0
 163 00d8 0695     		str	r5, [sp, #24]
 486:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 486 0
 165 00da 0794     		str	r4, [sp, #28]
 487:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 166              		.loc 1 487 0
 167 00dc 0894     		str	r4, [sp, #32]
 488:Core/Src/main.c ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 168              		.loc 1 488 0
 169 00de 05A9     		add	r1, sp, #20
 170 00e0 4046     		mov	r0, r8
 171 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 172              	.LVL7:
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 PA2 PA3
 491:Core/Src/main.c ****                            PA8 PA11 PA12 */
 492:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 173              		.loc 1 492 0
 174 00e6 41F60F13 		movw	r3, #6415
 175 00ea 0593     		str	r3, [sp, #20]
 493:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 494:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 176              		.loc 1 494 0
 177 00ec 0695     		str	r5, [sp, #24]
 495:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 178              		.loc 1 495 0
 179 00ee 0794     		str	r4, [sp, #28]
 496:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 180              		.loc 1 496 0
 181 00f0 0894     		str	r4, [sp, #32]
 497:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 182              		.loc 1 497 0
 183 00f2 05A9     		add	r1, sp, #20
 184 00f4 4FF09040 		mov	r0, #1207959552
 185 00f8 FFF7FEFF 		bl	HAL_GPIO_Init
 186              	.LVL8:
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /*Configure GPIO pins : LED_GRN_Pin LED_RED_Pin */
ARM GAS  /tmp/ccsjc6Ci.s 			page 13


 500:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_GRN_Pin|LED_RED_Pin;
 187              		.loc 1 500 0
 188 00fc 0323     		movs	r3, #3
 189 00fe 0593     		str	r3, [sp, #20]
 501:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 190              		.loc 1 501 0
 191 0100 1123     		movs	r3, #17
 192 0102 0693     		str	r3, [sp, #24]
 502:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 193              		.loc 1 502 0
 194 0104 0794     		str	r4, [sp, #28]
 503:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 195              		.loc 1 503 0
 196 0106 0894     		str	r4, [sp, #32]
 504:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 197              		.loc 1 504 0
 198 0108 05A9     		add	r1, sp, #20
 199 010a 3046     		mov	r0, r6
 200 010c FFF7FEFF 		bl	HAL_GPIO_Init
 201              	.LVL9:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB10 PB11 PB12
 507:Core/Src/main.c ****                            PB13 PB14 PB15 PB3
 508:Core/Src/main.c ****                            PB4 PB5 PB6 PB7
 509:Core/Src/main.c ****                            PB8 PB9 */
 510:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 202              		.loc 1 510 0
 203 0110 4FF6FC73 		movw	r3, #65532
 204 0114 0593     		str	r3, [sp, #20]
 511:Core/Src/main.c ****                           |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 512:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 513:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9;
 514:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 205              		.loc 1 514 0
 206 0116 0695     		str	r5, [sp, #24]
 515:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 207              		.loc 1 515 0
 208 0118 0794     		str	r4, [sp, #28]
 516:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 209              		.loc 1 516 0
 210 011a 0894     		str	r4, [sp, #32]
 517:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 211              		.loc 1 517 0
 212 011c 05A9     		add	r1, sp, #20
 213 011e 3046     		mov	r0, r6
 214 0120 FFF7FEFF 		bl	HAL_GPIO_Init
 215              	.LVL10:
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 520:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 216              		.loc 1 520 0
 217 0124 0423     		movs	r3, #4
 218 0126 0593     		str	r3, [sp, #20]
 521:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 219              		.loc 1 521 0
 220 0128 0695     		str	r5, [sp, #24]
 522:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccsjc6Ci.s 			page 14


 221              		.loc 1 522 0
 222 012a 0794     		str	r4, [sp, #28]
 523:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 223              		.loc 1 523 0
 224 012c 0894     		str	r4, [sp, #32]
 524:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 225              		.loc 1 524 0
 226 012e 05A9     		add	r1, sp, #20
 227 0130 3846     		mov	r0, r7
 228 0132 FFF7FEFF 		bl	HAL_GPIO_Init
 229              	.LVL11:
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** }
 230              		.loc 1 526 0
 231 0136 0BB0     		add	sp, sp, #44
 232              	.LCFI2:
 233              		.cfi_def_cfa_offset 28
 234              		@ sp needed
 235 0138 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 236              	.L4:
 237              		.align	2
 238              	.L3:
 239 013c 00100240 		.word	1073876992
 240 0140 00040048 		.word	1207960576
 241 0144 000C0048 		.word	1207962624
 242 0148 00080048 		.word	1207961600
 243 014c 001C0048 		.word	1207966720
 244              		.cfi_endproc
 245              	.LFE299:
 247              		.section	.text.MX_DMA_Init,"ax",%progbits
 248              		.align	2
 249              		.thumb
 250              		.thumb_func
 252              	MX_DMA_Init:
 253              	.LFB298:
 408:Core/Src/main.c **** 
 254              		.loc 1 408 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 8
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258 0000 00B5     		push	{lr}
 259              	.LCFI3:
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 14, -4
 262 0002 83B0     		sub	sp, sp, #12
 263              	.LCFI4:
 264              		.cfi_def_cfa_offset 16
 265              	.LBB9:
 411:Core/Src/main.c **** 
 266              		.loc 1 411 0
 267 0004 1A4B     		ldr	r3, .L7
 268 0006 9A6C     		ldr	r2, [r3, #72]
 269 0008 42F00102 		orr	r2, r2, #1
 270 000c 9A64     		str	r2, [r3, #72]
 271 000e 9B6C     		ldr	r3, [r3, #72]
 272 0010 03F00103 		and	r3, r3, #1
 273 0014 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccsjc6Ci.s 			page 15


 274 0016 019B     		ldr	r3, [sp, #4]
 275              	.LBE9:
 415:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 276              		.loc 1 415 0
 277 0018 0022     		movs	r2, #0
 278 001a 0521     		movs	r1, #5
 279 001c 0B20     		movs	r0, #11
 280 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 281              	.LVL12:
 416:Core/Src/main.c ****   /* DMA1_Channel2_IRQn interrupt configuration */
 282              		.loc 1 416 0
 283 0022 0B20     		movs	r0, #11
 284 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 285              	.LVL13:
 418:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 286              		.loc 1 418 0
 287 0028 0022     		movs	r2, #0
 288 002a 0521     		movs	r1, #5
 289 002c 0C20     		movs	r0, #12
 290 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 291              	.LVL14:
 419:Core/Src/main.c ****   /* DMA1_Channel3_IRQn interrupt configuration */
 292              		.loc 1 419 0
 293 0032 0C20     		movs	r0, #12
 294 0034 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 295              	.LVL15:
 421:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 296              		.loc 1 421 0
 297 0038 0022     		movs	r2, #0
 298 003a 0521     		movs	r1, #5
 299 003c 0D20     		movs	r0, #13
 300 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 301              	.LVL16:
 422:Core/Src/main.c ****   /* DMA1_Channel4_IRQn interrupt configuration */
 302              		.loc 1 422 0
 303 0042 0D20     		movs	r0, #13
 304 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 305              	.LVL17:
 424:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 306              		.loc 1 424 0
 307 0048 0022     		movs	r2, #0
 308 004a 0521     		movs	r1, #5
 309 004c 0E20     		movs	r0, #14
 310 004e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 311              	.LVL18:
 425:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 312              		.loc 1 425 0
 313 0052 0E20     		movs	r0, #14
 314 0054 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 315              	.LVL19:
 427:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 316              		.loc 1 427 0
 317 0058 0022     		movs	r2, #0
 318 005a 0521     		movs	r1, #5
 319 005c 0F20     		movs	r0, #15
 320 005e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 321              	.LVL20:
ARM GAS  /tmp/ccsjc6Ci.s 			page 16


 428:Core/Src/main.c **** 
 322              		.loc 1 428 0
 323 0062 0F20     		movs	r0, #15
 324 0064 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 325              	.LVL21:
 430:Core/Src/main.c **** 
 326              		.loc 1 430 0
 327 0068 03B0     		add	sp, sp, #12
 328              	.LCFI5:
 329              		.cfi_def_cfa_offset 4
 330              		@ sp needed
 331 006a 5DF804FB 		ldr	pc, [sp], #4
 332              	.L8:
 333 006e 00BF     		.align	2
 334              	.L7:
 335 0070 00100240 		.word	1073876992
 336              		.cfi_endproc
 337              	.LFE298:
 339              		.section	.text.StartDefaultTask,"ax",%progbits
 340              		.align	2
 341              		.global	StartDefaultTask
 342              		.thumb
 343              		.thumb_func
 345              	StartDefaultTask:
 346              	.LFB300:
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** /* USER CODE END 4 */
 531:Core/Src/main.c **** 
 532:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 533:Core/Src/main.c **** /**
 534:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 535:Core/Src/main.c ****   * @param  argument: Not used
 536:Core/Src/main.c ****   * @retval None
 537:Core/Src/main.c ****   */
 538:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 539:Core/Src/main.c **** void StartDefaultTask(void *argument)
 540:Core/Src/main.c **** {
 347              		.loc 1 540 0
 348              		.cfi_startproc
 349              		@ Volatile: function does not return.
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              	.LVL22:
 353 0000 08B5     		push	{r3, lr}
 354              	.LCFI6:
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 3, -8
 357              		.cfi_offset 14, -4
 358              	.LVL23:
 359              	.L10:
 541:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 542:Core/Src/main.c ****   /* Infinite loop */
 543:Core/Src/main.c ****   for(;;)
 544:Core/Src/main.c ****   {
 545:Core/Src/main.c ****     osDelay(1);
ARM GAS  /tmp/ccsjc6Ci.s 			page 17


 360              		.loc 1 545 0 discriminator 1
 361 0002 0120     		movs	r0, #1
 362 0004 FFF7FEFF 		bl	osDelay
 363              	.LVL24:
 364 0008 FBE7     		b	.L10
 365              		.cfi_endproc
 366              	.LFE300:
 368 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 369              		.align	2
 370              		.global	HAL_TIM_PeriodElapsedCallback
 371              		.thumb
 372              		.thumb_func
 374              	HAL_TIM_PeriodElapsedCallback:
 375              	.LFB301:
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c ****   /* USER CODE END 5 */
 548:Core/Src/main.c **** }
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** /**
 551:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 552:Core/Src/main.c ****   * @note   This function is called  when TIM16 interrupt took place, inside
 553:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 554:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 555:Core/Src/main.c ****   * @param  htim : TIM handle
 556:Core/Src/main.c ****   * @retval None
 557:Core/Src/main.c ****   */
 558:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 559:Core/Src/main.c **** {
 376              		.loc 1 559 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              	.LVL25:
 381 0000 08B5     		push	{r3, lr}
 382              	.LCFI7:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 3, -8
 385              		.cfi_offset 14, -4
 560:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 563:Core/Src/main.c ****   if (htim->Instance == TIM16) {
 386              		.loc 1 563 0
 387 0002 0268     		ldr	r2, [r0]
 388 0004 024B     		ldr	r3, .L15
 389 0006 9A42     		cmp	r2, r3
 390 0008 01D1     		bne	.L12
 564:Core/Src/main.c ****     HAL_IncTick();
 391              		.loc 1 564 0
 392 000a FFF7FEFF 		bl	HAL_IncTick
 393              	.LVL26:
 394              	.L12:
 395 000e 08BD     		pop	{r3, pc}
 396              	.L16:
 397              		.align	2
 398              	.L15:
 399 0010 00440140 		.word	1073824768
ARM GAS  /tmp/ccsjc6Ci.s 			page 18


 400              		.cfi_endproc
 401              	.LFE301:
 403              		.section	.text.Error_Handler,"ax",%progbits
 404              		.align	2
 405              		.global	Error_Handler
 406              		.thumb
 407              		.thumb_func
 409              	Error_Handler:
 410              	.LFB302:
 565:Core/Src/main.c ****   }
 566:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 569:Core/Src/main.c **** }
 570:Core/Src/main.c **** 
 571:Core/Src/main.c **** /**
 572:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 573:Core/Src/main.c ****   * @retval None
 574:Core/Src/main.c ****   */
 575:Core/Src/main.c **** void Error_Handler(void)
 576:Core/Src/main.c **** {
 411              		.loc 1 576 0
 412              		.cfi_startproc
 413              		@ Volatile: function does not return.
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LBB10:
 418              	.LBB11:
 419              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccsjc6Ci.s 			page 19


  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccsjc6Ci.s 			page 20


  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /tmp/ccsjc6Ci.s 			page 21


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccsjc6Ci.s 			page 22


 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 420              		.loc 2 209 0
 421              		.syntax unified
 422              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 423 0000 72B6     		cpsid i
 424              	@ 0 "" 2
 425              		.thumb
 426              		.syntax unified
 427              	.L18:
 428 0002 FEE7     		b	.L18
 429              	.LBE11:
 430              	.LBE10:
 431              		.cfi_endproc
 432              	.LFE302:
 434              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 435              		.align	2
 436              		.thumb
 437              		.thumb_func
 439              	MX_USART1_UART_Init:
 440              	.LFB296:
 340:Core/Src/main.c **** 
 441              		.loc 1 340 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              	.LCFI8:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 3, -8
 449              		.cfi_offset 14, -4
 349:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 450              		.loc 1 349 0
 451 0002 0B48     		ldr	r0, .L22
 452 0004 0B4B     		ldr	r3, .L22+4
 453 0006 0360     		str	r3, [r0]
 350:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 454              		.loc 1 350 0
 455 0008 4FF4E133 		mov	r3, #115200
 456 000c 4360     		str	r3, [r0, #4]
 351:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 457              		.loc 1 351 0
 458 000e 0023     		movs	r3, #0
 459 0010 8360     		str	r3, [r0, #8]
 352:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 460              		.loc 1 352 0
 461 0012 C360     		str	r3, [r0, #12]
 353:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/ccsjc6Ci.s 			page 23


 462              		.loc 1 353 0
 463 0014 0361     		str	r3, [r0, #16]
 354:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 464              		.loc 1 354 0
 465 0016 0C22     		movs	r2, #12
 466 0018 4261     		str	r2, [r0, #20]
 355:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 467              		.loc 1 355 0
 468 001a 8361     		str	r3, [r0, #24]
 356:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 469              		.loc 1 356 0
 470 001c C361     		str	r3, [r0, #28]
 357:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 471              		.loc 1 357 0
 472 001e 0362     		str	r3, [r0, #32]
 358:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 473              		.loc 1 358 0
 474 0020 4362     		str	r3, [r0, #36]
 359:Core/Src/main.c ****   {
 475              		.loc 1 359 0
 476 0022 FFF7FEFF 		bl	HAL_UART_Init
 477              	.LVL27:
 478 0026 08B1     		cbz	r0, .L19
 361:Core/Src/main.c ****   }
 479              		.loc 1 361 0
 480 0028 FFF7FEFF 		bl	Error_Handler
 481              	.LVL28:
 482              	.L19:
 483 002c 08BD     		pop	{r3, pc}
 484              	.L23:
 485 002e 00BF     		.align	2
 486              	.L22:
 487 0030 00000000 		.word	huart1
 488 0034 00380140 		.word	1073821696
 489              		.cfi_endproc
 490              	.LFE296:
 492              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 493              		.align	2
 494              		.thumb
 495              		.thumb_func
 497              	MX_USART3_UART_Init:
 498              	.LFB297:
 375:Core/Src/main.c **** 
 499              		.loc 1 375 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503 0000 08B5     		push	{r3, lr}
 504              	.LCFI9:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 3, -8
 507              		.cfi_offset 14, -4
 384:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 508              		.loc 1 384 0
 509 0002 0B48     		ldr	r0, .L27
 510 0004 0B4B     		ldr	r3, .L27+4
 511 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccsjc6Ci.s 			page 24


 385:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 512              		.loc 1 385 0
 513 0008 4FF4E133 		mov	r3, #115200
 514 000c 4360     		str	r3, [r0, #4]
 386:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 515              		.loc 1 386 0
 516 000e 0023     		movs	r3, #0
 517 0010 8360     		str	r3, [r0, #8]
 387:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 518              		.loc 1 387 0
 519 0012 C360     		str	r3, [r0, #12]
 388:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 520              		.loc 1 388 0
 521 0014 0361     		str	r3, [r0, #16]
 389:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 522              		.loc 1 389 0
 523 0016 0C22     		movs	r2, #12
 524 0018 4261     		str	r2, [r0, #20]
 390:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 525              		.loc 1 390 0
 526 001a 8361     		str	r3, [r0, #24]
 391:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 527              		.loc 1 391 0
 528 001c C361     		str	r3, [r0, #28]
 392:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 529              		.loc 1 392 0
 530 001e 0362     		str	r3, [r0, #32]
 393:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 531              		.loc 1 393 0
 532 0020 4362     		str	r3, [r0, #36]
 394:Core/Src/main.c ****   {
 533              		.loc 1 394 0
 534 0022 FFF7FEFF 		bl	HAL_UART_Init
 535              	.LVL29:
 536 0026 08B1     		cbz	r0, .L24
 396:Core/Src/main.c ****   }
 537              		.loc 1 396 0
 538 0028 FFF7FEFF 		bl	Error_Handler
 539              	.LVL30:
 540              	.L24:
 541 002c 08BD     		pop	{r3, pc}
 542              	.L28:
 543 002e 00BF     		.align	2
 544              	.L27:
 545 0030 00000000 		.word	huart3
 546 0034 00480040 		.word	1073760256
 547              		.cfi_endproc
 548              	.LFE297:
 550              		.section	.text.MX_ADC1_Init,"ax",%progbits
 551              		.align	2
 552              		.thumb
 553              		.thumb_func
 555              	MX_ADC1_Init:
 556              	.LFB294:
 244:Core/Src/main.c **** 
 557              		.loc 1 244 0
 558              		.cfi_startproc
ARM GAS  /tmp/ccsjc6Ci.s 			page 25


 559              		@ args = 0, pretend = 0, frame = 24
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561 0000 00B5     		push	{lr}
 562              	.LCFI10:
 563              		.cfi_def_cfa_offset 4
 564              		.cfi_offset 14, -4
 565 0002 87B0     		sub	sp, sp, #28
 566              	.LCFI11:
 567              		.cfi_def_cfa_offset 32
 250:Core/Src/main.c **** 
 568              		.loc 1 250 0
 569 0004 0023     		movs	r3, #0
 570 0006 0093     		str	r3, [sp]
 571 0008 0193     		str	r3, [sp, #4]
 572 000a 0293     		str	r3, [sp, #8]
 573 000c 0393     		str	r3, [sp, #12]
 574 000e 0493     		str	r3, [sp, #16]
 575 0010 0593     		str	r3, [sp, #20]
 257:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 576              		.loc 1 257 0
 577 0012 1848     		ldr	r0, .L33
 578 0014 184A     		ldr	r2, .L33+4
 579 0016 0260     		str	r2, [r0]
 258:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 580              		.loc 1 258 0
 581 0018 4360     		str	r3, [r0, #4]
 259:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 582              		.loc 1 259 0
 583 001a 8360     		str	r3, [r0, #8]
 260:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 584              		.loc 1 260 0
 585 001c C360     		str	r3, [r0, #12]
 261:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 586              		.loc 1 261 0
 587 001e 0361     		str	r3, [r0, #16]
 262:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 588              		.loc 1 262 0
 589 0020 0422     		movs	r2, #4
 590 0022 4261     		str	r2, [r0, #20]
 263:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 591              		.loc 1 263 0
 592 0024 0376     		strb	r3, [r0, #24]
 264:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 593              		.loc 1 264 0
 594 0026 4376     		strb	r3, [r0, #25]
 265:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 595              		.loc 1 265 0
 596 0028 0122     		movs	r2, #1
 597 002a C261     		str	r2, [r0, #28]
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 598              		.loc 1 266 0
 599 002c 80F82030 		strb	r3, [r0, #32]
 267:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 600              		.loc 1 267 0
 601 0030 8362     		str	r3, [r0, #40]
 268:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 602              		.loc 1 268 0
ARM GAS  /tmp/ccsjc6Ci.s 			page 26


 603 0032 C362     		str	r3, [r0, #44]
 269:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 604              		.loc 1 269 0
 605 0034 80F83030 		strb	r3, [r0, #48]
 270:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 606              		.loc 1 270 0
 607 0038 4363     		str	r3, [r0, #52]
 271:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 608              		.loc 1 271 0
 609 003a 80F83830 		strb	r3, [r0, #56]
 272:Core/Src/main.c ****   {
 610              		.loc 1 272 0
 611 003e FFF7FEFF 		bl	HAL_ADC_Init
 612              	.LVL31:
 613 0042 08B1     		cbz	r0, .L30
 274:Core/Src/main.c ****   }
 614              		.loc 1 274 0
 615 0044 FFF7FEFF 		bl	Error_Handler
 616              	.LVL32:
 617              	.L30:
 278:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 618              		.loc 1 278 0
 619 0048 0C4B     		ldr	r3, .L33+8
 620 004a 0093     		str	r3, [sp]
 279:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 621              		.loc 1 279 0
 622 004c 0623     		movs	r3, #6
 623 004e 0193     		str	r3, [sp, #4]
 280:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 624              		.loc 1 280 0
 625 0050 0023     		movs	r3, #0
 626 0052 0293     		str	r3, [sp, #8]
 281:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 627              		.loc 1 281 0
 628 0054 7F22     		movs	r2, #127
 629 0056 0392     		str	r2, [sp, #12]
 282:Core/Src/main.c ****   sConfig.Offset = 0;
 630              		.loc 1 282 0
 631 0058 0422     		movs	r2, #4
 632 005a 0492     		str	r2, [sp, #16]
 283:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 633              		.loc 1 283 0
 634 005c 0593     		str	r3, [sp, #20]
 284:Core/Src/main.c ****   {
 635              		.loc 1 284 0
 636 005e 6946     		mov	r1, sp
 637 0060 0448     		ldr	r0, .L33
 638 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 639              	.LVL33:
 640 0066 08B1     		cbz	r0, .L29
 286:Core/Src/main.c ****   }
 641              		.loc 1 286 0
 642 0068 FFF7FEFF 		bl	Error_Handler
 643              	.LVL34:
 644              	.L29:
 292:Core/Src/main.c **** 
 645              		.loc 1 292 0
ARM GAS  /tmp/ccsjc6Ci.s 			page 27


 646 006c 07B0     		add	sp, sp, #28
 647              	.LCFI12:
 648              		.cfi_def_cfa_offset 4
 649              		@ sp needed
 650 006e 5DF804FB 		ldr	pc, [sp], #4
 651              	.L34:
 652 0072 00BF     		.align	2
 653              	.L33:
 654 0074 00000000 		.word	hadc1
 655 0078 00000450 		.word	1342439424
 656 007c 02003004 		.word	70254594
 657              		.cfi_endproc
 658              	.LFE294:
 660              		.section	.text.MX_SPI1_Init,"ax",%progbits
 661              		.align	2
 662              		.thumb
 663              		.thumb_func
 665              	MX_SPI1_Init:
 666              	.LFB295:
 300:Core/Src/main.c **** 
 667              		.loc 1 300 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671 0000 08B5     		push	{r3, lr}
 672              	.LCFI13:
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 3, -8
 675              		.cfi_offset 14, -4
 310:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 676              		.loc 1 310 0
 677 0002 0F48     		ldr	r0, .L38
 678 0004 0F4B     		ldr	r3, .L38+4
 679 0006 0360     		str	r3, [r0]
 311:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 680              		.loc 1 311 0
 681 0008 4FF48273 		mov	r3, #260
 682 000c 4360     		str	r3, [r0, #4]
 312:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 683              		.loc 1 312 0
 684 000e 0023     		movs	r3, #0
 685 0010 8360     		str	r3, [r0, #8]
 313:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 686              		.loc 1 313 0
 687 0012 4FF44072 		mov	r2, #768
 688 0016 C260     		str	r2, [r0, #12]
 314:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 689              		.loc 1 314 0
 690 0018 0361     		str	r3, [r0, #16]
 315:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 691              		.loc 1 315 0
 692 001a 4361     		str	r3, [r0, #20]
 316:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 693              		.loc 1 316 0
 694 001c 4FF40072 		mov	r2, #512
 695 0020 8261     		str	r2, [r0, #24]
 317:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
ARM GAS  /tmp/ccsjc6Ci.s 			page 28


 696              		.loc 1 317 0
 697 0022 C361     		str	r3, [r0, #28]
 318:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 698              		.loc 1 318 0
 699 0024 0362     		str	r3, [r0, #32]
 319:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 700              		.loc 1 319 0
 701 0026 4362     		str	r3, [r0, #36]
 320:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 702              		.loc 1 320 0
 703 0028 8362     		str	r3, [r0, #40]
 321:Core/Src/main.c ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 704              		.loc 1 321 0
 705 002a 0722     		movs	r2, #7
 706 002c C262     		str	r2, [r0, #44]
 322:Core/Src/main.c ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 707              		.loc 1 322 0
 708 002e 0363     		str	r3, [r0, #48]
 323:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 709              		.loc 1 323 0
 710 0030 0823     		movs	r3, #8
 711 0032 4363     		str	r3, [r0, #52]
 324:Core/Src/main.c ****   {
 712              		.loc 1 324 0
 713 0034 FFF7FEFF 		bl	HAL_SPI_Init
 714              	.LVL35:
 715 0038 08B1     		cbz	r0, .L35
 326:Core/Src/main.c ****   }
 716              		.loc 1 326 0
 717 003a FFF7FEFF 		bl	Error_Handler
 718              	.LVL36:
 719              	.L35:
 720 003e 08BD     		pop	{r3, pc}
 721              	.L39:
 722              		.align	2
 723              	.L38:
 724 0040 00000000 		.word	hspi1
 725 0044 00300140 		.word	1073819648
 726              		.cfi_endproc
 727              	.LFE295:
 729              		.section	.text.SystemClock_Config,"ax",%progbits
 730              		.align	2
 731              		.global	SystemClock_Config
 732              		.thumb
 733              		.thumb_func
 735              	SystemClock_Config:
 736              	.LFB293:
 196:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 737              		.loc 1 196 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 88
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741 0000 00B5     		push	{lr}
 742              	.LCFI14:
 743              		.cfi_def_cfa_offset 4
 744              		.cfi_offset 14, -4
 745 0002 97B0     		sub	sp, sp, #92
ARM GAS  /tmp/ccsjc6Ci.s 			page 29


 746              	.LCFI15:
 747              		.cfi_def_cfa_offset 96
 197:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 748              		.loc 1 197 0
 749 0004 4422     		movs	r2, #68
 750 0006 0021     		movs	r1, #0
 751 0008 05A8     		add	r0, sp, #20
 752 000a FFF7FEFF 		bl	memset
 753              	.LVL37:
 198:Core/Src/main.c **** 
 754              		.loc 1 198 0
 755 000e 0023     		movs	r3, #0
 756 0010 0093     		str	r3, [sp]
 757 0012 0193     		str	r3, [sp, #4]
 758 0014 0293     		str	r3, [sp, #8]
 759 0016 0393     		str	r3, [sp, #12]
 760 0018 0493     		str	r3, [sp, #16]
 202:Core/Src/main.c ****   {
 761              		.loc 1 202 0
 762 001a 4FF40070 		mov	r0, #512
 763 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 764              	.LVL38:
 765 0022 08B1     		cbz	r0, .L41
 204:Core/Src/main.c ****   }
 766              		.loc 1 204 0
 767 0024 FFF7FEFF 		bl	Error_Handler
 768              	.LVL39:
 769              	.L41:
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 770              		.loc 1 209 0
 771 0028 0223     		movs	r3, #2
 772 002a 0593     		str	r3, [sp, #20]
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 773              		.loc 1 210 0
 774 002c 4FF48072 		mov	r2, #256
 775 0030 0892     		str	r2, [sp, #32]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 776              		.loc 1 211 0
 777 0032 1022     		movs	r2, #16
 778 0034 0992     		str	r2, [sp, #36]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 779              		.loc 1 212 0
 780 0036 0F93     		str	r3, [sp, #60]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 781              		.loc 1 213 0
 782 0038 1093     		str	r3, [sp, #64]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 10;
 783              		.loc 1 214 0
 784 003a 0122     		movs	r2, #1
 785 003c 1192     		str	r2, [sp, #68]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 786              		.loc 1 215 0
 787 003e 0A22     		movs	r2, #10
 788 0040 1292     		str	r2, [sp, #72]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 789              		.loc 1 216 0
 790 0042 0722     		movs	r2, #7
ARM GAS  /tmp/ccsjc6Ci.s 			page 30


 791 0044 1392     		str	r2, [sp, #76]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 792              		.loc 1 217 0
 793 0046 1493     		str	r3, [sp, #80]
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 794              		.loc 1 218 0
 795 0048 1593     		str	r3, [sp, #84]
 219:Core/Src/main.c ****   {
 796              		.loc 1 219 0
 797 004a 05A8     		add	r0, sp, #20
 798 004c FFF7FEFF 		bl	HAL_RCC_OscConfig
 799              	.LVL40:
 800 0050 08B1     		cbz	r0, .L42
 221:Core/Src/main.c ****   }
 801              		.loc 1 221 0
 802 0052 FFF7FEFF 		bl	Error_Handler
 803              	.LVL41:
 804              	.L42:
 225:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 805              		.loc 1 225 0
 806 0056 0F23     		movs	r3, #15
 807 0058 0093     		str	r3, [sp]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 808              		.loc 1 227 0
 809 005a 0323     		movs	r3, #3
 810 005c 0193     		str	r3, [sp, #4]
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 811              		.loc 1 228 0
 812 005e 0023     		movs	r3, #0
 813 0060 0293     		str	r3, [sp, #8]
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 814              		.loc 1 229 0
 815 0062 0393     		str	r3, [sp, #12]
 230:Core/Src/main.c **** 
 816              		.loc 1 230 0
 817 0064 0493     		str	r3, [sp, #16]
 232:Core/Src/main.c ****   {
 818              		.loc 1 232 0
 819 0066 0421     		movs	r1, #4
 820 0068 6846     		mov	r0, sp
 821 006a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 822              	.LVL42:
 823 006e 08B1     		cbz	r0, .L40
 234:Core/Src/main.c ****   }
 824              		.loc 1 234 0
 825 0070 FFF7FEFF 		bl	Error_Handler
 826              	.LVL43:
 827              	.L40:
 236:Core/Src/main.c **** 
 828              		.loc 1 236 0
 829 0074 17B0     		add	sp, sp, #92
 830              	.LCFI16:
 831              		.cfi_def_cfa_offset 4
 832              		@ sp needed
 833 0076 5DF804FB 		ldr	pc, [sp], #4
 834              		.cfi_endproc
 835              	.LFE293:
ARM GAS  /tmp/ccsjc6Ci.s 			page 31


 837 007a 00BF     		.section	.text.main,"ax",%progbits
 838              		.align	2
 839              		.global	main
 840              		.thumb
 841              		.thumb_func
 843              	main:
 844              	.LFB292:
 111:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 845              		.loc 1 111 0
 846              		.cfi_startproc
 847              		@ Volatile: function does not return.
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850 0000 08B5     		push	{r3, lr}
 851              	.LCFI17:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 3, -8
 854              		.cfi_offset 14, -4
 119:Core/Src/main.c **** 
 855              		.loc 1 119 0
 856 0002 FFF7FEFF 		bl	HAL_Init
 857              	.LVL44:
 122:Core/Src/main.c ****   /* USER CODE END Init */
 858              		.loc 1 122 0
 859 0006 FFF7FEFF 		bl	DTW_counter_init
 860              	.LVL45:
 126:Core/Src/main.c **** 
 861              		.loc 1 126 0
 862 000a FFF7FEFF 		bl	SystemClock_Config
 863              	.LVL46:
 133:Core/Src/main.c ****   MX_DMA_Init();
 864              		.loc 1 133 0
 865 000e FFF7FEFF 		bl	MX_GPIO_Init
 866              	.LVL47:
 134:Core/Src/main.c ****   MX_USART1_UART_Init();
 867              		.loc 1 134 0
 868 0012 FFF7FEFF 		bl	MX_DMA_Init
 869              	.LVL48:
 135:Core/Src/main.c ****   MX_USART3_UART_Init();
 870              		.loc 1 135 0
 871 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 872              	.LVL49:
 136:Core/Src/main.c ****   MX_ADC1_Init();
 873              		.loc 1 136 0
 874 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 875              	.LVL50:
 137:Core/Src/main.c ****   MX_SPI1_Init();
 876              		.loc 1 137 0
 877 001e FFF7FEFF 		bl	MX_ADC1_Init
 878              	.LVL51:
 138:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 879              		.loc 1 138 0
 880 0022 FFF7FEFF 		bl	MX_SPI1_Init
 881              	.LVL52:
 140:Core/Src/main.c **** //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 882              		.loc 1 140 0
 883 0026 40F2D240 		movw	r0, #1234
ARM GAS  /tmp/ccsjc6Ci.s 			page 32


 884 002a FFF7FEFF 		bl	morse_trap
 885              	.LVL53:
 886              	.L46:
 887 002e FEE7     		b	.L46
 888              		.cfi_endproc
 889              	.LFE292:
 891              		.global	defaultTask_attributes
 892              		.comm	defaultTaskHandle,4,4
 893              		.comm	hdma_usart3_tx,72,4
 894              		.comm	hdma_usart3_rx,72,4
 895              		.comm	hdma_usart1_tx,72,4
 896              		.comm	hdma_usart1_rx,72,4
 897              		.comm	huart3,132,4
 898              		.comm	huart1,132,4
 899              		.comm	hspi1,100,4
 900              		.comm	hdma_adc1,72,4
 901              		.comm	hadc1,100,4
 902              		.section	.rodata.defaultTask_attributes,"a",%progbits
 903              		.align	2
 906              	defaultTask_attributes:
 907 0000 00000000 		.word	.LC0
 908 0004 00000000 		.space	16
 908      00000000 
 908      00000000 
 908      00000000 
 909 0014 00020000 		.word	512
 910 0018 18000000 		.word	24
 911 001c 00000000 		.space	8
 911      00000000 
 912              		.section	.rodata.str1.4,"aMS",%progbits,1
 913              		.align	2
 914              	.LC0:
 915 0000 64656661 		.ascii	"defaultTask\000"
 915      756C7454 
 915      61736B00 
 916              		.text
 917              	.Letext0:
 918              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 919              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 920              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 921              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 922              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 923              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 924              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 925              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 926              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 927              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
 928              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 929              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 930              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 931              		.file 16 "Drivers/CMSIS/Include/core_cm4.h"
 932              		.file 17 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
 933              		.file 18 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 934              		.file 19 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 935              		.file 20 "Ourwares/DTW_counter.h"
 936              		.file 21 "Ourwares/morse.h"
ARM GAS  /tmp/ccsjc6Ci.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccsjc6Ci.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccsjc6Ci.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccsjc6Ci.s:239    .text.MX_GPIO_Init:0000013c $d
     /tmp/ccsjc6Ci.s:248    .text.MX_DMA_Init:00000000 $t
     /tmp/ccsjc6Ci.s:252    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccsjc6Ci.s:335    .text.MX_DMA_Init:00000070 $d
     /tmp/ccsjc6Ci.s:340    .text.StartDefaultTask:00000000 $t
     /tmp/ccsjc6Ci.s:345    .text.StartDefaultTask:00000000 StartDefaultTask
     /tmp/ccsjc6Ci.s:369    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccsjc6Ci.s:374    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccsjc6Ci.s:399    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/ccsjc6Ci.s:404    .text.Error_Handler:00000000 $t
     /tmp/ccsjc6Ci.s:409    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccsjc6Ci.s:435    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccsjc6Ci.s:439    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccsjc6Ci.s:487    .text.MX_USART1_UART_Init:00000030 $d
                            *COM*:00000084 huart1
     /tmp/ccsjc6Ci.s:493    .text.MX_USART3_UART_Init:00000000 $t
     /tmp/ccsjc6Ci.s:497    .text.MX_USART3_UART_Init:00000000 MX_USART3_UART_Init
     /tmp/ccsjc6Ci.s:545    .text.MX_USART3_UART_Init:00000030 $d
                            *COM*:00000084 huart3
     /tmp/ccsjc6Ci.s:551    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccsjc6Ci.s:555    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccsjc6Ci.s:654    .text.MX_ADC1_Init:00000074 $d
                            *COM*:00000064 hadc1
     /tmp/ccsjc6Ci.s:661    .text.MX_SPI1_Init:00000000 $t
     /tmp/ccsjc6Ci.s:665    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
     /tmp/ccsjc6Ci.s:724    .text.MX_SPI1_Init:00000040 $d
                            *COM*:00000064 hspi1
     /tmp/ccsjc6Ci.s:730    .text.SystemClock_Config:00000000 $t
     /tmp/ccsjc6Ci.s:735    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccsjc6Ci.s:838    .text.main:00000000 $t
     /tmp/ccsjc6Ci.s:843    .text.main:00000000 main
     /tmp/ccsjc6Ci.s:906    .rodata.defaultTask_attributes:00000000 defaultTask_attributes
                            *COM*:00000004 defaultTaskHandle
                            *COM*:00000048 hdma_usart3_tx
                            *COM*:00000048 hdma_usart3_rx
                            *COM*:00000048 hdma_usart1_tx
                            *COM*:00000048 hdma_usart1_rx
                            *COM*:00000048 hdma_adc1
     /tmp/ccsjc6Ci.s:903    .rodata.defaultTask_attributes:00000000 $d
     /tmp/ccsjc6Ci.s:913    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_IncTick
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_SPI_Init
ARM GAS  /tmp/ccsjc6Ci.s 			page 34


memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
DTW_counter_init
morse_trap
