ARM GAS  /tmp/ccYYaUhP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"tasks.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskIsTaskSuspended:
  27              	.LFB16:
  28              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  /tmp/ccYYaUhP.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  /tmp/ccYYaUhP.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  /tmp/ccYYaUhP.s 			page 4


 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /tmp/ccYYaUhP.s 			page 5


 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/ccYYaUhP.s 			page 6


 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
ARM GAS  /tmp/ccYYaUhP.s 			page 7


 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/ccYYaUhP.s 			page 8


 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/ccYYaUhP.s 			page 9


 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
ARM GAS  /tmp/ccYYaUhP.s 			page 10


 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccYYaUhP.s 			page 11


 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
ARM GAS  /tmp/ccYYaUhP.s 			page 12


 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccYYaUhP.s 			page 13


 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/ccYYaUhP.s 			page 14


 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 15


 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
ARM GAS  /tmp/ccYYaUhP.s 			page 16


 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
ARM GAS  /tmp/ccYYaUhP.s 			page 17


 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  /tmp/ccYYaUhP.s 			page 18


 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
ARM GAS  /tmp/ccYYaUhP.s 			page 19


1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
ARM GAS  /tmp/ccYYaUhP.s 			page 20


1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccYYaUhP.s 			page 21


1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
ARM GAS  /tmp/ccYYaUhP.s 			page 22


1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
ARM GAS  /tmp/ccYYaUhP.s 			page 23


1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  /tmp/ccYYaUhP.s 			page 24


1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
ARM GAS  /tmp/ccYYaUhP.s 			page 25


1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccYYaUhP.s 			page 26


1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
ARM GAS  /tmp/ccYYaUhP.s 			page 27


1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  /tmp/ccYYaUhP.s 			page 28


1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccYYaUhP.s 			page 29


1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  /tmp/ccYYaUhP.s 			page 30


1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccYYaUhP.s 			page 31


1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccYYaUhP.s 			page 32


1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccYYaUhP.s 			page 33


1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  29              		.loc 1 1806 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  35              		.loc 1 1814 0
  36 0000 40B9     		cbnz	r0, .L2
  37              	.LBB119:
  38              	.LBB120:
  39              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  /tmp/ccYYaUhP.s 			page 34


  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
ARM GAS  /tmp/ccYYaUhP.s 			page 35


  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
ARM GAS  /tmp/ccYYaUhP.s 			page 36


 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  40              		.loc 2 195 0
  41              		.syntax unified
  42              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  43 0002 4FF05003 			mov r3, #80												
  44 0006 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccYYaUhP.s 			page 37


  45 000a BFF36F8F 		isb														
  46 000e BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL1:
  50              		.thumb
  51              		.syntax unified
  52              	.L3:
  53 0012 FEE7     		b	.L3
  54              	.L2:
  55              	.LBE120:
  56              	.LBE119:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  57              		.loc 1 1817 0
  58 0014 4169     		ldr	r1, [r0, #20]
  59 0016 084A     		ldr	r2, .L8
  60 0018 9142     		cmp	r1, r2
  61 001a 06D1     		bne	.L5
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  62              		.loc 1 1820 0
  63 001c 836A     		ldr	r3, [r0, #40]
  64 001e 074A     		ldr	r2, .L8+4
  65 0020 9342     		cmp	r3, r2
  66 0022 04D0     		beq	.L6
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  67              		.loc 1 1824 0
  68 0024 2BB1     		cbz	r3, .L7
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  69              		.loc 1 1807 0
  70 0026 0020     		movs	r0, #0
  71              	.LVL2:
  72 0028 7047     		bx	lr
  73              	.LVL3:
  74              	.L5:
  75 002a 0020     		movs	r0, #0
  76              	.LVL4:
  77 002c 7047     		bx	lr
  78              	.LVL5:
  79              	.L6:
  80 002e 0020     		movs	r0, #0
  81              	.LVL6:
  82 0030 7047     		bx	lr
  83              	.LVL7:
  84              	.L7:
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  85              		.loc 1 1826 0
  86 0032 0120     		movs	r0, #1
  87              	.LVL8:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccYYaUhP.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  88              		.loc 1 1844 0
  89 0034 7047     		bx	lr
  90              	.L9:
  91 0036 00BF     		.align	2
  92              	.L8:
  93 0038 00000000 		.word	.LANCHOR0
  94 003c 00000000 		.word	.LANCHOR1
  95              		.cfi_endproc
  96              	.LFE16:
  98              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  99              		.align	2
 100              		.thumb
 101              		.thumb_func
 103              	prvTaskCheckFreeStackSpace:
 104              	.LFB47:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
ARM GAS  /tmp/ccYYaUhP.s 			page 39


1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  /tmp/ccYYaUhP.s 			page 40


1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
ARM GAS  /tmp/ccYYaUhP.s 			page 41


1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccYYaUhP.s 			page 42


2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccYYaUhP.s 			page 43


2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
ARM GAS  /tmp/ccYYaUhP.s 			page 44


2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 45


2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
ARM GAS  /tmp/ccYYaUhP.s 			page 46


2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
ARM GAS  /tmp/ccYYaUhP.s 			page 47


2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccYYaUhP.s 			page 48


2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 49


2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 50


2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccYYaUhP.s 			page 51


2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccYYaUhP.s 			page 52


2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccYYaUhP.s 			page 53


2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
ARM GAS  /tmp/ccYYaUhP.s 			page 54


2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
ARM GAS  /tmp/ccYYaUhP.s 			page 55


2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
ARM GAS  /tmp/ccYYaUhP.s 			page 56


2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 57


2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccYYaUhP.s 			page 58


2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 59


3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  /tmp/ccYYaUhP.s 			page 60


3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
ARM GAS  /tmp/ccYYaUhP.s 			page 61


3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccYYaUhP.s 			page 62


3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
ARM GAS  /tmp/ccYYaUhP.s 			page 63


3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccYYaUhP.s 			page 64


3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccYYaUhP.s 			page 65


3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
ARM GAS  /tmp/ccYYaUhP.s 			page 66


3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
ARM GAS  /tmp/ccYYaUhP.s 			page 67


3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
ARM GAS  /tmp/ccYYaUhP.s 			page 68


3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccYYaUhP.s 			page 69


3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccYYaUhP.s 			page 70


3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccYYaUhP.s 			page 71


3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccYYaUhP.s 			page 72


3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 105              		.loc 1 3800 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL9:
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  /tmp/ccYYaUhP.s 			page 73


 111              		.loc 1 3801 0
 112 0000 0023     		movs	r3, #0
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 113              		.loc 1 3803 0
 114 0002 01E0     		b	.L11
 115              	.LVL10:
 116              	.L12:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 117              		.loc 1 3805 0
 118 0004 0130     		adds	r0, r0, #1
 119              	.LVL11:
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 120              		.loc 1 3806 0
 121 0006 0133     		adds	r3, r3, #1
 122              	.LVL12:
 123              	.L11:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 124              		.loc 1 3803 0
 125 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 126 000a A52A     		cmp	r2, #165
 127 000c FAD0     		beq	.L12
 128              	.LVL13:
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 129              		.loc 1 3812 0
 130 000e C3F38F00 		ubfx	r0, r3, #2, #16
 131              	.LVL14:
 132 0012 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE47:
 136              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 137              		.align	2
 138              		.thumb
 139              		.thumb_func
 141              	prvResetNextTaskUnblockTime:
 142              	.LFB50:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
ARM GAS  /tmp/ccYYaUhP.s 			page 74


3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 75


3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccYYaUhP.s 			page 76


3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 143              		.loc 1 3944 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 148              		.loc 1 3947 0
 149 0000 084B     		ldr	r3, .L16
 150 0002 1B68     		ldr	r3, [r3]
 151 0004 1B68     		ldr	r3, [r3]
 152 0006 23B9     		cbnz	r3, .L14
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 153              		.loc 1 3953 0
 154 0008 4FF0FF32 		mov	r2, #-1
 155 000c 064B     		ldr	r3, .L16+4
 156 000e 1A60     		str	r2, [r3]
 157 0010 7047     		bx	lr
 158              	.L14:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 159              		.loc 1 3961 0
 160 0012 044B     		ldr	r3, .L16
 161 0014 1B68     		ldr	r3, [r3]
 162 0016 DB68     		ldr	r3, [r3, #12]
 163 0018 DB68     		ldr	r3, [r3, #12]
 164              	.LVL15:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 165              		.loc 1 3962 0
 166 001a 5A68     		ldr	r2, [r3, #4]
 167 001c 024B     		ldr	r3, .L16+4
 168              	.LVL16:
 169 001e 1A60     		str	r2, [r3]
 170 0020 7047     		bx	lr
 171              	.L17:
 172 0022 00BF     		.align	2
 173              	.L16:
 174 0024 00000000 		.word	.LANCHOR2
 175 0028 00000000 		.word	.LANCHOR3
 176              		.cfi_endproc
 177              	.LFE50:
 179              		.section	.text.prvInitialiseNewTask,"ax",%progbits
ARM GAS  /tmp/ccYYaUhP.s 			page 77


 180              		.align	2
 181              		.thumb
 182              		.thumb_func
 184              	prvInitialiseNewTask:
 185              	.LFB6:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 186              		.loc 1 832 0
 187              		.cfi_startproc
 188              		@ args = 16, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL17:
 191 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 32
 194              		.cfi_offset 4, -32
 195              		.cfi_offset 5, -28
 196              		.cfi_offset 6, -24
 197              		.cfi_offset 7, -20
 198              		.cfi_offset 8, -16
 199              		.cfi_offset 9, -12
 200              		.cfi_offset 10, -8
 201              		.cfi_offset 14, -4
 202 0004 8146     		mov	r9, r0
 203 0006 0D46     		mov	r5, r1
 204 0008 1746     		mov	r7, r2
 205 000a 9A46     		mov	r10, r3
 206 000c 089E     		ldr	r6, [sp, #32]
 207 000e DDF82480 		ldr	r8, [sp, #36]
 208 0012 0A9C     		ldr	r4, [sp, #40]
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 209              		.loc 1 854 0
 210 0014 9200     		lsls	r2, r2, #2
 211              	.LVL18:
 212 0016 A521     		movs	r1, #165
 213              	.LVL19:
 214 0018 206B     		ldr	r0, [r4, #48]
 215              	.LVL20:
 216 001a FFF7FEFF 		bl	memset
 217              	.LVL21:
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 218              		.loc 1 864 0
 219 001e 236B     		ldr	r3, [r4, #48]
 220 0020 07F18042 		add	r2, r7, #1073741824
 221 0024 013A     		subs	r2, r2, #1
 222 0026 03EB8207 		add	r7, r3, r2, lsl #2
 223              	.LVL22:
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 224              		.loc 1 865 0
 225 002a 27F00707 		bic	r7, r7, #7
 226              	.LVL23:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 227              		.loc 1 892 0
 228 002e 45B9     		cbnz	r5, .L26
 229 0030 0EE0     		b	.L28
 230              	.LVL24:
 231              	.L22:
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 78


 232              		.loc 1 896 0
 233 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 234 0034 E218     		adds	r2, r4, r3
 235 0036 82F83410 		strb	r1, [r2, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 236              		.loc 1 901 0
 237 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 238 003c 22B1     		cbz	r2, .L21
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 239              		.loc 1 894 0 discriminator 2
 240 003e 0133     		adds	r3, r3, #1
 241              	.LVL25:
 242 0040 00E0     		b	.L19
 243              	.LVL26:
 244              	.L26:
 245 0042 0023     		movs	r3, #0
 246              	.L19:
 247              	.LVL27:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 248              		.loc 1 894 0 is_stmt 0 discriminator 1
 249 0044 0F2B     		cmp	r3, #15
 250 0046 F4D9     		bls	.L22
 251              	.L21:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 252              		.loc 1 913 0 is_stmt 1
 253 0048 0023     		movs	r3, #0
 254              	.LVL28:
 255 004a 84F84330 		strb	r3, [r4, #67]
 256 004e 02E0     		b	.L23
 257              	.L28:
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 258              		.loc 1 919 0
 259 0050 0023     		movs	r3, #0
 260 0052 84F83430 		strb	r3, [r4, #52]
 261              	.L23:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 262              		.loc 1 924 0
 263 0056 372E     		cmp	r6, #55
 264 0058 00D9     		bls	.L24
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 265              		.loc 1 926 0
 266 005a 3726     		movs	r6, #55
 267              	.L24:
 268              	.LVL29:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 269              		.loc 1 933 0
 270 005c E662     		str	r6, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 271              		.loc 1 936 0
 272 005e E664     		str	r6, [r4, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 937 0
 274 0060 0025     		movs	r5, #0
 275              	.LVL30:
 276 0062 2565     		str	r5, [r4, #80]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 277              		.loc 1 941 0
ARM GAS  /tmp/ccYYaUhP.s 			page 79


 278 0064 201D     		adds	r0, r4, #4
 279 0066 FFF7FEFF 		bl	vListInitialiseItem
 280              	.LVL31:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 281              		.loc 1 942 0
 282 006a 04F11800 		add	r0, r4, #24
 283 006e FFF7FEFF 		bl	vListInitialiseItem
 284              	.LVL32:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 285              		.loc 1 946 0
 286 0072 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 287              		.loc 1 949 0
 288 0074 C6F13806 		rsb	r6, r6, #56
 289              	.LVL33:
 290 0078 A661     		str	r6, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291              		.loc 1 950 0
 292 007a 6462     		str	r4, [r4, #36]
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 293              		.loc 1 992 0
 294 007c 6565     		str	r5, [r4, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 295              		.loc 1 993 0
 296 007e 84F85850 		strb	r5, [r4, #88]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 297              		.loc 1 1058 0
 298 0082 5246     		mov	r2, r10
 299 0084 4946     		mov	r1, r9
 300 0086 3846     		mov	r0, r7
 301 0088 FFF7FEFF 		bl	pxPortInitialiseStack
 302              	.LVL34:
 303 008c 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 304              		.loc 1 1064 0
 305 008e B8F1000F 		cmp	r8, #0
 306 0092 01D0     		beq	.L18
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 1068 0
 308 0094 C8F80040 		str	r4, [r8]
 309              	.L18:
 310 0098 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 311              		.cfi_endproc
 312              	.LFE6:
 314              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 315              		.align	2
 316              		.thumb
 317              		.thumb_func
 319              	prvInitialiseTaskLists:
 320              	.LFB43:
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 321              		.loc 1 3608 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 38B5     		push	{r3, r4, r5, lr}
 326              	.LCFI1:
ARM GAS  /tmp/ccYYaUhP.s 			page 80


 327              		.cfi_def_cfa_offset 16
 328              		.cfi_offset 3, -16
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 5, -8
 331              		.cfi_offset 14, -4
 332              	.LVL35:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 333              		.loc 1 3611 0
 334 0002 0024     		movs	r4, #0
 335 0004 07E0     		b	.L31
 336              	.LVL36:
 337              	.L32:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 338              		.loc 1 3613 0 discriminator 3
 339 0006 04EB8402 		add	r2, r4, r4, lsl #2
 340 000a 9300     		lsls	r3, r2, #2
 341 000c 0E48     		ldr	r0, .L34
 342 000e 1844     		add	r0, r0, r3
 343 0010 FFF7FEFF 		bl	vListInitialise
 344              	.LVL37:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 345              		.loc 1 3611 0 discriminator 3
 346 0014 0134     		adds	r4, r4, #1
 347              	.LVL38:
 348              	.L31:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 349              		.loc 1 3611 0 is_stmt 0 discriminator 1
 350 0016 372C     		cmp	r4, #55
 351 0018 F5D9     		bls	.L32
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 352              		.loc 1 3616 0 is_stmt 1
 353 001a 0C4D     		ldr	r5, .L34+4
 354 001c 2846     		mov	r0, r5
 355 001e FFF7FEFF 		bl	vListInitialise
 356              	.LVL39:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 357              		.loc 1 3617 0
 358 0022 0B4C     		ldr	r4, .L34+8
 359              	.LVL40:
 360 0024 2046     		mov	r0, r4
 361 0026 FFF7FEFF 		bl	vListInitialise
 362              	.LVL41:
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363              		.loc 1 3618 0
 364 002a 0A48     		ldr	r0, .L34+12
 365 002c FFF7FEFF 		bl	vListInitialise
 366              	.LVL42:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 367              		.loc 1 3622 0
 368 0030 0948     		ldr	r0, .L34+16
 369 0032 FFF7FEFF 		bl	vListInitialise
 370              	.LVL43:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 371              		.loc 1 3628 0
 372 0036 0948     		ldr	r0, .L34+20
 373 0038 FFF7FEFF 		bl	vListInitialise
 374              	.LVL44:
ARM GAS  /tmp/ccYYaUhP.s 			page 81


3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 375              		.loc 1 3634 0
 376 003c 084B     		ldr	r3, .L34+24
 377 003e 1D60     		str	r5, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 378              		.loc 1 3635 0
 379 0040 084B     		ldr	r3, .L34+28
 380 0042 1C60     		str	r4, [r3]
 381 0044 38BD     		pop	{r3, r4, r5, pc}
 382              	.L35:
 383 0046 00BF     		.align	2
 384              	.L34:
 385 0048 00000000 		.word	.LANCHOR4
 386 004c 00000000 		.word	.LANCHOR5
 387 0050 00000000 		.word	.LANCHOR6
 388 0054 00000000 		.word	.LANCHOR1
 389 0058 00000000 		.word	.LANCHOR7
 390 005c 00000000 		.word	.LANCHOR0
 391 0060 00000000 		.word	.LANCHOR2
 392 0064 00000000 		.word	.LANCHOR8
 393              		.cfi_endproc
 394              	.LFE43:
 396              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 397              		.align	2
 398              		.thumb
 399              		.thumb_func
 401              	prvAddNewTaskToReadyList:
 402              	.LFB7:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 403              		.loc 1 1078 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL45:
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI2:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
 413 0002 0446     		mov	r4, r0
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 414              		.loc 1 1081 0
 415 0004 FFF7FEFF 		bl	vPortEnterCritical
 416              	.LVL46:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 417              		.loc 1 1083 0
 418 0008 204A     		ldr	r2, .L42
 419 000a 1368     		ldr	r3, [r2]
 420 000c 0133     		adds	r3, r3, #1
 421 000e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 422              		.loc 1 1084 0
 423 0010 1F4B     		ldr	r3, .L42+4
 424 0012 1B68     		ldr	r3, [r3]
 425 0014 3BB9     		cbnz	r3, .L37
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426              		.loc 1 1088 0
ARM GAS  /tmp/ccYYaUhP.s 			page 82


 427 0016 1E4B     		ldr	r3, .L42+4
 428 0018 1C60     		str	r4, [r3]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 429              		.loc 1 1090 0
 430 001a 1368     		ldr	r3, [r2]
 431 001c 012B     		cmp	r3, #1
 432 001e 0DD1     		bne	.L38
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 433              		.loc 1 1095 0
 434 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 435              	.LVL47:
 436 0024 0AE0     		b	.L38
 437              	.L37:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 438              		.loc 1 1107 0
 439 0026 1B4B     		ldr	r3, .L42+8
 440 0028 1B68     		ldr	r3, [r3]
 441 002a 3BB9     		cbnz	r3, .L38
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 442              		.loc 1 1109 0
 443 002c 184B     		ldr	r3, .L42+4
 444 002e 1B68     		ldr	r3, [r3]
 445 0030 DA6A     		ldr	r2, [r3, #44]
 446 0032 E36A     		ldr	r3, [r4, #44]
 447 0034 9A42     		cmp	r2, r3
 448 0036 01D8     		bhi	.L38
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 449              		.loc 1 1111 0
 450 0038 154B     		ldr	r3, .L42+4
 451 003a 1C60     		str	r4, [r3]
 452              	.L38:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 453              		.loc 1 1124 0
 454 003c 164A     		ldr	r2, .L42+12
 455 003e 1368     		ldr	r3, [r2]
 456 0040 0133     		adds	r3, r3, #1
 457 0042 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 458              		.loc 1 1129 0
 459 0044 6364     		str	r3, [r4, #68]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460              		.loc 1 1134 0
 461 0046 E36A     		ldr	r3, [r4, #44]
 462 0048 144A     		ldr	r2, .L42+16
 463 004a 1268     		ldr	r2, [r2]
 464 004c 9342     		cmp	r3, r2
 465 004e 01D9     		bls	.L39
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466              		.loc 1 1134 0 is_stmt 0 discriminator 1
 467 0050 124A     		ldr	r2, .L42+16
 468 0052 1360     		str	r3, [r2]
 469              	.L39:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 470              		.loc 1 1134 0 discriminator 3
 471 0054 03EB8303 		add	r3, r3, r3, lsl #2
 472 0058 9A00     		lsls	r2, r3, #2
 473 005a 211D     		adds	r1, r4, #4
ARM GAS  /tmp/ccYYaUhP.s 			page 83


 474 005c 1048     		ldr	r0, .L42+20
 475 005e 1044     		add	r0, r0, r2
 476 0060 FFF7FEFF 		bl	vListInsertEnd
 477              	.LVL48:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478              		.loc 1 1138 0 is_stmt 1 discriminator 3
 479 0064 FFF7FEFF 		bl	vPortExitCritical
 480              	.LVL49:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 481              		.loc 1 1140 0 discriminator 3
 482 0068 0A4B     		ldr	r3, .L42+8
 483 006a 1B68     		ldr	r3, [r3]
 484 006c 6BB1     		cbz	r3, .L36
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 485              		.loc 1 1144 0
 486 006e 084B     		ldr	r3, .L42+4
 487 0070 1B68     		ldr	r3, [r3]
 488 0072 DA6A     		ldr	r2, [r3, #44]
 489 0074 E36A     		ldr	r3, [r4, #44]
 490 0076 9A42     		cmp	r2, r3
 491 0078 07D2     		bcs	.L36
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 492              		.loc 1 1146 0
 493 007a 4FF08052 		mov	r2, #268435456
 494 007e 094B     		ldr	r3, .L42+24
 495 0080 1A60     		str	r2, [r3]
 496              		.syntax unified
 497              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 498 0082 BFF34F8F 		dsb
 499              	@ 0 "" 2
 500              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 501 0086 BFF36F8F 		isb
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505              	.L36:
 506 008a 10BD     		pop	{r4, pc}
 507              	.LVL50:
 508              	.L43:
 509              		.align	2
 510              	.L42:
 511 008c 00000000 		.word	.LANCHOR9
 512 0090 00000000 		.word	.LANCHOR10
 513 0094 00000000 		.word	.LANCHOR11
 514 0098 00000000 		.word	.LANCHOR12
 515 009c 00000000 		.word	.LANCHOR13
 516 00a0 00000000 		.word	.LANCHOR4
 517 00a4 04ED00E0 		.word	-536810236
 518              		.cfi_endproc
 519              	.LFE7:
 521              		.section	.text.prvDeleteTCB,"ax",%progbits
 522              		.align	2
 523              		.thumb
 524              		.thumb_func
 526              	prvDeleteTCB:
 527              	.LFB49:
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
ARM GAS  /tmp/ccYYaUhP.s 			page 84


 528              		.loc 1 3888 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              	.LVL51:
 533 0000 10B5     		push	{r4, lr}
 534              	.LCFI3:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 4, -8
 537              		.cfi_offset 14, -4
 538 0002 0446     		mov	r4, r0
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 539              		.loc 1 3916 0
 540 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 541 0008 33B9     		cbnz	r3, .L45
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 542              		.loc 1 3920 0
 543 000a 006B     		ldr	r0, [r0, #48]
 544              	.LVL52:
 545 000c FFF7FEFF 		bl	vPortFree
 546              	.LVL53:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 547              		.loc 1 3921 0
 548 0010 2046     		mov	r0, r4
 549 0012 FFF7FEFF 		bl	vPortFree
 550              	.LVL54:
 551 0016 10BD     		pop	{r4, pc}
 552              	.LVL55:
 553              	.L45:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 554              		.loc 1 3923 0
 555 0018 012B     		cmp	r3, #1
 556 001a 02D1     		bne	.L47
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 557              		.loc 1 3927 0
 558 001c FFF7FEFF 		bl	vPortFree
 559              	.LVL56:
 560 0020 10BD     		pop	{r4, pc}
 561              	.LVL57:
 562              	.L47:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 563              		.loc 1 3933 0
 564 0022 022B     		cmp	r3, #2
 565 0024 08D0     		beq	.L44
 566              	.LBB121:
 567              	.LBB122:
 568              		.loc 2 195 0
 569              		.syntax unified
 570              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 571 0026 4FF05003 			mov r3, #80												
 572 002a 83F31188 		msr basepri, r3											
 573 002e BFF36F8F 		isb														
 574 0032 BFF34F8F 		dsb														
 575              	
 576              	@ 0 "" 2
 577              	.LVL58:
 578              		.thumb
ARM GAS  /tmp/ccYYaUhP.s 			page 85


 579              		.syntax unified
 580              	.L48:
 581 0036 FEE7     		b	.L48
 582              	.L44:
 583 0038 10BD     		pop	{r4, pc}
 584              	.LBE122:
 585              	.LBE121:
 586              		.cfi_endproc
 587              	.LFE49:
 589 003a 00BF     		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 590              		.align	2
 591              		.thumb
 592              		.thumb_func
 594              	prvCheckTasksWaitingTermination:
 595              	.LFB44:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 596              		.loc 1 3640 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600 0000 10B5     		push	{r4, lr}
 601              	.LCFI4:
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 4, -8
 604              		.cfi_offset 14, -4
 605              	.LBB123:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606              		.loc 1 3650 0
 607 0002 14E0     		b	.L51
 608              	.L52:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609              		.loc 1 3652 0
 610 0004 FFF7FEFF 		bl	vPortEnterCritical
 611              	.LVL59:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 612              		.loc 1 3654 0
 613 0008 0B4B     		ldr	r3, .L54
 614 000a DB68     		ldr	r3, [r3, #12]
 615 000c DC68     		ldr	r4, [r3, #12]
 616              	.LVL60:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 617              		.loc 1 3655 0
 618 000e 201D     		adds	r0, r4, #4
 619 0010 FFF7FEFF 		bl	uxListRemove
 620              	.LVL61:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 621              		.loc 1 3656 0
 622 0014 094A     		ldr	r2, .L54+4
 623 0016 1368     		ldr	r3, [r2]
 624 0018 013B     		subs	r3, r3, #1
 625 001a 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 626              		.loc 1 3657 0
 627 001c 084A     		ldr	r2, .L54+8
 628 001e 1368     		ldr	r3, [r2]
 629 0020 013B     		subs	r3, r3, #1
 630 0022 1360     		str	r3, [r2]
ARM GAS  /tmp/ccYYaUhP.s 			page 86


3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631              		.loc 1 3659 0
 632 0024 FFF7FEFF 		bl	vPortExitCritical
 633              	.LVL62:
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 634              		.loc 1 3661 0
 635 0028 2046     		mov	r0, r4
 636 002a FFF7FEFF 		bl	prvDeleteTCB
 637              	.LVL63:
 638              	.L51:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 639              		.loc 1 3650 0
 640 002e 044B     		ldr	r3, .L54+8
 641 0030 1B68     		ldr	r3, [r3]
 642 0032 002B     		cmp	r3, #0
 643 0034 E6D1     		bne	.L52
 644              	.LBE123:
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 645              		.loc 1 3665 0
 646 0036 10BD     		pop	{r4, pc}
 647              	.L55:
 648              		.align	2
 649              	.L54:
 650 0038 00000000 		.word	.LANCHOR7
 651 003c 00000000 		.word	.LANCHOR9
 652 0040 00000000 		.word	.LANCHOR14
 653              		.cfi_endproc
 654              	.LFE44:
 656              		.section	.text.prvIdleTask,"ax",%progbits
 657              		.align	2
 658              		.thumb
 659              		.thumb_func
 661              	prvIdleTask:
 662              	.LFB42:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 663              		.loc 1 3393 0
 664              		.cfi_startproc
 665              		@ Volatile: function does not return.
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL64:
 669 0000 08B5     		push	{r3, lr}
 670              	.LCFI5:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 3, -8
 673              		.cfi_offset 14, -4
 674              	.LVL65:
 675              	.L57:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676              		.loc 1 3409 0
 677 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 678              	.LVL66:
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 679              		.loc 1 3432 0
 680 0006 064B     		ldr	r3, .L60
 681 0008 1B68     		ldr	r3, [r3]
 682 000a 012B     		cmp	r3, #1
ARM GAS  /tmp/ccYYaUhP.s 			page 87


 683 000c F9D9     		bls	.L57
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 684              		.loc 1 3434 0
 685 000e 4FF08052 		mov	r2, #268435456
 686 0012 044B     		ldr	r3, .L60+4
 687 0014 1A60     		str	r2, [r3]
 688              		.syntax unified
 689              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 690 0016 BFF34F8F 		dsb
 691              	@ 0 "" 2
 692              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 693 001a BFF36F8F 		isb
 694              	@ 0 "" 2
 695              		.thumb
 696              		.syntax unified
 697 001e F0E7     		b	.L57
 698              	.L61:
 699              		.align	2
 700              	.L60:
 701 0020 00000000 		.word	.LANCHOR4
 702 0024 04ED00E0 		.word	-536810236
 703              		.cfi_endproc
 704              	.LFE42:
 706              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 707              		.align	2
 708              		.thumb
 709              		.thumb_func
 711              	prvAddCurrentTaskToDelayedList:
 712              	.LFB65:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
ARM GAS  /tmp/ccYYaUhP.s 			page 88


3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
ARM GAS  /tmp/ccYYaUhP.s 			page 89


4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
ARM GAS  /tmp/ccYYaUhP.s 			page 90


4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccYYaUhP.s 			page 91


4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
ARM GAS  /tmp/ccYYaUhP.s 			page 92


4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccYYaUhP.s 			page 93


4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccYYaUhP.s 			page 94


4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  /tmp/ccYYaUhP.s 			page 95


4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
ARM GAS  /tmp/ccYYaUhP.s 			page 96


4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
ARM GAS  /tmp/ccYYaUhP.s 			page 97


4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
ARM GAS  /tmp/ccYYaUhP.s 			page 98


4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 99


4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 100


4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccYYaUhP.s 			page 101


4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 102


4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  /tmp/ccYYaUhP.s 			page 103


4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccYYaUhP.s 			page 104


4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccYYaUhP.s 			page 105


4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  /tmp/ccYYaUhP.s 			page 106


5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccYYaUhP.s 			page 107


5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
ARM GAS  /tmp/ccYYaUhP.s 			page 108


5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 713              		.loc 1 5178 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717              	.LVL67:
 718 0000 70B5     		push	{r4, r5, r6, lr}
 719              	.LCFI6:
 720              		.cfi_def_cfa_offset 16
 721              		.cfi_offset 4, -16
ARM GAS  /tmp/ccYYaUhP.s 			page 109


 722              		.cfi_offset 5, -12
 723              		.cfi_offset 6, -8
 724              		.cfi_offset 14, -4
 725 0002 0446     		mov	r4, r0
 726 0004 0E46     		mov	r6, r1
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 727              		.loc 1 5180 0
 728 0006 174B     		ldr	r3, .L67
 729 0008 1D68     		ldr	r5, [r3]
 730              	.LVL68:
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 731              		.loc 1 5193 0
 732 000a 174B     		ldr	r3, .L67+4
 733 000c 1868     		ldr	r0, [r3]
 734              	.LVL69:
 735 000e 0430     		adds	r0, r0, #4
 736 0010 FFF7FEFF 		bl	uxListRemove
 737              	.LVL70:
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 738              		.loc 1 5206 0
 739 0014 B4F1FF3F 		cmp	r4, #-1
 740 0018 07D1     		bne	.L63
 741              		.loc 1 5206 0 is_stmt 0 discriminator 1
 742 001a 36B1     		cbz	r6, .L63
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 743              		.loc 1 5211 0 is_stmt 1
 744 001c 124B     		ldr	r3, .L67+4
 745 001e 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 110


 746 0020 0431     		adds	r1, r1, #4
 747 0022 1248     		ldr	r0, .L67+8
 748 0024 FFF7FEFF 		bl	vListInsertEnd
 749              	.LVL71:
 750 0028 70BD     		pop	{r4, r5, r6, pc}
 751              	.LVL72:
 752              	.L63:
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 753              		.loc 1 5218 0
 754 002a 2C44     		add	r4, r4, r5
 755              	.LVL73:
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 756              		.loc 1 5221 0
 757 002c 0E4B     		ldr	r3, .L67+4
 758 002e 1B68     		ldr	r3, [r3]
 759 0030 5C60     		str	r4, [r3, #4]
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 760              		.loc 1 5223 0
 761 0032 A542     		cmp	r5, r4
 762 0034 07D9     		bls	.L65
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 763              		.loc 1 5227 0
 764 0036 0E4B     		ldr	r3, .L67+12
 765 0038 1868     		ldr	r0, [r3]
 766 003a 0B4B     		ldr	r3, .L67+4
 767 003c 1968     		ldr	r1, [r3]
 768 003e 0431     		adds	r1, r1, #4
 769 0040 FFF7FEFF 		bl	vListInsert
 770              	.LVL74:
 771 0044 70BD     		pop	{r4, r5, r6, pc}
 772              	.LVL75:
 773              	.L65:
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 774              		.loc 1 5233 0
 775 0046 0B4B     		ldr	r3, .L67+16
 776 0048 1868     		ldr	r0, [r3]
 777 004a 074B     		ldr	r3, .L67+4
 778 004c 1968     		ldr	r1, [r3]
 779 004e 0431     		adds	r1, r1, #4
 780 0050 FFF7FEFF 		bl	vListInsert
ARM GAS  /tmp/ccYYaUhP.s 			page 111


 781              	.LVL76:
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 782              		.loc 1 5238 0
 783 0054 084B     		ldr	r3, .L67+20
 784 0056 1B68     		ldr	r3, [r3]
 785 0058 9C42     		cmp	r4, r3
 786 005a 01D2     		bcs	.L62
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 787              		.loc 1 5240 0
 788 005c 064B     		ldr	r3, .L67+20
 789 005e 1C60     		str	r4, [r3]
 790              	.L62:
 791 0060 70BD     		pop	{r4, r5, r6, pc}
 792              	.LVL77:
 793              	.L68:
 794 0062 00BF     		.align	2
 795              	.L67:
 796 0064 00000000 		.word	.LANCHOR15
 797 0068 00000000 		.word	.LANCHOR10
 798 006c 00000000 		.word	.LANCHOR0
 799 0070 00000000 		.word	.LANCHOR8
 800 0074 00000000 		.word	.LANCHOR2
 801 0078 00000000 		.word	.LANCHOR3
 802              		.cfi_endproc
 803              	.LFE65:
 805              		.section	.text.xTaskCreateStatic,"ax",%progbits
 806              		.align	2
 807              		.global	xTaskCreateStatic
 808              		.thumb
 809              		.thumb_func
 811              	xTaskCreateStatic:
 812              	.LFB4:
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 813              		.loc 1 588 0
 814              		.cfi_startproc
 815              		@ args = 12, pretend = 0, frame = 8
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              	.LVL78:
 818 0000 70B5     		push	{r4, r5, r6, lr}
 819              	.LCFI7:
 820              		.cfi_def_cfa_offset 16
 821              		.cfi_offset 4, -16
 822              		.cfi_offset 5, -12
 823              		.cfi_offset 6, -8
 824              		.cfi_offset 14, -4
 825 0002 86B0     		sub	sp, sp, #24
 826              	.LCFI8:
 827              		.cfi_def_cfa_offset 40
 828 0004 0B9D     		ldr	r5, [sp, #44]
 829 0006 0C9C     		ldr	r4, [sp, #48]
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 830              		.loc 1 592 0
ARM GAS  /tmp/ccYYaUhP.s 			page 112


 831 0008 45B9     		cbnz	r5, .L70
 832              	.LBB124:
 833              	.LBB125:
 834              		.loc 2 195 0
 835              		.syntax unified
 836              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 837 000a 4FF05003 			mov r3, #80												
 838 000e 83F31188 		msr basepri, r3											
 839 0012 BFF36F8F 		isb														
 840 0016 BFF34F8F 		dsb														
 841              	
 842              	@ 0 "" 2
 843              	.LVL79:
 844              		.thumb
 845              		.syntax unified
 846              	.L71:
 847 001a FEE7     		b	.L71
 848              	.LVL80:
 849              	.L70:
 850              	.LBE125:
 851              	.LBE124:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 852              		.loc 1 593 0
 853 001c 44B9     		cbnz	r4, .L72
 854              	.LBB126:
 855              	.LBB127:
 856              		.loc 2 195 0
 857              		.syntax unified
 858              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 859 001e 4FF05003 			mov r3, #80												
 860 0022 83F31188 		msr basepri, r3											
 861 0026 BFF36F8F 		isb														
 862 002a BFF34F8F 		dsb														
 863              	
 864              	@ 0 "" 2
 865              	.LVL81:
 866              		.thumb
 867              		.syntax unified
 868              	.L73:
 869 002e FEE7     		b	.L73
 870              	.LVL82:
 871              	.L72:
 872              	.LBE127:
 873              	.LBE126:
 874              	.LBB128:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 875              		.loc 1 600 0
 876 0030 5C26     		movs	r6, #92
 877 0032 0496     		str	r6, [sp, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 878              		.loc 1 601 0
 879 0034 049E     		ldr	r6, [sp, #16]
 880 0036 5C2E     		cmp	r6, #92
 881 0038 08D0     		beq	.L74
 882              	.LBB129:
 883              	.LBB130:
 884              		.loc 2 195 0
ARM GAS  /tmp/ccYYaUhP.s 			page 113


 885              		.syntax unified
 886              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 887 003a 4FF05003 			mov r3, #80												
 888 003e 83F31188 		msr basepri, r3											
 889 0042 BFF36F8F 		isb														
 890 0046 BFF34F8F 		dsb														
 891              	
 892              	@ 0 "" 2
 893              	.LVL83:
 894              		.thumb
 895              		.syntax unified
 896              	.L75:
 897 004a FEE7     		b	.L75
 898              	.LVL84:
 899              	.L74:
 900              	.LBE130:
 901              	.LBE129:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 902              		.loc 1 602 0
 903 004c 049E     		ldr	r6, [sp, #16]
 904              	.LBE128:
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 905              		.loc 1 607 0
 906 004e 8CB1     		cbz	r4, .L76
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 907              		.loc 1 607 0 is_stmt 0 discriminator 1
 908 0050 85B1     		cbz	r5, .L76
 909              	.LVL85:
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 910              		.loc 1 612 0 is_stmt 1
 911 0052 2563     		str	r5, [r4, #48]
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 912              		.loc 1 618 0
 913 0054 0225     		movs	r5, #2
 914 0056 84F85950 		strb	r5, [r4, #89]
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 915              		.loc 1 622 0
 916 005a 0025     		movs	r5, #0
 917 005c 0395     		str	r5, [sp, #12]
 918 005e 0294     		str	r4, [sp, #8]
 919 0060 05AD     		add	r5, sp, #20
 920 0062 0195     		str	r5, [sp, #4]
 921 0064 0A9D     		ldr	r5, [sp, #40]
 922 0066 0095     		str	r5, [sp]
 923 0068 FFF7FEFF 		bl	prvInitialiseNewTask
 924              	.LVL86:
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 925              		.loc 1 623 0
 926 006c 2046     		mov	r0, r4
 927 006e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 928              	.LVL87:
 929 0072 01E0     		b	.L77
 930              	.LVL88:
 931              	.L76:
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 932              		.loc 1 627 0
 933 0074 0023     		movs	r3, #0
ARM GAS  /tmp/ccYYaUhP.s 			page 114


 934              	.LVL89:
 935 0076 0593     		str	r3, [sp, #20]
 936              	.LVL90:
 937              	.L77:
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938              		.loc 1 631 0
 939 0078 0598     		ldr	r0, [sp, #20]
 940 007a 06B0     		add	sp, sp, #24
 941              	.LCFI9:
 942              		.cfi_def_cfa_offset 16
 943              		@ sp needed
 944 007c 70BD     		pop	{r4, r5, r6, pc}
 945              		.cfi_endproc
 946              	.LFE4:
 948 007e 00BF     		.section	.text.xTaskCreate,"ax",%progbits
 949              		.align	2
 950              		.global	xTaskCreate
 951              		.thumb
 952              		.thumb_func
 954              	xTaskCreate:
 955              	.LFB5:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 956              		.loc 1 739 0
 957              		.cfi_startproc
 958              		@ args = 8, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL91:
 961 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 962              	.LCFI10:
 963              		.cfi_def_cfa_offset 28
 964              		.cfi_offset 4, -28
 965              		.cfi_offset 5, -24
 966              		.cfi_offset 6, -20
 967              		.cfi_offset 7, -16
 968              		.cfi_offset 8, -12
 969              		.cfi_offset 9, -8
 970              		.cfi_offset 14, -4
 971 0004 85B0     		sub	sp, sp, #20
 972              	.LCFI11:
 973              		.cfi_def_cfa_offset 48
 974 0006 0646     		mov	r6, r0
 975 0008 0F46     		mov	r7, r1
 976 000a 1546     		mov	r5, r2
 977 000c 9846     		mov	r8, r3
 978              	.LBB131:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 979              		.loc 1 773 0
 980 000e 9000     		lsls	r0, r2, #2
 981              	.LVL92:
 982 0010 FFF7FEFF 		bl	pvPortMalloc
 983              	.LVL93:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 984              		.loc 1 775 0
 985 0014 60B1     		cbz	r0, .L83
 986 0016 8146     		mov	r9, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987              		.loc 1 778 0
ARM GAS  /tmp/ccYYaUhP.s 			page 115


 988 0018 5C20     		movs	r0, #92
 989              	.LVL94:
 990 001a FFF7FEFF 		bl	pvPortMalloc
 991              	.LVL95:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 992              		.loc 1 780 0
 993 001e 0446     		mov	r4, r0
 994 0020 10B1     		cbz	r0, .L81
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 995              		.loc 1 783 0
 996 0022 C0F83090 		str	r9, [r0, #48]
 997 0026 04E0     		b	.L80
 998              	.L81:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999              		.loc 1 789 0
 1000 0028 4846     		mov	r0, r9
 1001              	.LVL96:
 1002 002a FFF7FEFF 		bl	vPortFree
 1003              	.LVL97:
 1004 002e 00E0     		b	.L80
 1005              	.LVL98:
 1006              	.L83:
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1007              		.loc 1 794 0
 1008 0030 0024     		movs	r4, #0
 1009              	.LVL99:
 1010              	.L80:
 1011              	.LBE131:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1012              		.loc 1 799 0
 1013 0032 9CB1     		cbz	r4, .L84
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1014              		.loc 1 805 0
 1015 0034 0023     		movs	r3, #0
 1016 0036 84F85930 		strb	r3, [r4, #89]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1017              		.loc 1 809 0
 1018 003a 0393     		str	r3, [sp, #12]
 1019 003c 0294     		str	r4, [sp, #8]
 1020 003e 0D9B     		ldr	r3, [sp, #52]
 1021 0040 0193     		str	r3, [sp, #4]
 1022 0042 0C9B     		ldr	r3, [sp, #48]
 1023 0044 0093     		str	r3, [sp]
 1024 0046 4346     		mov	r3, r8
 1025 0048 2A46     		mov	r2, r5
 1026 004a 3946     		mov	r1, r7
 1027 004c 3046     		mov	r0, r6
 1028 004e FFF7FEFF 		bl	prvInitialiseNewTask
 1029              	.LVL100:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1030              		.loc 1 810 0
 1031 0052 2046     		mov	r0, r4
 1032 0054 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1033              	.LVL101:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1034              		.loc 1 811 0
 1035 0058 0120     		movs	r0, #1
ARM GAS  /tmp/ccYYaUhP.s 			page 116


 1036 005a 01E0     		b	.L82
 1037              	.LVL102:
 1038              	.L84:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1039              		.loc 1 815 0
 1040 005c 4FF0FF30 		mov	r0, #-1
 1041              	.L82:
 1042              	.LVL103:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1043              		.loc 1 819 0
 1044 0060 05B0     		add	sp, sp, #20
 1045              	.LCFI12:
 1046              		.cfi_def_cfa_offset 28
 1047              		@ sp needed
 1048 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1049              		.cfi_endproc
 1050              	.LFE5:
 1052 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1053              		.align	2
 1054              		.global	vTaskDelete
 1055              		.thumb
 1056              		.thumb_func
 1058              	vTaskDelete:
 1059              	.LFB8:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1060              		.loc 1 1163 0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064              	.LVL104:
 1065 0000 38B5     		push	{r3, r4, r5, lr}
 1066              	.LCFI13:
 1067              		.cfi_def_cfa_offset 16
 1068              		.cfi_offset 3, -16
 1069              		.cfi_offset 4, -12
 1070              		.cfi_offset 5, -8
 1071              		.cfi_offset 14, -4
 1072 0002 0446     		mov	r4, r0
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1073              		.loc 1 1166 0
 1074 0004 FFF7FEFF 		bl	vPortEnterCritical
 1075              	.LVL105:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1076              		.loc 1 1170 0
 1077 0008 0CB9     		cbnz	r4, .L87
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1078              		.loc 1 1170 0 is_stmt 0 discriminator 1
 1079 000a 224B     		ldr	r3, .L95
 1080 000c 1C68     		ldr	r4, [r3]
 1081              	.LVL106:
 1082              	.L87:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1083              		.loc 1 1173 0 is_stmt 1 discriminator 4
 1084 000e 251D     		adds	r5, r4, #4
 1085 0010 2846     		mov	r0, r5
 1086 0012 FFF7FEFF 		bl	uxListRemove
 1087              	.LVL107:
ARM GAS  /tmp/ccYYaUhP.s 			page 117


1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1088              		.loc 1 1183 0 discriminator 4
 1089 0016 A36A     		ldr	r3, [r4, #40]
 1090 0018 1BB1     		cbz	r3, .L88
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1091              		.loc 1 1185 0
 1092 001a 04F11800 		add	r0, r4, #24
 1093 001e FFF7FEFF 		bl	uxListRemove
 1094              	.LVL108:
 1095              	.L88:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1096              		.loc 1 1196 0
 1097 0022 1D4A     		ldr	r2, .L95+4
 1098 0024 1368     		ldr	r3, [r2]
 1099 0026 0133     		adds	r3, r3, #1
 1100 0028 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1101              		.loc 1 1198 0
 1102 002a 1A4B     		ldr	r3, .L95
 1103 002c 1B68     		ldr	r3, [r3]
 1104 002e 9C42     		cmp	r4, r3
 1105 0030 08D1     		bne	.L89
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1106              		.loc 1 1205 0
 1107 0032 2946     		mov	r1, r5
 1108 0034 1948     		ldr	r0, .L95+8
 1109 0036 FFF7FEFF 		bl	vListInsertEnd
 1110              	.LVL109:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1111              		.loc 1 1210 0
 1112 003a 194A     		ldr	r2, .L95+12
 1113 003c 1368     		ldr	r3, [r2]
 1114 003e 0133     		adds	r3, r3, #1
 1115 0040 1360     		str	r3, [r2]
 1116 0042 08E0     		b	.L90
 1117              	.L89:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1118              		.loc 1 1225 0
 1119 0044 174A     		ldr	r2, .L95+16
 1120 0046 1368     		ldr	r3, [r2]
 1121 0048 013B     		subs	r3, r3, #1
 1122 004a 1360     		str	r3, [r2]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1123              		.loc 1 1227 0
 1124 004c 2046     		mov	r0, r4
 1125 004e FFF7FEFF 		bl	prvDeleteTCB
 1126              	.LVL110:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1127              		.loc 1 1231 0
 1128 0052 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1129              	.LVL111:
 1130              	.L90:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1131              		.loc 1 1234 0
 1132 0056 FFF7FEFF 		bl	vPortExitCritical
 1133              	.LVL112:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccYYaUhP.s 			page 118


 1134              		.loc 1 1238 0
 1135 005a 134B     		ldr	r3, .L95+20
 1136 005c 1B68     		ldr	r3, [r3]
 1137 005e BBB1     		cbz	r3, .L86
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1138              		.loc 1 1240 0
 1139 0060 0C4B     		ldr	r3, .L95
 1140 0062 1B68     		ldr	r3, [r3]
 1141 0064 9C42     		cmp	r4, r3
 1142 0066 13D1     		bne	.L86
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1143              		.loc 1 1242 0
 1144 0068 104B     		ldr	r3, .L95+24
 1145 006a 1B68     		ldr	r3, [r3]
 1146 006c 43B1     		cbz	r3, .L92
 1147              	.LBB132:
 1148              	.LBB133:
 1149              		.loc 2 195 0
 1150              		.syntax unified
 1151              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1152 006e 4FF05003 			mov r3, #80												
 1153 0072 83F31188 		msr basepri, r3											
 1154 0076 BFF36F8F 		isb														
 1155 007a BFF34F8F 		dsb														
 1156              	
 1157              	@ 0 "" 2
 1158              	.LVL113:
 1159              		.thumb
 1160              		.syntax unified
 1161              	.L93:
 1162 007e FEE7     		b	.L93
 1163              	.L92:
 1164              	.LBE133:
 1165              	.LBE132:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1166              		.loc 1 1243 0
 1167 0080 4FF08052 		mov	r2, #268435456
 1168 0084 0A4B     		ldr	r3, .L95+28
 1169 0086 1A60     		str	r2, [r3]
 1170              		.syntax unified
 1171              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1172 0088 BFF34F8F 		dsb
 1173              	@ 0 "" 2
 1174              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1175 008c BFF36F8F 		isb
 1176              	@ 0 "" 2
 1177              		.thumb
 1178              		.syntax unified
 1179              	.L86:
 1180 0090 38BD     		pop	{r3, r4, r5, pc}
 1181              	.LVL114:
 1182              	.L96:
 1183 0092 00BF     		.align	2
 1184              	.L95:
 1185 0094 00000000 		.word	.LANCHOR10
 1186 0098 00000000 		.word	.LANCHOR12
 1187 009c 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccYYaUhP.s 			page 119


 1188 00a0 00000000 		.word	.LANCHOR14
 1189 00a4 00000000 		.word	.LANCHOR9
 1190 00a8 00000000 		.word	.LANCHOR11
 1191 00ac 00000000 		.word	.LANCHOR16
 1192 00b0 04ED00E0 		.word	-536810236
 1193              		.cfi_endproc
 1194              	.LFE8:
 1196              		.section	.text.eTaskGetState,"ax",%progbits
 1197              		.align	2
 1198              		.global	eTaskGetState
 1199              		.thumb
 1200              		.thumb_func
 1202              	eTaskGetState:
 1203              	.LFB11:
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1204              		.loc 1 1387 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              	.LVL115:
 1209 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1210              	.LCFI14:
 1211              		.cfi_def_cfa_offset 24
 1212              		.cfi_offset 3, -24
 1213              		.cfi_offset 4, -20
 1214              		.cfi_offset 5, -16
 1215              		.cfi_offset 6, -12
 1216              		.cfi_offset 7, -8
 1217              		.cfi_offset 14, -4
 1218              	.LVL116:
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1219              		.loc 1 1392 0
 1220 0002 40B9     		cbnz	r0, .L98
 1221              	.LBB134:
 1222              	.LBB135:
 1223              		.loc 2 195 0
 1224              		.syntax unified
 1225              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1226 0004 4FF05003 			mov r3, #80												
 1227 0008 83F31188 		msr basepri, r3											
 1228 000c BFF36F8F 		isb														
 1229 0010 BFF34F8F 		dsb														
 1230              	
 1231              	@ 0 "" 2
 1232              	.LVL117:
 1233              		.thumb
 1234              		.syntax unified
 1235              	.L99:
 1236 0014 FEE7     		b	.L99
 1237              	.L98:
 1238 0016 0446     		mov	r4, r0
 1239              	.LBE135:
 1240              	.LBE134:
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1241              		.loc 1 1394 0
 1242 0018 184B     		ldr	r3, .L110
 1243 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 120


 1244 001c 9842     		cmp	r0, r3
 1245 001e 1ED0     		beq	.L102
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1246              		.loc 1 1401 0
 1247 0020 FFF7FEFF 		bl	vPortEnterCritical
 1248              	.LVL118:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1249              		.loc 1 1403 0
 1250 0024 6569     		ldr	r5, [r4, #20]
 1251              	.LVL119:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1252              		.loc 1 1404 0
 1253 0026 164B     		ldr	r3, .L110+4
 1254 0028 1F68     		ldr	r7, [r3]
 1255              	.LVL120:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1256              		.loc 1 1405 0
 1257 002a 164B     		ldr	r3, .L110+8
 1258 002c 1E68     		ldr	r6, [r3]
 1259              	.LVL121:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1260              		.loc 1 1407 0
 1261 002e FFF7FEFF 		bl	vPortExitCritical
 1262              	.LVL122:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1263              		.loc 1 1409 0
 1264 0032 BD42     		cmp	r5, r7
 1265 0034 15D0     		beq	.L103
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1266              		.loc 1 1409 0 is_stmt 0 discriminator 1
 1267 0036 B542     		cmp	r5, r6
 1268 0038 15D0     		beq	.L104
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1269              		.loc 1 1417 0 is_stmt 1
 1270 003a 134B     		ldr	r3, .L110+12
 1271 003c 9D42     		cmp	r5, r3
 1272 003e 08D1     		bne	.L101
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1273              		.loc 1 1422 0
 1274 0040 A36A     		ldr	r3, [r4, #40]
 1275 0042 93B9     		cbnz	r3, .L105
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1276              		.loc 1 1430 0
 1277 0044 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1278 0048 DBB2     		uxtb	r3, r3
 1279 004a 012B     		cmp	r3, #1
 1280 004c 0FD1     		bne	.L106
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1281              		.loc 1 1432 0
 1282 004e 0220     		movs	r0, #2
 1283 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1284              	.LVL123:
 1285              	.L101:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1286              		.loc 1 1453 0
 1287 0052 0E4B     		ldr	r3, .L110+16
 1288 0054 9D42     		cmp	r5, r3
ARM GAS  /tmp/ccYYaUhP.s 			page 121


 1289 0056 0CD0     		beq	.L107
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1290              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1291 0058 6DB9     		cbnz	r5, .L108
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1292              		.loc 1 1458 0 is_stmt 1
 1293 005a 0420     		movs	r0, #4
 1294 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1295              	.LVL124:
 1296              	.L102:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1297              		.loc 1 1397 0
 1298 005e 0020     		movs	r0, #0
 1299              	.LVL125:
 1300 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1301              	.LVL126:
 1302              	.L103:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1303              		.loc 1 1413 0
 1304 0062 0220     		movs	r0, #2
 1305 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1306              	.LVL127:
 1307              	.L104:
 1308 0066 0220     		movs	r0, #2
 1309 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1310              	.LVL128:
 1311              	.L105:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1312              		.loc 1 1447 0
 1313 006a 0220     		movs	r0, #2
 1314 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1315              	.LVL129:
 1316              	.L106:
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1317              		.loc 1 1436 0
 1318 006e 0320     		movs	r0, #3
 1319 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1320              	.LVL130:
 1321              	.L107:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1322              		.loc 1 1458 0
 1323 0072 0420     		movs	r0, #4
 1324 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1325              	.LVL131:
 1326              	.L108:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1327              		.loc 1 1466 0
 1328 0076 0120     		movs	r0, #1
 1329              	.LVL132:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1330              		.loc 1 1471 0
 1331 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1332              	.LVL133:
 1333              	.L111:
 1334 007a 00BF     		.align	2
 1335              	.L110:
 1336 007c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccYYaUhP.s 			page 122


 1337 0080 00000000 		.word	.LANCHOR2
 1338 0084 00000000 		.word	.LANCHOR8
 1339 0088 00000000 		.word	.LANCHOR0
 1340 008c 00000000 		.word	.LANCHOR7
 1341              		.cfi_endproc
 1342              	.LFE11:
 1344              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1345              		.align	2
 1346              		.global	uxTaskPriorityGet
 1347              		.thumb
 1348              		.thumb_func
 1350              	uxTaskPriorityGet:
 1351              	.LFB12:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1352              		.loc 1 1479 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356              	.LVL134:
 1357 0000 10B5     		push	{r4, lr}
 1358              	.LCFI15:
 1359              		.cfi_def_cfa_offset 8
 1360              		.cfi_offset 4, -8
 1361              		.cfi_offset 14, -4
 1362 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1363              		.loc 1 1483 0
 1364 0004 FFF7FEFF 		bl	vPortEnterCritical
 1365              	.LVL135:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1366              		.loc 1 1487 0
 1367 0008 0CB9     		cbnz	r4, .L113
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1368              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1369 000a 034B     		ldr	r3, .L116
 1370 000c 1C68     		ldr	r4, [r3]
 1371              	.LVL136:
 1372              	.L113:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1373              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1374 000e E46A     		ldr	r4, [r4, #44]
 1375              	.LVL137:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1376              		.loc 1 1490 0 discriminator 4
 1377 0010 FFF7FEFF 		bl	vPortExitCritical
 1378              	.LVL138:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1379              		.loc 1 1493 0 discriminator 4
 1380 0014 2046     		mov	r0, r4
 1381 0016 10BD     		pop	{r4, pc}
 1382              	.LVL139:
 1383              	.L117:
 1384              		.align	2
 1385              	.L116:
 1386 0018 00000000 		.word	.LANCHOR10
 1387              		.cfi_endproc
 1388              	.LFE12:
ARM GAS  /tmp/ccYYaUhP.s 			page 123


 1390              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1391              		.align	2
 1392              		.global	uxTaskPriorityGetFromISR
 1393              		.thumb
 1394              		.thumb_func
 1396              	uxTaskPriorityGetFromISR:
 1397              	.LFB13:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1398              		.loc 1 1501 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402              	.LVL140:
 1403 0000 10B5     		push	{r4, lr}
 1404              	.LCFI16:
 1405              		.cfi_def_cfa_offset 8
 1406              		.cfi_offset 4, -8
 1407              		.cfi_offset 14, -4
 1408 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1409              		.loc 1 1521 0
 1410 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1411              	.LVL141:
 1412              	.LBB136:
 1413              	.LBB137:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1414              		.loc 2 211 0
 1415              		.syntax unified
 1416              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1417 0008 EFF31183 			mrs r3, basepri											
 1418 000c 4FF05002 		mov r2, #80												
 1419 0010 82F31188 		msr basepri, r2											
 1420 0014 BFF36F8F 		isb														
 1421 0018 BFF34F8F 		dsb														
 1422              	
 1423              	@ 0 "" 2
 1424              		.thumb
 1425              		.syntax unified
 1426              	.LBE137:
 1427              	.LBE136:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1428              		.loc 1 1527 0
ARM GAS  /tmp/ccYYaUhP.s 			page 124


 1429 001c 0CB9     		cbnz	r4, .L119
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1430              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1431 001e 034A     		ldr	r2, .L122
 1432 0020 1468     		ldr	r4, [r2]
 1433              	.LVL142:
 1434              	.L119:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1435              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1436 0022 E06A     		ldr	r0, [r4, #44]
 1437              	.LVL143:
 1438              	.LBB138:
 1439              	.LBB139:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1440              		.loc 2 229 0 discriminator 4
 1441              		.syntax unified
 1442              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1443 0024 83F31188 			msr basepri, r3	
 1444              	@ 0 "" 2
 1445              	.LVL144:
 1446              		.thumb
 1447              		.syntax unified
 1448              	.LBE139:
 1449              	.LBE138:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1450              		.loc 1 1533 0 discriminator 4
 1451 0028 10BD     		pop	{r4, pc}
 1452              	.LVL145:
 1453              	.L123:
 1454 002a 00BF     		.align	2
 1455              	.L122:
 1456 002c 00000000 		.word	.LANCHOR10
 1457              		.cfi_endproc
 1458              	.LFE13:
 1460              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1461              		.align	2
 1462              		.global	vTaskPrioritySet
 1463              		.thumb
 1464              		.thumb_func
 1466              	vTaskPrioritySet:
ARM GAS  /tmp/ccYYaUhP.s 			page 125


 1467              	.LFB14:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1468              		.loc 1 1541 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              	.LVL146:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1473              		.loc 1 1546 0
 1474 0000 3729     		cmp	r1, #55
 1475 0002 08D9     		bls	.L125
 1476              	.LBB140:
 1477              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1478              		.loc 2 195 0
 1479              		.syntax unified
 1480              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1481 0004 4FF05003 			mov r3, #80												
 1482 0008 83F31188 		msr basepri, r3											
 1483 000c BFF36F8F 		isb														
 1484 0010 BFF34F8F 		dsb														
 1485              	
 1486              	@ 0 "" 2
 1487              	.LVL147:
 1488              		.thumb
 1489              		.syntax unified
 1490              	.L126:
 1491 0014 FEE7     		b	.L126
 1492              	.L125:
 1493              	.LBE141:
 1494              	.LBE140:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1495              		.loc 1 1541 0
 1496 0016 70B5     		push	{r4, r5, r6, lr}
 1497              	.LCFI17:
 1498              		.cfi_def_cfa_offset 16
 1499              		.cfi_offset 4, -16
 1500              		.cfi_offset 5, -12
 1501              		.cfi_offset 6, -8
 1502              		.cfi_offset 14, -4
 1503 0018 0446     		mov	r4, r0
 1504 001a 0D46     		mov	r5, r1
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1505              		.loc 1 1549 0
 1506 001c 3729     		cmp	r1, #55
 1507 001e 00D9     		bls	.L127
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1508              		.loc 1 1551 0
 1509 0020 3725     		movs	r5, #55
 1510              	.L127:
 1511              	.LVL148:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1512              		.loc 1 1558 0
 1513 0022 FFF7FEFF 		bl	vPortEnterCritical
 1514              	.LVL149:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1515              		.loc 1 1562 0
ARM GAS  /tmp/ccYYaUhP.s 			page 126


 1516 0026 0CB9     		cbnz	r4, .L128
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1517              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1518 0028 264B     		ldr	r3, .L141
 1519 002a 1C68     		ldr	r4, [r3]
 1520              	.LVL150:
 1521              	.L128:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1522              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1523 002c E26C     		ldr	r2, [r4, #76]
 1524              	.LVL151:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1525              		.loc 1 1576 0 discriminator 4
 1526 002e 9542     		cmp	r5, r2
 1527 0030 45D0     		beq	.L129
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1528              		.loc 1 1580 0
 1529 0032 0AD9     		bls	.L130
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1530              		.loc 1 1582 0
 1531 0034 234B     		ldr	r3, .L141
 1532 0036 1B68     		ldr	r3, [r3]
 1533 0038 9C42     		cmp	r4, r3
 1534 003a 0CD0     		beq	.L137
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1535              		.loc 1 1587 0
 1536 003c 214B     		ldr	r3, .L141
 1537 003e 1B68     		ldr	r3, [r3]
 1538 0040 DB6A     		ldr	r3, [r3, #44]
 1539 0042 9D42     		cmp	r5, r3
 1540 0044 09D2     		bcs	.L138
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1541              		.loc 1 1544 0
 1542 0046 0026     		movs	r6, #0
 1543 0048 0AE0     		b	.L131
 1544              	.L130:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1545              		.loc 1 1603 0
 1546 004a 1E4B     		ldr	r3, .L141
 1547 004c 1B68     		ldr	r3, [r3]
 1548 004e 9C42     		cmp	r4, r3
 1549 0050 05D0     		beq	.L139
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1550              		.loc 1 1544 0
 1551 0052 0026     		movs	r6, #0
 1552 0054 04E0     		b	.L131
 1553              	.L137:
 1554 0056 0026     		movs	r6, #0
 1555 0058 02E0     		b	.L131
 1556              	.L138:
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1557              		.loc 1 1589 0
 1558 005a 0126     		movs	r6, #1
 1559 005c 00E0     		b	.L131
 1560              	.L139:
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1561              		.loc 1 1608 0
ARM GAS  /tmp/ccYYaUhP.s 			page 127


 1562 005e 0126     		movs	r6, #1
 1563              	.L131:
 1564              	.LVL152:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1565              		.loc 1 1620 0
 1566 0060 E36A     		ldr	r3, [r4, #44]
 1567              	.LVL153:
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1568              		.loc 1 1626 0
 1569 0062 9A42     		cmp	r2, r3
 1570 0064 00D1     		bne	.L132
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1571              		.loc 1 1628 0
 1572 0066 E562     		str	r5, [r4, #44]
 1573              	.L132:
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1574              		.loc 1 1636 0
 1575 0068 E564     		str	r5, [r4, #76]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1576              		.loc 1 1646 0
 1577 006a A269     		ldr	r2, [r4, #24]
 1578              	.LVL154:
 1579 006c 002A     		cmp	r2, #0
 1580 006e 02DB     		blt	.L133
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1581              		.loc 1 1648 0
 1582 0070 C5F13805 		rsb	r5, r5, #56
 1583              	.LVL155:
 1584 0074 A561     		str	r5, [r4, #24]
 1585              	.L133:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1586              		.loc 1 1659 0
 1587 0076 6169     		ldr	r1, [r4, #20]
 1588 0078 03EB8303 		add	r3, r3, r3, lsl #2
 1589              	.LVL156:
 1590 007c 9A00     		lsls	r2, r3, #2
 1591 007e 124B     		ldr	r3, .L141+4
 1592 0080 1A44     		add	r2, r2, r3
 1593 0082 9142     		cmp	r1, r2
 1594 0084 12D1     		bne	.L134
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1595              		.loc 1 1664 0
 1596 0086 251D     		adds	r5, r4, #4
 1597 0088 2846     		mov	r0, r5
 1598 008a FFF7FEFF 		bl	uxListRemove
 1599              	.LVL157:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1600              		.loc 1 1675 0
 1601 008e E36A     		ldr	r3, [r4, #44]
 1602 0090 0E4A     		ldr	r2, .L141+8
 1603 0092 1268     		ldr	r2, [r2]
 1604 0094 9342     		cmp	r3, r2
 1605 0096 01D9     		bls	.L135
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1606              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1607 0098 0C4A     		ldr	r2, .L141+8
 1608 009a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccYYaUhP.s 			page 128


 1609              	.L135:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1610              		.loc 1 1675 0 discriminator 3
 1611 009c 03EB8303 		add	r3, r3, r3, lsl #2
 1612 00a0 9A00     		lsls	r2, r3, #2
 1613 00a2 2946     		mov	r1, r5
 1614 00a4 0848     		ldr	r0, .L141+4
 1615 00a6 1044     		add	r0, r0, r2
 1616 00a8 FFF7FEFF 		bl	vListInsertEnd
 1617              	.LVL158:
 1618              	.L134:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1619              		.loc 1 1682 0 is_stmt 1
 1620 00ac 3EB1     		cbz	r6, .L129
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1621              		.loc 1 1684 0
 1622 00ae 4FF08052 		mov	r2, #268435456
 1623 00b2 074B     		ldr	r3, .L141+12
 1624 00b4 1A60     		str	r2, [r3]
 1625              		.syntax unified
 1626              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1627 00b6 BFF34F8F 		dsb
 1628              	@ 0 "" 2
 1629              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1630 00ba BFF36F8F 		isb
 1631              	@ 0 "" 2
 1632              	.LVL159:
 1633              		.thumb
 1634              		.syntax unified
 1635              	.L129:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1636              		.loc 1 1696 0
 1637 00be FFF7FEFF 		bl	vPortExitCritical
 1638              	.LVL160:
 1639 00c2 70BD     		pop	{r4, r5, r6, pc}
 1640              	.LVL161:
 1641              	.L142:
 1642              		.align	2
 1643              	.L141:
 1644 00c4 00000000 		.word	.LANCHOR10
 1645 00c8 00000000 		.word	.LANCHOR4
 1646 00cc 00000000 		.word	.LANCHOR13
 1647 00d0 04ED00E0 		.word	-536810236
 1648              		.cfi_endproc
 1649              	.LFE14:
 1651              		.section	.text.vTaskResume,"ax",%progbits
 1652              		.align	2
 1653              		.global	vTaskResume
 1654              		.thumb
 1655              		.thumb_func
 1657              	vTaskResume:
 1658              	.LFB17:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1659              		.loc 1 1852 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYYaUhP.s 			page 129


 1663              	.LVL162:
 1664 0000 38B5     		push	{r3, r4, r5, lr}
 1665              	.LCFI18:
 1666              		.cfi_def_cfa_offset 16
 1667              		.cfi_offset 3, -16
 1668              		.cfi_offset 4, -12
 1669              		.cfi_offset 5, -8
 1670              		.cfi_offset 14, -4
 1671              	.LVL163:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1672              		.loc 1 1856 0
 1673 0002 40B9     		cbnz	r0, .L144
 1674              	.LBB142:
 1675              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1676              		.loc 2 195 0
 1677              		.syntax unified
 1678              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1679 0004 4FF05003 			mov r3, #80												
 1680 0008 83F31188 		msr basepri, r3											
 1681 000c BFF36F8F 		isb														
 1682 0010 BFF34F8F 		dsb														
 1683              	
 1684              	@ 0 "" 2
 1685              	.LVL164:
 1686              		.thumb
 1687              		.syntax unified
 1688              	.L145:
 1689 0014 FEE7     		b	.L145
 1690              	.L144:
 1691 0016 0446     		mov	r4, r0
 1692              	.LBE143:
 1693              	.LBE142:
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1694              		.loc 1 1860 0
 1695 0018 174B     		ldr	r3, .L150
 1696 001a 1B68     		ldr	r3, [r3]
 1697 001c 9842     		cmp	r0, r3
 1698 001e 29D0     		beq	.L143
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1699              		.loc 1 1860 0 is_stmt 0 discriminator 1
 1700 0020 40B3     		cbz	r0, .L143
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1701              		.loc 1 1862 0 is_stmt 1
 1702 0022 FFF7FEFF 		bl	vPortEnterCritical
 1703              	.LVL165:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1704              		.loc 1 1864 0
 1705 0026 2046     		mov	r0, r4
 1706 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1707              	.LVL166:
 1708 002c 00B3     		cbz	r0, .L147
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1709              		.loc 1 1870 0
 1710 002e 251D     		adds	r5, r4, #4
 1711 0030 2846     		mov	r0, r5
 1712 0032 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccYYaUhP.s 			page 130


 1713              	.LVL167:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1714              		.loc 1 1871 0
 1715 0036 E36A     		ldr	r3, [r4, #44]
 1716 0038 104A     		ldr	r2, .L150+4
 1717 003a 1268     		ldr	r2, [r2]
 1718 003c 9342     		cmp	r3, r2
 1719 003e 01D9     		bls	.L148
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1720              		.loc 1 1871 0 is_stmt 0 discriminator 1
 1721 0040 0E4A     		ldr	r2, .L150+4
 1722 0042 1360     		str	r3, [r2]
 1723              	.L148:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1724              		.loc 1 1871 0 discriminator 3
 1725 0044 03EB8303 		add	r3, r3, r3, lsl #2
 1726 0048 9A00     		lsls	r2, r3, #2
 1727 004a 2946     		mov	r1, r5
 1728 004c 0C48     		ldr	r0, .L150+8
 1729 004e 1044     		add	r0, r0, r2
 1730 0050 FFF7FEFF 		bl	vListInsertEnd
 1731              	.LVL168:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1732              		.loc 1 1874 0 is_stmt 1 discriminator 3
 1733 0054 E26A     		ldr	r2, [r4, #44]
 1734 0056 084B     		ldr	r3, .L150
 1735 0058 1B68     		ldr	r3, [r3]
 1736 005a DB6A     		ldr	r3, [r3, #44]
 1737 005c 9A42     		cmp	r2, r3
 1738 005e 07D3     		bcc	.L147
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1739              		.loc 1 1879 0
 1740 0060 4FF08052 		mov	r2, #268435456
 1741 0064 074B     		ldr	r3, .L150+12
 1742 0066 1A60     		str	r2, [r3]
 1743              		.syntax unified
 1744              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1745 0068 BFF34F8F 		dsb
 1746              	@ 0 "" 2
 1747              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1748 006c BFF36F8F 		isb
 1749              	@ 0 "" 2
 1750              		.thumb
 1751              		.syntax unified
 1752              	.L147:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1753              		.loc 1 1891 0
 1754 0070 FFF7FEFF 		bl	vPortExitCritical
 1755              	.LVL169:
 1756              	.L143:
 1757 0074 38BD     		pop	{r3, r4, r5, pc}
 1758              	.LVL170:
 1759              	.L151:
 1760 0076 00BF     		.align	2
 1761              	.L150:
 1762 0078 00000000 		.word	.LANCHOR10
 1763 007c 00000000 		.word	.LANCHOR13
ARM GAS  /tmp/ccYYaUhP.s 			page 131


 1764 0080 00000000 		.word	.LANCHOR4
 1765 0084 04ED00E0 		.word	-536810236
 1766              		.cfi_endproc
 1767              	.LFE17:
 1769              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1770              		.align	2
 1771              		.global	xTaskResumeFromISR
 1772              		.thumb
 1773              		.thumb_func
 1775              	xTaskResumeFromISR:
 1776              	.LFB18:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1777              		.loc 1 1906 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
 1781              	.LVL171:
 1782 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1783              	.LCFI19:
 1784              		.cfi_def_cfa_offset 24
 1785              		.cfi_offset 3, -24
 1786              		.cfi_offset 4, -20
 1787              		.cfi_offset 5, -16
 1788              		.cfi_offset 6, -12
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791              	.LVL172:
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1792              		.loc 1 1911 0
 1793 0002 40B9     		cbnz	r0, .L153
 1794              	.LBB144:
 1795              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1796              		.loc 2 195 0
 1797              		.syntax unified
 1798              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1799 0004 4FF05003 			mov r3, #80												
 1800 0008 83F31188 		msr basepri, r3											
 1801 000c BFF36F8F 		isb														
 1802 0010 BFF34F8F 		dsb														
 1803              	
 1804              	@ 0 "" 2
 1805              	.LVL173:
 1806              		.thumb
 1807              		.syntax unified
 1808              	.L154:
 1809 0014 FEE7     		b	.L154
 1810              	.L153:
 1811 0016 0446     		mov	r4, r0
 1812              	.LBE145:
 1813              	.LBE144:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1814              		.loc 1 1929 0
 1815 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1816              	.LVL174:
 1817              	.LBB146:
 1818              	.LBB147:
ARM GAS  /tmp/ccYYaUhP.s 			page 132


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1819              		.loc 2 211 0
 1820              		.syntax unified
 1821              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1822 001c EFF31187 			mrs r7, basepri											
 1823 0020 4FF05003 		mov r3, #80												
 1824 0024 83F31188 		msr basepri, r3											
 1825 0028 BFF36F8F 		isb														
 1826 002c BFF34F8F 		dsb														
 1827              	
 1828              	@ 0 "" 2
 1829              		.thumb
 1830              		.syntax unified
 1831              	.LBE147:
 1832              	.LBE146:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1833              		.loc 1 1933 0
 1834 0030 2046     		mov	r0, r4
 1835 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1836              	.LVL175:
 1837 0036 30B3     		cbz	r0, .L159
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1838              		.loc 1 1938 0
 1839 0038 154B     		ldr	r3, .L162
 1840 003a 1B68     		ldr	r3, [r3]
 1841 003c E3B9     		cbnz	r3, .L156
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1842              		.loc 1 1942 0
 1843 003e E26A     		ldr	r2, [r4, #44]
 1844 0040 144B     		ldr	r3, .L162+4
 1845 0042 1B68     		ldr	r3, [r3]
 1846 0044 DB6A     		ldr	r3, [r3, #44]
 1847 0046 9A42     		cmp	r2, r3
 1848 0048 01D2     		bcs	.L160
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1849              		.loc 1 1907 0
 1850 004a 0025     		movs	r5, #0
 1851 004c 00E0     		b	.L157
 1852              	.L160:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1853              		.loc 1 1944 0
 1854 004e 0125     		movs	r5, #1
 1855              	.L157:
 1856              	.LVL176:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1857              		.loc 1 1951 0
 1858 0050 261D     		adds	r6, r4, #4
 1859 0052 3046     		mov	r0, r6
 1860 0054 FFF7FEFF 		bl	uxListRemove
 1861              	.LVL177:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1862              		.loc 1 1952 0
 1863 0058 E36A     		ldr	r3, [r4, #44]
 1864 005a 0F4A     		ldr	r2, .L162+8
 1865 005c 1268     		ldr	r2, [r2]
 1866 005e 9342     		cmp	r3, r2
 1867 0060 01D9     		bls	.L158
ARM GAS  /tmp/ccYYaUhP.s 			page 133


1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1868              		.loc 1 1952 0 is_stmt 0 discriminator 1
 1869 0062 0D4A     		ldr	r2, .L162+8
 1870 0064 1360     		str	r3, [r2]
 1871              	.L158:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1872              		.loc 1 1952 0 discriminator 3
 1873 0066 03EB8303 		add	r3, r3, r3, lsl #2
 1874 006a 9A00     		lsls	r2, r3, #2
 1875 006c 3146     		mov	r1, r6
 1876 006e 0B48     		ldr	r0, .L162+12
 1877 0070 1044     		add	r0, r0, r2
 1878 0072 FFF7FEFF 		bl	vListInsertEnd
 1879              	.LVL178:
 1880 0076 07E0     		b	.L155
 1881              	.LVL179:
 1882              	.L156:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1883              		.loc 1 1959 0 is_stmt 1
 1884 0078 04F11801 		add	r1, r4, #24
 1885 007c 0848     		ldr	r0, .L162+16
 1886 007e FFF7FEFF 		bl	vListInsertEnd
 1887              	.LVL180:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1888              		.loc 1 1907 0
 1889 0082 0025     		movs	r5, #0
 1890 0084 00E0     		b	.L155
 1891              	.L159:
 1892 0086 0025     		movs	r5, #0
 1893              	.LVL181:
 1894              	.L155:
 1895              	.LBB148:
 1896              	.LBB149:
 1897              		.loc 2 229 0
 1898              		.syntax unified
 1899              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1900 0088 87F31188 			msr basepri, r7	
 1901              	@ 0 "" 2
 1902              	.LVL182:
 1903              		.thumb
 1904              		.syntax unified
 1905              	.LBE149:
 1906              	.LBE148:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1907              		.loc 1 1970 0
 1908 008c 2846     		mov	r0, r5
 1909 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1910              	.LVL183:
 1911              	.L163:
 1912              		.align	2
 1913              	.L162:
 1914 0090 00000000 		.word	.LANCHOR16
 1915 0094 00000000 		.word	.LANCHOR10
 1916 0098 00000000 		.word	.LANCHOR13
 1917 009c 00000000 		.word	.LANCHOR4
 1918 00a0 00000000 		.word	.LANCHOR1
 1919              		.cfi_endproc
ARM GAS  /tmp/ccYYaUhP.s 			page 134


 1920              	.LFE18:
 1922              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1923              		.align	2
 1924              		.global	vTaskStartScheduler
 1925              		.thumb
 1926              		.thumb_func
 1928              	vTaskStartScheduler:
 1929              	.LFB19:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1930              		.loc 1 1976 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 16
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934 0000 10B5     		push	{r4, lr}
 1935              	.LCFI20:
 1936              		.cfi_def_cfa_offset 8
 1937              		.cfi_offset 4, -8
 1938              		.cfi_offset 14, -4
 1939 0002 88B0     		sub	sp, sp, #32
 1940              	.LCFI21:
 1941              		.cfi_def_cfa_offset 40
 1942              	.LBB150:
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1943              		.loc 1 1982 0
 1944 0004 0024     		movs	r4, #0
 1945 0006 0594     		str	r4, [sp, #20]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1946              		.loc 1 1983 0
 1947 0008 0694     		str	r4, [sp, #24]
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1948              		.loc 1 1988 0
 1949 000a 07AA     		add	r2, sp, #28
 1950 000c 06A9     		add	r1, sp, #24
 1951 000e 05A8     		add	r0, sp, #20
 1952 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1953              	.LVL184:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1954              		.loc 1 1989 0
 1955 0014 059B     		ldr	r3, [sp, #20]
 1956 0016 0293     		str	r3, [sp, #8]
 1957 0018 069B     		ldr	r3, [sp, #24]
 1958 001a 0193     		str	r3, [sp, #4]
 1959 001c 0094     		str	r4, [sp]
 1960 001e 2346     		mov	r3, r4
 1961 0020 079A     		ldr	r2, [sp, #28]
 1962 0022 1849     		ldr	r1, .L172
 1963 0024 1848     		ldr	r0, .L172+4
 1964 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1965              	.LVL185:
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1966              		.loc 1 1997 0
 1967 002a 08B1     		cbz	r0, .L170
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1968              		.loc 1 1999 0
 1969 002c 0120     		movs	r0, #1
 1970 002e 00E0     		b	.L165
 1971              	.L170:
ARM GAS  /tmp/ccYYaUhP.s 			page 135


2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1972              		.loc 1 2003 0
 1973 0030 0020     		movs	r0, #0
 1974              	.L165:
 1975              	.LVL186:
 1976              	.LBE150:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1977              		.loc 1 2020 0
 1978 0032 0128     		cmp	r0, #1
 1979 0034 01D1     		bne	.L166
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1980              		.loc 1 2022 0
 1981 0036 FFF7FEFF 		bl	xTimerCreateTimerTask
 1982              	.LVL187:
 1983              	.L166:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1984              		.loc 1 2031 0
 1985 003a 0128     		cmp	r0, #1
 1986 003c 14D1     		bne	.L167
 1987              	.LBB151:
 1988              	.LBB152:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1989              		.loc 2 195 0
 1990              		.syntax unified
 1991              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1992 003e 4FF05003 			mov r3, #80												
 1993 0042 83F31188 		msr basepri, r3											
 1994 0046 BFF36F8F 		isb														
 1995 004a BFF34F8F 		dsb														
 1996              	
 1997              	@ 0 "" 2
 1998              		.thumb
 1999              		.syntax unified
 2000              	.LBE152:
 2001              	.LBE151:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2002              		.loc 1 2059 0
 2003 004e 4FF0FF32 		mov	r2, #-1
 2004 0052 0E4B     		ldr	r3, .L172+8
 2005 0054 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2006              		.loc 1 2060 0
 2007 0056 0122     		movs	r2, #1
 2008 0058 0D4B     		ldr	r3, .L172+12
 2009 005a 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2010              		.loc 1 2061 0
 2011 005c 0022     		movs	r2, #0
 2012 005e 0D4B     		ldr	r3, .L172+16
 2013 0060 1A60     		str	r2, [r3]
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2014              		.loc 1 2075 0
 2015 0062 FFF7FEFF 		bl	xPortStartScheduler
 2016              	.LVL188:
 2017 0066 0BE0     		b	.L164
 2018              	.LVL189:
 2019              	.L167:
ARM GAS  /tmp/ccYYaUhP.s 			page 136


2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2020              		.loc 1 2090 0
 2021 0068 B0F1FF3F 		cmp	r0, #-1
 2022 006c 08D1     		bne	.L164
 2023              	.LBB153:
 2024              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2025              		.loc 2 195 0
 2026              		.syntax unified
 2027              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2028 006e 4FF05003 			mov r3, #80												
 2029 0072 83F31188 		msr basepri, r3											
 2030 0076 BFF36F8F 		isb														
 2031 007a BFF34F8F 		dsb														
 2032              	
 2033              	@ 0 "" 2
 2034              	.LVL190:
 2035              		.thumb
 2036              		.syntax unified
 2037              	.L169:
 2038 007e FEE7     		b	.L169
 2039              	.LVL191:
 2040              	.L164:
 2041              	.LBE154:
 2042              	.LBE153:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2043              		.loc 1 2096 0
 2044 0080 08B0     		add	sp, sp, #32
 2045              	.LCFI22:
 2046              		.cfi_def_cfa_offset 8
 2047              		@ sp needed
 2048 0082 10BD     		pop	{r4, pc}
 2049              	.L173:
 2050              		.align	2
 2051              	.L172:
 2052 0084 00000000 		.word	.LC0
 2053 0088 00000000 		.word	prvIdleTask
 2054 008c 00000000 		.word	.LANCHOR3
 2055 0090 00000000 		.word	.LANCHOR11
 2056 0094 00000000 		.word	.LANCHOR15
 2057              		.cfi_endproc
 2058              	.LFE19:
 2060              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2061              		.align	2
 2062              		.global	vTaskEndScheduler
 2063              		.thumb
 2064              		.thumb_func
 2066              	vTaskEndScheduler:
 2067              	.LFB20:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2068              		.loc 1 2100 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072 0000 08B5     		push	{r3, lr}
 2073              	.LCFI23:
 2074              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccYYaUhP.s 			page 137


 2075              		.cfi_offset 3, -8
 2076              		.cfi_offset 14, -4
 2077              	.LBB155:
 2078              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2079              		.loc 2 195 0
 2080              		.syntax unified
 2081              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2082 0002 4FF05003 			mov r3, #80												
 2083 0006 83F31188 		msr basepri, r3											
 2084 000a BFF36F8F 		isb														
 2085 000e BFF34F8F 		dsb														
 2086              	
 2087              	@ 0 "" 2
 2088              		.thumb
 2089              		.syntax unified
 2090              	.LBE156:
 2091              	.LBE155:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2092              		.loc 1 2105 0
 2093 0012 0022     		movs	r2, #0
 2094 0014 024B     		ldr	r3, .L176
 2095 0016 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2096              		.loc 1 2106 0
 2097 0018 FFF7FEFF 		bl	vPortEndScheduler
 2098              	.LVL192:
 2099 001c 08BD     		pop	{r3, pc}
 2100              	.L177:
 2101 001e 00BF     		.align	2
 2102              	.L176:
 2103 0020 00000000 		.word	.LANCHOR11
 2104              		.cfi_endproc
 2105              	.LFE20:
 2107              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2108              		.align	2
 2109              		.global	vTaskSuspendAll
 2110              		.thumb
 2111              		.thumb_func
 2113              	vTaskSuspendAll:
 2114              	.LFB21:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2115              		.loc 1 2111 0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 0
 2118              		@ frame_needed = 0, uses_anonymous_args = 0
 2119              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2120              		.loc 1 2123 0
 2121 0000 024A     		ldr	r2, .L179
 2122 0002 1368     		ldr	r3, [r2]
 2123 0004 0133     		adds	r3, r3, #1
 2124 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2125              		.loc 1 2127 0
 2126 0008 7047     		bx	lr
 2127              	.L180:
ARM GAS  /tmp/ccYYaUhP.s 			page 138


 2128 000a 00BF     		.align	2
 2129              	.L179:
 2130 000c 00000000 		.word	.LANCHOR16
 2131              		.cfi_endproc
 2132              	.LFE21:
 2134              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2135              		.align	2
 2136              		.global	xTaskGetTickCount
 2137              		.thumb
 2138              		.thumb_func
 2140              	xTaskGetTickCount:
 2141              	.LFB23:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2142              		.loc 1 2305 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 0
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2147              		.loc 1 2311 0
 2148 0000 014B     		ldr	r3, .L182
 2149 0002 1868     		ldr	r0, [r3]
 2150              	.LVL193:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2151              		.loc 1 2316 0
 2152 0004 7047     		bx	lr
 2153              	.L183:
 2154 0006 00BF     		.align	2
 2155              	.L182:
 2156 0008 00000000 		.word	.LANCHOR15
 2157              		.cfi_endproc
 2158              	.LFE23:
 2160              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2161              		.align	2
 2162              		.global	xTaskGetTickCountFromISR
 2163              		.thumb
 2164              		.thumb_func
 2166              	xTaskGetTickCountFromISR:
 2167              	.LFB24:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2168              		.loc 1 2320 0
 2169              		.cfi_startproc
 2170              		@ args = 0, pretend = 0, frame = 0
 2171              		@ frame_needed = 0, uses_anonymous_args = 0
 2172 0000 08B5     		push	{r3, lr}
 2173              	.LCFI24:
 2174              		.cfi_def_cfa_offset 8
 2175              		.cfi_offset 3, -8
 2176              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2177              		.loc 1 2338 0
 2178 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2179              	.LVL194:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2180              		.loc 1 2342 0
 2181 0006 014B     		ldr	r3, .L186
 2182 0008 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 139


 2183              	.LVL195:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2184              		.loc 1 2347 0
 2185 000a 08BD     		pop	{r3, pc}
 2186              	.L187:
 2187              		.align	2
 2188              	.L186:
 2189 000c 00000000 		.word	.LANCHOR15
 2190              		.cfi_endproc
 2191              	.LFE24:
 2193              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2194              		.align	2
 2195              		.global	uxTaskGetNumberOfTasks
 2196              		.thumb
 2197              		.thumb_func
 2199              	uxTaskGetNumberOfTasks:
 2200              	.LFB25:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2201              		.loc 1 2351 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2206              		.loc 1 2354 0
 2207 0000 014B     		ldr	r3, .L189
 2208 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2209              		.loc 1 2355 0
 2210 0004 7047     		bx	lr
 2211              	.L190:
 2212 0006 00BF     		.align	2
 2213              	.L189:
 2214 0008 00000000 		.word	.LANCHOR9
 2215              		.cfi_endproc
 2216              	.LFE25:
 2218              		.section	.text.pcTaskGetName,"ax",%progbits
 2219              		.align	2
 2220              		.global	pcTaskGetName
 2221              		.thumb
 2222              		.thumb_func
 2224              	pcTaskGetName:
 2225              	.LFB26:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2226              		.loc 1 2359 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
 2231              	.LVL196:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2232              		.loc 1 2364 0
 2233 0000 0346     		mov	r3, r0
 2234 0002 08B9     		cbnz	r0, .L192
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2235              		.loc 1 2364 0 is_stmt 0 discriminator 1
 2236 0004 074B     		ldr	r3, .L195
ARM GAS  /tmp/ccYYaUhP.s 			page 140


 2237 0006 1B68     		ldr	r3, [r3]
 2238              	.LVL197:
 2239              	.L192:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2240              		.loc 1 2365 0 is_stmt 1 discriminator 4
 2241 0008 43B9     		cbnz	r3, .L193
 2242              	.LBB157:
 2243              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2244              		.loc 2 195 0
 2245              		.syntax unified
 2246              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2247 000a 4FF05003 			mov r3, #80												
 2248 000e 83F31188 		msr basepri, r3											
 2249 0012 BFF36F8F 		isb														
 2250 0016 BFF34F8F 		dsb														
 2251              	
 2252              	@ 0 "" 2
 2253              	.LVL198:
 2254              		.thumb
 2255              		.syntax unified
 2256              	.L194:
 2257 001a FEE7     		b	.L194
 2258              	.LVL199:
 2259              	.L193:
 2260              	.LBE158:
 2261              	.LBE157:
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2262              		.loc 1 2367 0
 2263 001c 03F13400 		add	r0, r3, #52
 2264 0020 7047     		bx	lr
 2265              	.L196:
 2266 0022 00BF     		.align	2
 2267              	.L195:
 2268 0024 00000000 		.word	.LANCHOR10
 2269              		.cfi_endproc
 2270              	.LFE26:
 2272              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2273              		.align	2
 2274              		.global	xTaskIncrementTick
 2275              		.thumb
 2276              		.thumb_func
 2278              	xTaskIncrementTick:
 2279              	.LFB29:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2280              		.loc 1 2708 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2285              	.LCFI25:
 2286              		.cfi_def_cfa_offset 24
 2287              		.cfi_offset 3, -24
 2288              		.cfi_offset 4, -20
 2289              		.cfi_offset 5, -16
 2290              		.cfi_offset 6, -12
 2291              		.cfi_offset 7, -8
ARM GAS  /tmp/ccYYaUhP.s 			page 141


 2292              		.cfi_offset 14, -4
 2293              	.LVL200:
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2294              		.loc 1 2717 0
 2295 0002 3B4B     		ldr	r3, .L217
 2296 0004 1B68     		ldr	r3, [r3]
 2297 0006 002B     		cmp	r3, #0
 2298 0008 68D1     		bne	.L198
 2299              	.LBB159:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2300              		.loc 1 2721 0
 2301 000a 3A4B     		ldr	r3, .L217+4
 2302 000c 1D68     		ldr	r5, [r3]
 2303 000e 0135     		adds	r5, r5, #1
 2304              	.LVL201:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 2725 0
 2306 0010 1D60     		str	r5, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2307              		.loc 1 2727 0
 2308 0012 C5B9     		cbnz	r5, .L199
 2309              	.LBB160:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2310              		.loc 1 2729 0
 2311 0014 384B     		ldr	r3, .L217+8
 2312 0016 1B68     		ldr	r3, [r3]
 2313 0018 1B68     		ldr	r3, [r3]
 2314 001a 43B1     		cbz	r3, .L200
 2315              	.LBB161:
 2316              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2317              		.loc 2 195 0
 2318              		.syntax unified
 2319              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2320 001c 4FF05003 			mov r3, #80												
 2321 0020 83F31188 		msr basepri, r3											
 2322 0024 BFF36F8F 		isb														
 2323 0028 BFF34F8F 		dsb														
 2324              	
 2325              	@ 0 "" 2
 2326              	.LVL202:
 2327              		.thumb
 2328              		.syntax unified
 2329              	.L201:
 2330 002c FEE7     		b	.L201
 2331              	.L200:
 2332              	.LBE162:
 2333              	.LBE161:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2334              		.loc 1 2729 0 discriminator 2
 2335 002e 324A     		ldr	r2, .L217+8
 2336 0030 1168     		ldr	r1, [r2]
 2337              	.LVL203:
 2338 0032 324B     		ldr	r3, .L217+12
 2339 0034 1868     		ldr	r0, [r3]
 2340 0036 1060     		str	r0, [r2]
 2341 0038 1960     		str	r1, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 142


 2342 003a 314A     		ldr	r2, .L217+16
 2343 003c 1368     		ldr	r3, [r2]
 2344 003e 0133     		adds	r3, r3, #1
 2345 0040 1360     		str	r3, [r2]
 2346 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2347              	.LVL204:
 2348              	.L199:
 2349              	.LBE160:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2350              		.loc 1 2740 0
 2351 0046 2F4B     		ldr	r3, .L217+20
 2352 0048 1B68     		ldr	r3, [r3]
 2353 004a 9D42     		cmp	r5, r3
 2354 004c 03D2     		bcs	.L212
 2355              	.LBE159:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2356              		.loc 1 2711 0
 2357 004e 0024     		movs	r4, #0
 2358 0050 35E0     		b	.L203
 2359              	.LVL205:
 2360              	.L213:
 2361              	.LBB163:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2362              		.loc 1 2806 0
 2363 0052 0124     		movs	r4, #1
 2364              	.LVL206:
 2365 0054 00E0     		b	.L202
 2366              	.LVL207:
 2367              	.L212:
 2368 0056 0024     		movs	r4, #0
 2369              	.LVL208:
 2370              	.L202:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2371              		.loc 1 2744 0
 2372 0058 274B     		ldr	r3, .L217+8
 2373 005a 1B68     		ldr	r3, [r3]
 2374 005c 1B68     		ldr	r3, [r3]
 2375 005e 23B9     		cbnz	r3, .L204
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2376              		.loc 1 2751 0
 2377 0060 4FF0FF32 		mov	r2, #-1
 2378 0064 274B     		ldr	r3, .L217+20
 2379 0066 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2380              		.loc 1 2752 0
 2381 0068 29E0     		b	.L203
 2382              	.L204:
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2383              		.loc 1 2760 0
 2384 006a 234B     		ldr	r3, .L217+8
 2385 006c 1B68     		ldr	r3, [r3]
 2386 006e DB68     		ldr	r3, [r3, #12]
 2387 0070 DE68     		ldr	r6, [r3, #12]
 2388              	.LVL209:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2389              		.loc 1 2761 0
 2390 0072 7368     		ldr	r3, [r6, #4]
ARM GAS  /tmp/ccYYaUhP.s 			page 143


 2391              	.LVL210:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2392              		.loc 1 2763 0
 2393 0074 9D42     		cmp	r5, r3
 2394 0076 02D2     		bcs	.L205
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2395              		.loc 1 2770 0
 2396 0078 224A     		ldr	r2, .L217+20
 2397 007a 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2398              		.loc 1 2771 0
 2399 007c 1FE0     		b	.L203
 2400              	.L205:
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2401              		.loc 1 2779 0
 2402 007e 371D     		adds	r7, r6, #4
 2403 0080 3846     		mov	r0, r7
 2404 0082 FFF7FEFF 		bl	uxListRemove
 2405              	.LVL211:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2406              		.loc 1 2783 0
 2407 0086 B36A     		ldr	r3, [r6, #40]
 2408 0088 1BB1     		cbz	r3, .L206
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2409              		.loc 1 2785 0
 2410 008a 06F11800 		add	r0, r6, #24
 2411 008e FFF7FEFF 		bl	uxListRemove
 2412              	.LVL212:
 2413              	.L206:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2414              		.loc 1 2794 0
 2415 0092 F36A     		ldr	r3, [r6, #44]
 2416 0094 1C4A     		ldr	r2, .L217+24
 2417 0096 1268     		ldr	r2, [r2]
 2418 0098 9342     		cmp	r3, r2
 2419 009a 01D9     		bls	.L207
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2420              		.loc 1 2794 0 is_stmt 0 discriminator 1
 2421 009c 1A4A     		ldr	r2, .L217+24
 2422 009e 1360     		str	r3, [r2]
 2423              	.L207:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2424              		.loc 1 2794 0 discriminator 3
 2425 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 2426 00a4 9A00     		lsls	r2, r3, #2
 2427 00a6 3946     		mov	r1, r7
 2428 00a8 1848     		ldr	r0, .L217+28
 2429 00aa 1044     		add	r0, r0, r2
 2430 00ac FFF7FEFF 		bl	vListInsertEnd
 2431              	.LVL213:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2432              		.loc 1 2804 0 is_stmt 1 discriminator 3
 2433 00b0 F26A     		ldr	r2, [r6, #44]
 2434 00b2 174B     		ldr	r3, .L217+32
 2435 00b4 1B68     		ldr	r3, [r3]
 2436 00b6 DB6A     		ldr	r3, [r3, #44]
 2437 00b8 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccYYaUhP.s 			page 144


 2438 00ba CAD2     		bcs	.L213
 2439 00bc CCE7     		b	.L202
 2440              	.LVL214:
 2441              	.L203:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2442              		.loc 1 2823 0
 2443 00be 144B     		ldr	r3, .L217+32
 2444 00c0 1B68     		ldr	r3, [r3]
 2445 00c2 DB6A     		ldr	r3, [r3, #44]
 2446 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 2447 00c8 9A00     		lsls	r2, r3, #2
 2448 00ca 104B     		ldr	r3, .L217+28
 2449 00cc 9B58     		ldr	r3, [r3, r2]
 2450 00ce 012B     		cmp	r3, #1
 2451 00d0 00D9     		bls	.L210
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2452              		.loc 1 2825 0
 2453 00d2 0124     		movs	r4, #1
 2454              	.LVL215:
 2455              	.L210:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2456              		.loc 1 2851 0
 2457 00d4 0F4B     		ldr	r3, .L217+36
 2458 00d6 1B68     		ldr	r3, [r3]
 2459 00d8 33B9     		cbnz	r3, .L215
 2460 00da 06E0     		b	.L211
 2461              	.LVL216:
 2462              	.L198:
 2463              	.LBE163:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2464              		.loc 1 2864 0
 2465 00dc 0E4A     		ldr	r2, .L217+40
 2466 00de 1368     		ldr	r3, [r2]
 2467 00e0 0133     		adds	r3, r3, #1
 2468 00e2 1360     		str	r3, [r2]
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2469              		.loc 1 2711 0
 2470 00e4 0024     		movs	r4, #0
 2471 00e6 00E0     		b	.L211
 2472              	.LVL217:
 2473              	.L215:
 2474              	.LBB164:
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2475              		.loc 1 2853 0
 2476 00e8 0124     		movs	r4, #1
 2477              	.LVL218:
 2478              	.L211:
 2479              	.LBE164:
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2480              		.loc 1 2876 0
 2481 00ea 2046     		mov	r0, r4
 2482 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2483              	.LVL219:
 2484              	.L218:
 2485 00ee 00BF     		.align	2
 2486              	.L217:
 2487 00f0 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccYYaUhP.s 			page 145


 2488 00f4 00000000 		.word	.LANCHOR15
 2489 00f8 00000000 		.word	.LANCHOR2
 2490 00fc 00000000 		.word	.LANCHOR8
 2491 0100 00000000 		.word	.LANCHOR17
 2492 0104 00000000 		.word	.LANCHOR3
 2493 0108 00000000 		.word	.LANCHOR13
 2494 010c 00000000 		.word	.LANCHOR4
 2495 0110 00000000 		.word	.LANCHOR10
 2496 0114 00000000 		.word	.LANCHOR18
 2497 0118 00000000 		.word	.LANCHOR19
 2498              		.cfi_endproc
 2499              	.LFE29:
 2501              		.section	.text.xTaskResumeAll,"ax",%progbits
 2502              		.align	2
 2503              		.global	xTaskResumeAll
 2504              		.thumb
 2505              		.thumb_func
 2507              	xTaskResumeAll:
 2508              	.LFB22:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2509              		.loc 1 2195 0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 2513 0000 38B5     		push	{r3, r4, r5, lr}
 2514              	.LCFI26:
 2515              		.cfi_def_cfa_offset 16
 2516              		.cfi_offset 3, -16
 2517              		.cfi_offset 4, -12
 2518              		.cfi_offset 5, -8
 2519              		.cfi_offset 14, -4
 2520              	.LVL220:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2521              		.loc 1 2201 0
 2522 0002 344B     		ldr	r3, .L235
 2523 0004 1B68     		ldr	r3, [r3]
 2524 0006 43B9     		cbnz	r3, .L220
 2525              	.LBB165:
 2526              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2527              		.loc 2 195 0
 2528              		.syntax unified
 2529              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2530 0008 4FF05003 			mov r3, #80												
 2531 000c 83F31188 		msr basepri, r3											
 2532 0010 BFF36F8F 		isb														
 2533 0014 BFF34F8F 		dsb														
 2534              	
 2535              	@ 0 "" 2
 2536              	.LVL221:
 2537              		.thumb
 2538              		.syntax unified
 2539              	.L221:
 2540 0018 FEE7     		b	.L221
 2541              	.L220:
 2542              	.LBE166:
 2543              	.LBE165:
ARM GAS  /tmp/ccYYaUhP.s 			page 146


2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2544              		.loc 1 2208 0
 2545 001a FFF7FEFF 		bl	vPortEnterCritical
 2546              	.LVL222:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2547              		.loc 1 2210 0
 2548 001e 2D4B     		ldr	r3, .L235
 2549 0020 1A68     		ldr	r2, [r3]
 2550 0022 013A     		subs	r2, r2, #1
 2551 0024 1A60     		str	r2, [r3]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2552              		.loc 1 2212 0
 2553 0026 1B68     		ldr	r3, [r3]
 2554 0028 002B     		cmp	r3, #0
 2555 002a 4BD1     		bne	.L231
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2556              		.loc 1 2214 0
 2557 002c 2A4B     		ldr	r3, .L235+4
 2558 002e 1B68     		ldr	r3, [r3]
 2559 0030 2BBB     		cbnz	r3, .L232
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2560              		.loc 1 2197 0
 2561 0032 0024     		movs	r4, #0
 2562 0034 49E0     		b	.L222
 2563              	.LVL223:
 2564              	.L226:
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2565              		.loc 1 2220 0
 2566 0036 294B     		ldr	r3, .L235+8
 2567 0038 DB68     		ldr	r3, [r3, #12]
 2568 003a DC68     		ldr	r4, [r3, #12]
 2569              	.LVL224:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2570              		.loc 1 2221 0
 2571 003c 04F11800 		add	r0, r4, #24
 2572 0040 FFF7FEFF 		bl	uxListRemove
 2573              	.LVL225:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2574              		.loc 1 2222 0
 2575 0044 251D     		adds	r5, r4, #4
 2576 0046 2846     		mov	r0, r5
 2577 0048 FFF7FEFF 		bl	uxListRemove
 2578              	.LVL226:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2579              		.loc 1 2223 0
 2580 004c E36A     		ldr	r3, [r4, #44]
 2581 004e 244A     		ldr	r2, .L235+12
 2582 0050 1268     		ldr	r2, [r2]
 2583 0052 9342     		cmp	r3, r2
 2584 0054 01D9     		bls	.L224
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2585              		.loc 1 2223 0 is_stmt 0 discriminator 1
 2586 0056 224A     		ldr	r2, .L235+12
 2587 0058 1360     		str	r3, [r2]
 2588              	.L224:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2589              		.loc 1 2223 0 discriminator 3
ARM GAS  /tmp/ccYYaUhP.s 			page 147


 2590 005a 03EB8303 		add	r3, r3, r3, lsl #2
 2591 005e 9A00     		lsls	r2, r3, #2
 2592 0060 2946     		mov	r1, r5
 2593 0062 2048     		ldr	r0, .L235+16
 2594 0064 1044     		add	r0, r0, r2
 2595 0066 FFF7FEFF 		bl	vListInsertEnd
 2596              	.LVL227:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2597              		.loc 1 2227 0 is_stmt 1 discriminator 3
 2598 006a E26A     		ldr	r2, [r4, #44]
 2599 006c 1E4B     		ldr	r3, .L235+20
 2600 006e 1B68     		ldr	r3, [r3]
 2601 0070 DB6A     		ldr	r3, [r3, #44]
 2602 0072 9A42     		cmp	r2, r3
 2603 0074 04D3     		bcc	.L223
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2604              		.loc 1 2229 0
 2605 0076 0122     		movs	r2, #1
 2606 0078 1C4B     		ldr	r3, .L235+24
 2607 007a 1A60     		str	r2, [r3]
 2608 007c 00E0     		b	.L223
 2609              	.LVL228:
 2610              	.L232:
 2611 007e 0024     		movs	r4, #0
 2612              	.LVL229:
 2613              	.L223:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2614              		.loc 1 2218 0
 2615 0080 164B     		ldr	r3, .L235+8
 2616 0082 1B68     		ldr	r3, [r3]
 2617 0084 002B     		cmp	r3, #0
 2618 0086 D6D1     		bne	.L226
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2619              		.loc 1 2237 0
 2620 0088 0CB1     		cbz	r4, .L227
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2621              		.loc 1 2245 0
 2622 008a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2623              	.LVL230:
 2624              	.L227:
 2625              	.LBB167:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2626              		.loc 1 2253 0
 2627 008e 184B     		ldr	r3, .L235+28
 2628 0090 1C68     		ldr	r4, [r3]
 2629              	.LVL231:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2630              		.loc 1 2255 0
 2631 0092 54B1     		cbz	r4, .L228
 2632              	.L230:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2633              		.loc 1 2259 0
 2634 0094 FFF7FEFF 		bl	xTaskIncrementTick
 2635              	.LVL232:
 2636 0098 10B1     		cbz	r0, .L229
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2637              		.loc 1 2261 0
ARM GAS  /tmp/ccYYaUhP.s 			page 148


 2638 009a 0122     		movs	r2, #1
 2639 009c 134B     		ldr	r3, .L235+24
 2640 009e 1A60     		str	r2, [r3]
 2641              	.L229:
 2642              	.LVL233:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2643              		.loc 1 2268 0
 2644 00a0 013C     		subs	r4, r4, #1
 2645              	.LVL234:
 2646 00a2 F7D1     		bne	.L230
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2647              		.loc 1 2270 0
 2648 00a4 0022     		movs	r2, #0
 2649 00a6 124B     		ldr	r3, .L235+28
 2650 00a8 1A60     		str	r2, [r3]
 2651              	.L228:
 2652              	.LBE167:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2653              		.loc 1 2278 0
 2654 00aa 104B     		ldr	r3, .L235+24
 2655 00ac 1B68     		ldr	r3, [r3]
 2656 00ae 5BB1     		cbz	r3, .L233
 2657              	.LVL235:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2658              		.loc 1 2285 0
 2659 00b0 4FF08052 		mov	r2, #268435456
 2660 00b4 0F4B     		ldr	r3, .L235+32
 2661 00b6 1A60     		str	r2, [r3]
 2662              		.syntax unified
 2663              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2664 00b8 BFF34F8F 		dsb
 2665              	@ 0 "" 2
 2666              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2667 00bc BFF36F8F 		isb
 2668              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2669              		.loc 1 2282 0
 2670              		.thumb
 2671              		.syntax unified
 2672 00c0 0124     		movs	r4, #1
 2673              	.LVL236:
 2674 00c2 02E0     		b	.L222
 2675              	.LVL237:
 2676              	.L231:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2677              		.loc 1 2197 0
 2678 00c4 0024     		movs	r4, #0
 2679 00c6 00E0     		b	.L222
 2680              	.LVL238:
 2681              	.L233:
 2682 00c8 0024     		movs	r4, #0
 2683              	.LVL239:
 2684              	.L222:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2685              		.loc 1 2298 0
 2686 00ca FFF7FEFF 		bl	vPortExitCritical
 2687              	.LVL240:
ARM GAS  /tmp/ccYYaUhP.s 			page 149


2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2688              		.loc 1 2301 0
 2689 00ce 2046     		mov	r0, r4
 2690 00d0 38BD     		pop	{r3, r4, r5, pc}
 2691              	.LVL241:
 2692              	.L236:
 2693 00d2 00BF     		.align	2
 2694              	.L235:
 2695 00d4 00000000 		.word	.LANCHOR16
 2696 00d8 00000000 		.word	.LANCHOR9
 2697 00dc 00000000 		.word	.LANCHOR1
 2698 00e0 00000000 		.word	.LANCHOR13
 2699 00e4 00000000 		.word	.LANCHOR4
 2700 00e8 00000000 		.word	.LANCHOR10
 2701 00ec 00000000 		.word	.LANCHOR18
 2702 00f0 00000000 		.word	.LANCHOR19
 2703 00f4 04ED00E0 		.word	-536810236
 2704              		.cfi_endproc
 2705              	.LFE22:
 2707              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2708              		.align	2
 2709              		.global	vTaskDelayUntil
 2710              		.thumb
 2711              		.thumb_func
 2713              	vTaskDelayUntil:
 2714              	.LFB9:
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2715              		.loc 1 1258 0
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 0
 2718              		@ frame_needed = 0, uses_anonymous_args = 0
 2719              	.LVL242:
 2720 0000 38B5     		push	{r3, r4, r5, lr}
 2721              	.LCFI27:
 2722              		.cfi_def_cfa_offset 16
 2723              		.cfi_offset 3, -16
 2724              		.cfi_offset 4, -12
 2725              		.cfi_offset 5, -8
 2726              		.cfi_offset 14, -4
 2727              	.LVL243:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2728              		.loc 1 1262 0
 2729 0002 40B9     		cbnz	r0, .L238
 2730              	.LBB168:
 2731              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2732              		.loc 2 195 0
 2733              		.syntax unified
 2734              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2735 0004 4FF05003 			mov r3, #80												
 2736 0008 83F31188 		msr basepri, r3											
 2737 000c BFF36F8F 		isb														
 2738 0010 BFF34F8F 		dsb														
 2739              	
 2740              	@ 0 "" 2
 2741              	.LVL244:
 2742              		.thumb
ARM GAS  /tmp/ccYYaUhP.s 			page 150


 2743              		.syntax unified
 2744              	.L239:
 2745 0014 FEE7     		b	.L239
 2746              	.L238:
 2747 0016 0546     		mov	r5, r0
 2748              	.LBE169:
 2749              	.LBE168:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2750              		.loc 1 1263 0
 2751 0018 41B9     		cbnz	r1, .L240
 2752              	.LBB170:
 2753              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2754              		.loc 2 195 0
 2755              		.syntax unified
 2756              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2757 001a 4FF05003 			mov r3, #80												
 2758 001e 83F31188 		msr basepri, r3											
 2759 0022 BFF36F8F 		isb														
 2760 0026 BFF34F8F 		dsb														
 2761              	
 2762              	@ 0 "" 2
 2763              	.LVL245:
 2764              		.thumb
 2765              		.syntax unified
 2766              	.L241:
 2767 002a FEE7     		b	.L241
 2768              	.L240:
 2769              	.LBE171:
 2770              	.LBE170:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2771              		.loc 1 1264 0
 2772 002c 1C4B     		ldr	r3, .L253
 2773 002e 1B68     		ldr	r3, [r3]
 2774 0030 43B1     		cbz	r3, .L242
 2775              	.LBB172:
 2776              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2777              		.loc 2 195 0
 2778              		.syntax unified
 2779              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2780 0032 4FF05003 			mov r3, #80												
 2781 0036 83F31188 		msr basepri, r3											
 2782 003a BFF36F8F 		isb														
 2783 003e BFF34F8F 		dsb														
 2784              	
 2785              	@ 0 "" 2
 2786              	.LVL246:
 2787              		.thumb
 2788              		.syntax unified
 2789              	.L243:
 2790 0042 FEE7     		b	.L243
 2791              	.L242:
 2792 0044 0C46     		mov	r4, r1
 2793              	.LBE173:
 2794              	.LBE172:
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccYYaUhP.s 			page 151


 2795              		.loc 1 1266 0
 2796 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2797              	.LVL247:
 2798              	.LBB174:
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2799              		.loc 1 1270 0
 2800 004a 164B     		ldr	r3, .L253+4
 2801 004c 1868     		ldr	r0, [r3]
 2802              	.LVL248:
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2803              		.loc 1 1273 0
 2804 004e 2A68     		ldr	r2, [r5]
 2805 0050 A318     		adds	r3, r4, r2
 2806              	.LVL249:
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2807              		.loc 1 1275 0
 2808 0052 9042     		cmp	r0, r2
 2809 0054 05D2     		bcs	.L244
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2810              		.loc 1 1282 0
 2811 0056 9A42     		cmp	r2, r3
 2812 0058 09D9     		bls	.L248
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2813              		.loc 1 1282 0 is_stmt 0 discriminator 1
 2814 005a 9842     		cmp	r0, r3
 2815 005c 09D3     		bcc	.L249
 2816              	.LBE174:
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2817              		.loc 1 1260 0 is_stmt 1
 2818 005e 0022     		movs	r2, #0
 2819 0060 0CE0     		b	.L245
 2820              	.L244:
 2821              	.LBB175:
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2822              		.loc 1 1296 0
 2823 0062 9A42     		cmp	r2, r3
 2824 0064 07D8     		bhi	.L250
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2825              		.loc 1 1296 0 is_stmt 0 discriminator 1
 2826 0066 9842     		cmp	r0, r3
 2827 0068 07D3     		bcc	.L251
 2828              	.LBE175:
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2829              		.loc 1 1260 0 is_stmt 1
 2830 006a 0022     		movs	r2, #0
 2831 006c 06E0     		b	.L245
 2832              	.L248:
 2833 006e 0022     		movs	r2, #0
 2834 0070 04E0     		b	.L245
 2835              	.L249:
 2836              	.LBB176:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2837              		.loc 1 1284 0
 2838 0072 0122     		movs	r2, #1
 2839 0074 02E0     		b	.L245
 2840              	.L250:
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccYYaUhP.s 			page 152


 2841              		.loc 1 1298 0
 2842 0076 0122     		movs	r2, #1
 2843 0078 00E0     		b	.L245
 2844              	.L251:
 2845 007a 0122     		movs	r2, #1
 2846              	.L245:
 2847              	.LVL250:
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2848              		.loc 1 1307 0
 2849 007c 2B60     		str	r3, [r5]
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2850              		.loc 1 1309 0
 2851 007e 1AB1     		cbz	r2, .L246
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2852              		.loc 1 1315 0
 2853 0080 0021     		movs	r1, #0
 2854 0082 181A     		subs	r0, r3, r0
 2855              	.LVL251:
 2856 0084 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2857              	.LVL252:
 2858              	.L246:
 2859              	.LBE176:
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2860              		.loc 1 1322 0
 2861 0088 FFF7FEFF 		bl	xTaskResumeAll
 2862              	.LVL253:
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2863              		.loc 1 1326 0
 2864 008c 38B9     		cbnz	r0, .L237
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2865              		.loc 1 1328 0
 2866 008e 4FF08052 		mov	r2, #268435456
 2867 0092 054B     		ldr	r3, .L253+8
 2868 0094 1A60     		str	r2, [r3]
 2869              		.syntax unified
 2870              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2871 0096 BFF34F8F 		dsb
 2872              	@ 0 "" 2
 2873              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2874 009a BFF36F8F 		isb
 2875              	@ 0 "" 2
 2876              		.thumb
 2877              		.syntax unified
 2878              	.L237:
 2879 009e 38BD     		pop	{r3, r4, r5, pc}
 2880              	.LVL254:
 2881              	.L254:
 2882              		.align	2
 2883              	.L253:
 2884 00a0 00000000 		.word	.LANCHOR16
 2885 00a4 00000000 		.word	.LANCHOR15
 2886 00a8 04ED00E0 		.word	-536810236
 2887              		.cfi_endproc
 2888              	.LFE9:
 2890              		.section	.text.vTaskDelay,"ax",%progbits
 2891              		.align	2
 2892              		.global	vTaskDelay
ARM GAS  /tmp/ccYYaUhP.s 			page 153


 2893              		.thumb
 2894              		.thumb_func
 2896              	vTaskDelay:
 2897              	.LFB10:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2898              		.loc 1 1342 0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 0
 2901              		@ frame_needed = 0, uses_anonymous_args = 0
 2902              	.LVL255:
 2903 0000 10B5     		push	{r4, lr}
 2904              	.LCFI28:
 2905              		.cfi_def_cfa_offset 8
 2906              		.cfi_offset 4, -8
 2907              		.cfi_offset 14, -4
 2908              	.LVL256:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2909              		.loc 1 1346 0
 2910 0002 A8B1     		cbz	r0, .L260
 2911 0004 0446     		mov	r4, r0
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2912              		.loc 1 1348 0
 2913 0006 104B     		ldr	r3, .L262
 2914 0008 1B68     		ldr	r3, [r3]
 2915 000a 43B1     		cbz	r3, .L257
 2916              	.LBB177:
 2917              	.LBB178:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2918              		.loc 2 195 0
 2919              		.syntax unified
 2920              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2921 000c 4FF05003 			mov r3, #80												
 2922 0010 83F31188 		msr basepri, r3											
 2923 0014 BFF36F8F 		isb														
 2924 0018 BFF34F8F 		dsb														
 2925              	
 2926              	@ 0 "" 2
 2927              	.LVL257:
 2928              		.thumb
 2929              		.syntax unified
 2930              	.L258:
 2931 001c FEE7     		b	.L258
 2932              	.L257:
 2933              	.LBE178:
 2934              	.LBE177:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2935              		.loc 1 1349 0
 2936 001e FFF7FEFF 		bl	vTaskSuspendAll
 2937              	.LVL258:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2938              		.loc 1 1360 0
 2939 0022 0021     		movs	r1, #0
 2940 0024 2046     		mov	r0, r4
 2941 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2942              	.LVL259:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2943              		.loc 1 1362 0
ARM GAS  /tmp/ccYYaUhP.s 			page 154


 2944 002a FFF7FEFF 		bl	xTaskResumeAll
 2945              	.LVL260:
 2946 002e 00E0     		b	.L256
 2947              	.LVL261:
 2948              	.L260:
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2949              		.loc 1 1343 0
 2950 0030 0020     		movs	r0, #0
 2951              	.LVL262:
 2952              	.L256:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2953              		.loc 1 1371 0
 2954 0032 38B9     		cbnz	r0, .L255
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2955              		.loc 1 1373 0
 2956 0034 4FF08052 		mov	r2, #268435456
 2957 0038 044B     		ldr	r3, .L262+4
 2958 003a 1A60     		str	r2, [r3]
 2959              		.syntax unified
 2960              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2961 003c BFF34F8F 		dsb
 2962              	@ 0 "" 2
 2963              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2964 0040 BFF36F8F 		isb
 2965              	@ 0 "" 2
 2966              		.thumb
 2967              		.syntax unified
 2968              	.L255:
 2969 0044 10BD     		pop	{r4, pc}
 2970              	.L263:
 2971 0046 00BF     		.align	2
 2972              	.L262:
 2973 0048 00000000 		.word	.LANCHOR16
 2974 004c 04ED00E0 		.word	-536810236
 2975              		.cfi_endproc
 2976              	.LFE10:
 2978              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2979              		.align	2
 2980              		.global	xTaskCatchUpTicks
 2981              		.thumb
 2982              		.thumb_func
 2984              	xTaskCatchUpTicks:
 2985              	.LFB28:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2986              		.loc 1 2610 0
 2987              		.cfi_startproc
 2988              		@ args = 0, pretend = 0, frame = 0
 2989              		@ frame_needed = 0, uses_anonymous_args = 0
 2990              	.LVL263:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2991              		.loc 1 2615 0
 2992 0000 0B4B     		ldr	r3, .L268
 2993 0002 1B68     		ldr	r3, [r3]
 2994 0004 43B1     		cbz	r3, .L265
 2995              	.LBB179:
 2996              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccYYaUhP.s 			page 155


 2997              		.loc 2 195 0
 2998              		.syntax unified
 2999              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3000 0006 4FF05003 			mov r3, #80												
 3001 000a 83F31188 		msr basepri, r3											
 3002 000e BFF36F8F 		isb														
 3003 0012 BFF34F8F 		dsb														
 3004              	
 3005              	@ 0 "" 2
 3006              	.LVL264:
 3007              		.thumb
 3008              		.syntax unified
 3009              	.L266:
 3010 0016 FEE7     		b	.L266
 3011              	.L265:
 3012              	.LBE180:
 3013              	.LBE179:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3014              		.loc 1 2610 0
 3015 0018 10B5     		push	{r4, lr}
 3016              	.LCFI29:
 3017              		.cfi_def_cfa_offset 8
 3018              		.cfi_offset 4, -8
 3019              		.cfi_offset 14, -4
 3020 001a 0446     		mov	r4, r0
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3021              		.loc 1 2619 0
 3022 001c FFF7FEFF 		bl	vTaskSuspendAll
 3023              	.LVL265:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3024              		.loc 1 2620 0
 3025 0020 044B     		ldr	r3, .L268+4
 3026 0022 1A68     		ldr	r2, [r3]
 3027 0024 1444     		add	r4, r4, r2
 3028              	.LVL266:
 3029 0026 1C60     		str	r4, [r3]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3030              		.loc 1 2621 0
 3031 0028 FFF7FEFF 		bl	xTaskResumeAll
 3032              	.LVL267:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3033              		.loc 1 2624 0
 3034 002c 10BD     		pop	{r4, pc}
 3035              	.L269:
 3036 002e 00BF     		.align	2
 3037              	.L268:
 3038 0030 00000000 		.word	.LANCHOR16
 3039 0034 00000000 		.word	.LANCHOR19
 3040              		.cfi_endproc
 3041              	.LFE28:
 3043              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3044              		.align	2
 3045              		.global	vTaskSwitchContext
 3046              		.thumb
 3047              		.thumb_func
 3049              	vTaskSwitchContext:
 3050              	.LFB30:
ARM GAS  /tmp/ccYYaUhP.s 			page 156


2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3051              		.loc 1 2990 0
 3052              		.cfi_startproc
 3053              		@ args = 0, pretend = 0, frame = 0
 3054              		@ frame_needed = 0, uses_anonymous_args = 0
 3055              		@ link register save eliminated.
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3056              		.loc 1 2991 0
 3057 0000 204B     		ldr	r3, .L279
 3058 0002 1B68     		ldr	r3, [r3]
 3059 0004 1BB1     		cbz	r3, .L271
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3060              		.loc 1 2995 0
 3061 0006 0122     		movs	r2, #1
 3062 0008 1F4B     		ldr	r3, .L279+4
 3063 000a 1A60     		str	r2, [r3]
 3064 000c 7047     		bx	lr
 3065              	.L271:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3066              		.loc 1 2999 0
 3067 000e 0022     		movs	r2, #0
 3068 0010 1D4B     		ldr	r3, .L279+4
 3069 0012 1A60     		str	r2, [r3]
 3070              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3071              		.loc 1 3041 0
 3072 0014 1D4B     		ldr	r3, .L279+8
 3073 0016 1B68     		ldr	r3, [r3]
 3074              	.LVL268:
 3075 0018 0AE0     		b	.L273
 3076              	.L276:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3077              		.loc 1 3041 0 is_stmt 0 discriminator 5
 3078 001a 43B9     		cbnz	r3, .L274
 3079              	.LBB182:
 3080              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3081              		.loc 2 195 0 is_stmt 1
 3082              		.syntax unified
 3083              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3084 001c 4FF05003 			mov r3, #80												
 3085 0020 83F31188 		msr basepri, r3											
 3086 0024 BFF36F8F 		isb														
 3087 0028 BFF34F8F 		dsb														
 3088              	
 3089              	@ 0 "" 2
 3090              	.LVL269:
 3091              		.thumb
 3092              		.syntax unified
 3093              	.L275:
 3094 002c FEE7     		b	.L275
 3095              	.LVL270:
 3096              	.L274:
 3097              	.LBE183:
 3098              	.LBE182:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3099              		.loc 1 3041 0 discriminator 3
ARM GAS  /tmp/ccYYaUhP.s 			page 157


 3100 002e 013B     		subs	r3, r3, #1
 3101              	.LVL271:
 3102              	.L273:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3103              		.loc 1 3041 0 is_stmt 0 discriminator 4
 3104 0030 03EB8301 		add	r1, r3, r3, lsl #2
 3105 0034 8A00     		lsls	r2, r1, #2
 3106 0036 1649     		ldr	r1, .L279+12
 3107 0038 8A58     		ldr	r2, [r1, r2]
 3108 003a 002A     		cmp	r2, #0
 3109 003c EDD0     		beq	.L276
 3110              	.LBE181:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3111              		.loc 1 2990 0 is_stmt 1 discriminator 6
 3112 003e 30B4     		push	{r4, r5}
 3113              	.LCFI30:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 4, -8
 3116              		.cfi_offset 5, -4
 3117              	.LVL272:
 3118              	.LBB185:
 3119              	.LBB184:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3120              		.loc 1 3041 0 discriminator 6
 3121 0040 0D46     		mov	r5, r1
 3122 0042 9900     		lsls	r1, r3, #2
 3123 0044 CA18     		adds	r2, r1, r3
 3124 0046 9000     		lsls	r0, r2, #2
 3125 0048 2844     		add	r0, r0, r5
 3126 004a 4268     		ldr	r2, [r0, #4]
 3127 004c 5468     		ldr	r4, [r2, #4]
 3128 004e 4460     		str	r4, [r0, #4]
 3129 0050 1944     		add	r1, r1, r3
 3130 0052 8A00     		lsls	r2, r1, #2
 3131 0054 0832     		adds	r2, r2, #8
 3132 0056 2A44     		add	r2, r2, r5
 3133 0058 9442     		cmp	r4, r2
 3134 005a 05D1     		bne	.L277
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3135              		.loc 1 3041 0 is_stmt 0 discriminator 7
 3136 005c 6068     		ldr	r0, [r4, #4]
 3137 005e 03EB8301 		add	r1, r3, r3, lsl #2
 3138 0062 8A00     		lsls	r2, r1, #2
 3139 0064 2A44     		add	r2, r2, r5
 3140 0066 5060     		str	r0, [r2, #4]
 3141              	.L277:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3142              		.loc 1 3041 0 discriminator 9
 3143 0068 03EB8301 		add	r1, r3, r3, lsl #2
 3144 006c 8A00     		lsls	r2, r1, #2
 3145 006e 0849     		ldr	r1, .L279+12
 3146 0070 0A44     		add	r2, r2, r1
 3147 0072 5268     		ldr	r2, [r2, #4]
 3148 0074 D168     		ldr	r1, [r2, #12]
 3149 0076 074A     		ldr	r2, .L279+16
 3150 0078 1160     		str	r1, [r2]
 3151              	.LBE184:
ARM GAS  /tmp/ccYYaUhP.s 			page 158


 3152 007a 044A     		ldr	r2, .L279+8
 3153 007c 1360     		str	r3, [r2]
 3154              	.LBE185:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3155              		.loc 1 3061 0 is_stmt 1 discriminator 9
 3156 007e 30BC     		pop	{r4, r5}
 3157              	.LCFI31:
 3158              		.cfi_restore 5
 3159              		.cfi_restore 4
 3160              		.cfi_def_cfa_offset 0
 3161 0080 7047     		bx	lr
 3162              	.L280:
 3163 0082 00BF     		.align	2
 3164              	.L279:
 3165 0084 00000000 		.word	.LANCHOR16
 3166 0088 00000000 		.word	.LANCHOR18
 3167 008c 00000000 		.word	.LANCHOR13
 3168 0090 00000000 		.word	.LANCHOR4
 3169 0094 00000000 		.word	.LANCHOR10
 3170              		.cfi_endproc
 3171              	.LFE30:
 3173              		.section	.text.vTaskSuspend,"ax",%progbits
 3174              		.align	2
 3175              		.global	vTaskSuspend
 3176              		.thumb
 3177              		.thumb_func
 3179              	vTaskSuspend:
 3180              	.LFB15:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3181              		.loc 1 1705 0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 3185              	.LVL273:
 3186 0000 38B5     		push	{r3, r4, r5, lr}
 3187              	.LCFI32:
 3188              		.cfi_def_cfa_offset 16
 3189              		.cfi_offset 3, -16
 3190              		.cfi_offset 4, -12
 3191              		.cfi_offset 5, -8
 3192              		.cfi_offset 14, -4
 3193 0002 0446     		mov	r4, r0
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3194              		.loc 1 1708 0
 3195 0004 FFF7FEFF 		bl	vPortEnterCritical
 3196              	.LVL274:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3197              		.loc 1 1712 0
 3198 0008 0CB9     		cbnz	r4, .L282
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3199              		.loc 1 1712 0 is_stmt 0 discriminator 1
 3200 000a 264B     		ldr	r3, .L292
 3201 000c 1C68     		ldr	r4, [r3]
 3202              	.LVL275:
 3203              	.L282:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3204              		.loc 1 1718 0 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccYYaUhP.s 			page 159


 3205 000e 251D     		adds	r5, r4, #4
 3206 0010 2846     		mov	r0, r5
 3207 0012 FFF7FEFF 		bl	uxListRemove
 3208              	.LVL276:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3209              		.loc 1 1728 0 discriminator 4
 3210 0016 A36A     		ldr	r3, [r4, #40]
 3211 0018 1BB1     		cbz	r3, .L283
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3212              		.loc 1 1730 0
 3213 001a 04F11800 		add	r0, r4, #24
 3214 001e FFF7FEFF 		bl	uxListRemove
 3215              	.LVL277:
 3216              	.L283:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3217              		.loc 1 1737 0
 3218 0022 2946     		mov	r1, r5
 3219 0024 2048     		ldr	r0, .L292+4
 3220 0026 FFF7FEFF 		bl	vListInsertEnd
 3221              	.LVL278:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3222              		.loc 1 1741 0
 3223 002a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3224 002e DBB2     		uxtb	r3, r3
 3225 0030 012B     		cmp	r3, #1
 3226 0032 02D1     		bne	.L284
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3227              		.loc 1 1745 0
 3228 0034 0023     		movs	r3, #0
 3229 0036 84F85830 		strb	r3, [r4, #88]
 3230              	.L284:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3231              		.loc 1 1750 0
 3232 003a FFF7FEFF 		bl	vPortExitCritical
 3233              	.LVL279:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3234              		.loc 1 1752 0
 3235 003e 1B4B     		ldr	r3, .L292+8
 3236 0040 1B68     		ldr	r3, [r3]
 3237 0042 2BB1     		cbz	r3, .L285
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3238              		.loc 1 1756 0
 3239 0044 FFF7FEFF 		bl	vPortEnterCritical
 3240              	.LVL280:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3241              		.loc 1 1758 0
 3242 0048 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3243              	.LVL281:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3244              		.loc 1 1760 0
 3245 004c FFF7FEFF 		bl	vPortExitCritical
 3246              	.LVL282:
 3247              	.L285:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3248              		.loc 1 1767 0
 3249 0050 144B     		ldr	r3, .L292
 3250 0052 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 160


 3251 0054 9C42     		cmp	r4, r3
 3252 0056 23D1     		bne	.L281
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3253              		.loc 1 1769 0
 3254 0058 144B     		ldr	r3, .L292+8
 3255 005a 1B68     		ldr	r3, [r3]
 3256 005c A3B1     		cbz	r3, .L287
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3257              		.loc 1 1772 0
 3258 005e 144B     		ldr	r3, .L292+12
 3259 0060 1B68     		ldr	r3, [r3]
 3260 0062 43B1     		cbz	r3, .L288
 3261              	.LBB186:
 3262              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3263              		.loc 2 195 0
 3264              		.syntax unified
 3265              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3266 0064 4FF05003 			mov r3, #80												
 3267 0068 83F31188 		msr basepri, r3											
 3268 006c BFF36F8F 		isb														
 3269 0070 BFF34F8F 		dsb														
 3270              	
 3271              	@ 0 "" 2
 3272              	.LVL283:
 3273              		.thumb
 3274              		.syntax unified
 3275              	.L289:
 3276 0074 FEE7     		b	.L289
 3277              	.L288:
 3278              	.LBE187:
 3279              	.LBE186:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3280              		.loc 1 1773 0
 3281 0076 4FF08052 		mov	r2, #268435456
 3282 007a 0E4B     		ldr	r3, .L292+16
 3283 007c 1A60     		str	r2, [r3]
 3284              		.syntax unified
 3285              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3286 007e BFF34F8F 		dsb
 3287              	@ 0 "" 2
 3288              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3289 0082 BFF36F8F 		isb
 3290              	@ 0 "" 2
 3291              		.thumb
 3292              		.syntax unified
 3293 0086 38BD     		pop	{r3, r4, r5, pc}
 3294              	.LVL284:
 3295              	.L287:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3296              		.loc 1 1780 0
 3297 0088 074B     		ldr	r3, .L292+4
 3298 008a 1A68     		ldr	r2, [r3]
 3299 008c 0A4B     		ldr	r3, .L292+20
 3300 008e 1B68     		ldr	r3, [r3]
 3301 0090 9A42     		cmp	r2, r3
 3302 0092 03D1     		bne	.L290
ARM GAS  /tmp/ccYYaUhP.s 			page 161


1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3303              		.loc 1 1786 0
 3304 0094 0022     		movs	r2, #0
 3305 0096 034B     		ldr	r3, .L292
 3306 0098 1A60     		str	r2, [r3]
 3307 009a 38BD     		pop	{r3, r4, r5, pc}
 3308              	.LVL285:
 3309              	.L290:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3310              		.loc 1 1790 0
 3311 009c FFF7FEFF 		bl	vTaskSwitchContext
 3312              	.LVL286:
 3313              	.L281:
 3314 00a0 38BD     		pop	{r3, r4, r5, pc}
 3315              	.LVL287:
 3316              	.L293:
 3317 00a2 00BF     		.align	2
 3318              	.L292:
 3319 00a4 00000000 		.word	.LANCHOR10
 3320 00a8 00000000 		.word	.LANCHOR0
 3321 00ac 00000000 		.word	.LANCHOR11
 3322 00b0 00000000 		.word	.LANCHOR16
 3323 00b4 04ED00E0 		.word	-536810236
 3324 00b8 00000000 		.word	.LANCHOR9
 3325              		.cfi_endproc
 3326              	.LFE15:
 3328              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3329              		.align	2
 3330              		.global	vTaskPlaceOnEventList
 3331              		.thumb
 3332              		.thumb_func
 3334              	vTaskPlaceOnEventList:
 3335              	.LFB31:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3336              		.loc 1 3065 0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 3340              	.LVL288:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3341              		.loc 1 3066 0
 3342 0000 40B9     		cbnz	r0, .L295
 3343              	.LBB188:
 3344              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3345              		.loc 2 195 0
 3346              		.syntax unified
 3347              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3348 0002 4FF05003 			mov r3, #80												
 3349 0006 83F31188 		msr basepri, r3											
 3350 000a BFF36F8F 		isb														
 3351 000e BFF34F8F 		dsb														
 3352              	
 3353              	@ 0 "" 2
 3354              	.LVL289:
 3355              		.thumb
 3356              		.syntax unified
ARM GAS  /tmp/ccYYaUhP.s 			page 162


 3357              	.L296:
 3358 0012 FEE7     		b	.L296
 3359              	.L295:
 3360              	.LBE189:
 3361              	.LBE188:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3362              		.loc 1 3065 0
 3363 0014 10B5     		push	{r4, lr}
 3364              	.LCFI33:
 3365              		.cfi_def_cfa_offset 8
 3366              		.cfi_offset 4, -8
 3367              		.cfi_offset 14, -4
 3368 0016 0C46     		mov	r4, r1
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3369              		.loc 1 3075 0
 3370 0018 044B     		ldr	r3, .L298
 3371 001a 1968     		ldr	r1, [r3]
 3372              	.LVL290:
 3373 001c 1831     		adds	r1, r1, #24
 3374 001e FFF7FEFF 		bl	vListInsert
 3375              	.LVL291:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3376              		.loc 1 3077 0
 3377 0022 0121     		movs	r1, #1
 3378 0024 2046     		mov	r0, r4
 3379 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3380              	.LVL292:
 3381 002a 10BD     		pop	{r4, pc}
 3382              	.LVL293:
 3383              	.L299:
 3384              		.align	2
 3385              	.L298:
 3386 002c 00000000 		.word	.LANCHOR10
 3387              		.cfi_endproc
 3388              	.LFE31:
 3390              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3391              		.align	2
 3392              		.global	vTaskPlaceOnUnorderedEventList
 3393              		.thumb
 3394              		.thumb_func
 3396              	vTaskPlaceOnUnorderedEventList:
 3397              	.LFB32:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3398              		.loc 1 3082 0
 3399              		.cfi_startproc
 3400              		@ args = 0, pretend = 0, frame = 0
 3401              		@ frame_needed = 0, uses_anonymous_args = 0
 3402              	.LVL294:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3403              		.loc 1 3083 0
 3404 0000 40B9     		cbnz	r0, .L301
 3405              	.LBB190:
 3406              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3407              		.loc 2 195 0
 3408              		.syntax unified
 3409              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccYYaUhP.s 			page 163


 3410 0002 4FF05003 			mov r3, #80												
 3411 0006 83F31188 		msr basepri, r3											
 3412 000a BFF36F8F 		isb														
 3413 000e BFF34F8F 		dsb														
 3414              	
 3415              	@ 0 "" 2
 3416              	.LVL295:
 3417              		.thumb
 3418              		.syntax unified
 3419              	.L302:
 3420 0012 FEE7     		b	.L302
 3421              	.L301:
 3422 0014 0346     		mov	r3, r0
 3423              	.LBE191:
 3424              	.LBE190:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3425              		.loc 1 3087 0
 3426 0016 0F48     		ldr	r0, .L306
 3427              	.LVL296:
 3428 0018 0068     		ldr	r0, [r0]
 3429 001a 40B9     		cbnz	r0, .L303
 3430              	.LBB192:
 3431              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3432              		.loc 2 195 0
 3433              		.syntax unified
 3434              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3435 001c 4FF05003 			mov r3, #80												
 3436 0020 83F31188 		msr basepri, r3											
 3437 0024 BFF36F8F 		isb														
 3438 0028 BFF34F8F 		dsb														
 3439              	
 3440              	@ 0 "" 2
 3441              	.LVL297:
 3442              		.thumb
 3443              		.syntax unified
 3444              	.L304:
 3445 002c FEE7     		b	.L304
 3446              	.LVL298:
 3447              	.L303:
 3448              	.LBE193:
 3449              	.LBE192:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3450              		.loc 1 3082 0
 3451 002e 10B5     		push	{r4, lr}
 3452              	.LCFI34:
 3453              		.cfi_def_cfa_offset 8
 3454              		.cfi_offset 4, -8
 3455              		.cfi_offset 14, -4
 3456 0030 1846     		mov	r0, r3
 3457 0032 1446     		mov	r4, r2
 3458 0034 0B46     		mov	r3, r1
 3459              	.LVL299:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3460              		.loc 1 3092 0
 3461 0036 084A     		ldr	r2, .L306+4
 3462              	.LVL300:
ARM GAS  /tmp/ccYYaUhP.s 			page 164


 3463 0038 1168     		ldr	r1, [r2]
 3464              	.LVL301:
 3465 003a 43F00043 		orr	r3, r3, #-2147483648
 3466              	.LVL302:
 3467 003e 8B61     		str	r3, [r1, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3468              		.loc 1 3099 0
 3469 0040 1168     		ldr	r1, [r2]
 3470 0042 1831     		adds	r1, r1, #24
 3471 0044 FFF7FEFF 		bl	vListInsertEnd
 3472              	.LVL303:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3473              		.loc 1 3101 0
 3474 0048 0121     		movs	r1, #1
 3475 004a 2046     		mov	r0, r4
 3476 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3477              	.LVL304:
 3478 0050 10BD     		pop	{r4, pc}
 3479              	.LVL305:
 3480              	.L307:
 3481 0052 00BF     		.align	2
 3482              	.L306:
 3483 0054 00000000 		.word	.LANCHOR16
 3484 0058 00000000 		.word	.LANCHOR10
 3485              		.cfi_endproc
 3486              	.LFE32:
 3488              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3489              		.align	2
 3490              		.global	vTaskPlaceOnEventListRestricted
 3491              		.thumb
 3492              		.thumb_func
 3494              	vTaskPlaceOnEventListRestricted:
 3495              	.LFB33:
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3496              		.loc 1 3108 0
 3497              		.cfi_startproc
 3498              		@ args = 0, pretend = 0, frame = 0
 3499              		@ frame_needed = 0, uses_anonymous_args = 0
 3500              	.LVL306:
 3501 0000 38B5     		push	{r3, r4, r5, lr}
 3502              	.LCFI35:
 3503              		.cfi_def_cfa_offset 16
 3504              		.cfi_offset 3, -16
 3505              		.cfi_offset 4, -12
 3506              		.cfi_offset 5, -8
 3507              		.cfi_offset 14, -4
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3508              		.loc 1 3109 0
 3509 0002 40B9     		cbnz	r0, .L309
 3510              	.LBB194:
 3511              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3512              		.loc 2 195 0
 3513              		.syntax unified
 3514              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3515 0004 4FF05003 			mov r3, #80												
 3516 0008 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccYYaUhP.s 			page 165


 3517 000c BFF36F8F 		isb														
 3518 0010 BFF34F8F 		dsb														
 3519              	
 3520              	@ 0 "" 2
 3521              	.LVL307:
 3522              		.thumb
 3523              		.syntax unified
 3524              	.L310:
 3525 0014 FEE7     		b	.L310
 3526              	.L309:
 3527 0016 0C46     		mov	r4, r1
 3528 0018 1546     		mov	r5, r2
 3529              	.LBE195:
 3530              	.LBE194:
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3531              		.loc 1 3121 0
 3532 001a 064A     		ldr	r2, .L314
 3533              	.LVL308:
 3534 001c 1168     		ldr	r1, [r2]
 3535              	.LVL309:
 3536 001e 1831     		adds	r1, r1, #24
 3537 0020 FFF7FEFF 		bl	vListInsertEnd
 3538              	.LVL310:
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3539              		.loc 1 3126 0
 3540 0024 0DB1     		cbz	r5, .L311
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3541              		.loc 1 3128 0
 3542 0026 4FF0FF34 		mov	r4, #-1
 3543              	.LVL311:
 3544              	.L311:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3545              		.loc 1 3132 0
 3546 002a 2946     		mov	r1, r5
 3547 002c 2046     		mov	r0, r4
 3548 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3549              	.LVL312:
 3550 0032 38BD     		pop	{r3, r4, r5, pc}
 3551              	.LVL313:
 3552              	.L315:
 3553              		.align	2
 3554              	.L314:
 3555 0034 00000000 		.word	.LANCHOR10
 3556              		.cfi_endproc
 3557              	.LFE33:
 3559              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3560              		.align	2
 3561              		.global	xTaskRemoveFromEventList
 3562              		.thumb
 3563              		.thumb_func
 3565              	xTaskRemoveFromEventList:
 3566              	.LFB34:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3567              		.loc 1 3139 0
 3568              		.cfi_startproc
 3569              		@ args = 0, pretend = 0, frame = 0
 3570              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYYaUhP.s 			page 166


 3571              	.LVL314:
 3572 0000 38B5     		push	{r3, r4, r5, lr}
 3573              	.LCFI36:
 3574              		.cfi_def_cfa_offset 16
 3575              		.cfi_offset 3, -16
 3576              		.cfi_offset 4, -12
 3577              		.cfi_offset 5, -8
 3578              		.cfi_offset 14, -4
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3579              		.loc 1 3156 0
 3580 0002 C368     		ldr	r3, [r0, #12]
 3581 0004 DC68     		ldr	r4, [r3, #12]
 3582              	.LVL315:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3583              		.loc 1 3157 0
 3584 0006 44B9     		cbnz	r4, .L317
 3585              	.LBB196:
 3586              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3587              		.loc 2 195 0
 3588              		.syntax unified
 3589              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3590 0008 4FF05003 			mov r3, #80												
 3591 000c 83F31188 		msr basepri, r3											
 3592 0010 BFF36F8F 		isb														
 3593 0014 BFF34F8F 		dsb														
 3594              	
 3595              	@ 0 "" 2
 3596              	.LVL316:
 3597              		.thumb
 3598              		.syntax unified
 3599              	.L318:
 3600 0018 FEE7     		b	.L318
 3601              	.L317:
 3602              	.LBE197:
 3603              	.LBE196:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3604              		.loc 1 3158 0
 3605 001a 04F11805 		add	r5, r4, #24
 3606 001e 2846     		mov	r0, r5
 3607              	.LVL317:
 3608 0020 FFF7FEFF 		bl	uxListRemove
 3609              	.LVL318:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3610              		.loc 1 3160 0
 3611 0024 134B     		ldr	r3, .L325
 3612 0026 1B68     		ldr	r3, [r3]
 3613 0028 9BB9     		cbnz	r3, .L319
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3614              		.loc 1 3162 0
 3615 002a 251D     		adds	r5, r4, #4
 3616 002c 2846     		mov	r0, r5
 3617 002e FFF7FEFF 		bl	uxListRemove
 3618              	.LVL319:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3619              		.loc 1 3163 0
 3620 0032 E36A     		ldr	r3, [r4, #44]
ARM GAS  /tmp/ccYYaUhP.s 			page 167


 3621 0034 104A     		ldr	r2, .L325+4
 3622 0036 1268     		ldr	r2, [r2]
 3623 0038 9342     		cmp	r3, r2
 3624 003a 01D9     		bls	.L320
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3625              		.loc 1 3163 0 is_stmt 0 discriminator 1
 3626 003c 0E4A     		ldr	r2, .L325+4
 3627 003e 1360     		str	r3, [r2]
 3628              	.L320:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3629              		.loc 1 3163 0 discriminator 3
 3630 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3631 0044 9A00     		lsls	r2, r3, #2
 3632 0046 2946     		mov	r1, r5
 3633 0048 0C48     		ldr	r0, .L325+8
 3634 004a 1044     		add	r0, r0, r2
 3635 004c FFF7FEFF 		bl	vListInsertEnd
 3636              	.LVL320:
 3637 0050 03E0     		b	.L321
 3638              	.L319:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3639              		.loc 1 3183 0 is_stmt 1
 3640 0052 2946     		mov	r1, r5
 3641 0054 0A48     		ldr	r0, .L325+12
 3642 0056 FFF7FEFF 		bl	vListInsertEnd
 3643              	.LVL321:
 3644              	.L321:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3645              		.loc 1 3186 0
 3646 005a E26A     		ldr	r2, [r4, #44]
 3647 005c 094B     		ldr	r3, .L325+16
 3648 005e 1B68     		ldr	r3, [r3]
 3649 0060 DB6A     		ldr	r3, [r3, #44]
 3650 0062 9A42     		cmp	r2, r3
 3651 0064 03D9     		bls	.L323
 3652              	.LVL322:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3653              		.loc 1 3195 0
 3654 0066 0120     		movs	r0, #1
 3655 0068 074B     		ldr	r3, .L325+20
 3656 006a 1860     		str	r0, [r3]
 3657 006c 38BD     		pop	{r3, r4, r5, pc}
 3658              	.LVL323:
 3659              	.L323:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3660              		.loc 1 3199 0
 3661 006e 0020     		movs	r0, #0
 3662              	.LVL324:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3663              		.loc 1 3203 0
 3664 0070 38BD     		pop	{r3, r4, r5, pc}
 3665              	.LVL325:
 3666              	.L326:
 3667 0072 00BF     		.align	2
 3668              	.L325:
 3669 0074 00000000 		.word	.LANCHOR16
 3670 0078 00000000 		.word	.LANCHOR13
ARM GAS  /tmp/ccYYaUhP.s 			page 168


 3671 007c 00000000 		.word	.LANCHOR4
 3672 0080 00000000 		.word	.LANCHOR1
 3673 0084 00000000 		.word	.LANCHOR10
 3674 0088 00000000 		.word	.LANCHOR18
 3675              		.cfi_endproc
 3676              	.LFE34:
 3678              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3679              		.align	2
 3680              		.global	vTaskRemoveFromUnorderedEventList
 3681              		.thumb
 3682              		.thumb_func
 3684              	vTaskRemoveFromUnorderedEventList:
 3685              	.LFB35:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3686              		.loc 1 3207 0
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 0
 3689              		@ frame_needed = 0, uses_anonymous_args = 0
 3690              	.LVL326:
 3691 0000 38B5     		push	{r3, r4, r5, lr}
 3692              	.LCFI37:
 3693              		.cfi_def_cfa_offset 16
 3694              		.cfi_offset 3, -16
 3695              		.cfi_offset 4, -12
 3696              		.cfi_offset 5, -8
 3697              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3698              		.loc 1 3212 0
 3699 0002 1C4B     		ldr	r3, .L335
 3700 0004 1B68     		ldr	r3, [r3]
 3701 0006 43B9     		cbnz	r3, .L328
 3702              	.LBB198:
 3703              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3704              		.loc 2 195 0
 3705              		.syntax unified
 3706              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3707 0008 4FF05003 			mov r3, #80												
 3708 000c 83F31188 		msr basepri, r3											
 3709 0010 BFF36F8F 		isb														
 3710 0014 BFF34F8F 		dsb														
 3711              	
 3712              	@ 0 "" 2
 3713              	.LVL327:
 3714              		.thumb
 3715              		.syntax unified
 3716              	.L329:
 3717 0018 FEE7     		b	.L329
 3718              	.L328:
 3719              	.LBE199:
 3720              	.LBE198:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3721              		.loc 1 3215 0
 3722 001a 41F00043 		orr	r3, r1, #-2147483648
 3723 001e 0360     		str	r3, [r0]
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3724              		.loc 1 3219 0
ARM GAS  /tmp/ccYYaUhP.s 			page 169


 3725 0020 C468     		ldr	r4, [r0, #12]
 3726              	.LVL328:
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3727              		.loc 1 3220 0
 3728 0022 44B9     		cbnz	r4, .L330
 3729              	.LBB200:
 3730              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3731              		.loc 2 195 0
 3732              		.syntax unified
 3733              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3734 0024 4FF05003 			mov r3, #80												
 3735 0028 83F31188 		msr basepri, r3											
 3736 002c BFF36F8F 		isb														
 3737 0030 BFF34F8F 		dsb														
 3738              	
 3739              	@ 0 "" 2
 3740              	.LVL329:
 3741              		.thumb
 3742              		.syntax unified
 3743              	.L331:
 3744 0034 FEE7     		b	.L331
 3745              	.L330:
 3746              	.LBE201:
 3747              	.LBE200:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3748              		.loc 1 3221 0
 3749 0036 FFF7FEFF 		bl	uxListRemove
 3750              	.LVL330:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3751              		.loc 1 3240 0
 3752 003a 251D     		adds	r5, r4, #4
 3753 003c 2846     		mov	r0, r5
 3754 003e FFF7FEFF 		bl	uxListRemove
 3755              	.LVL331:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3756              		.loc 1 3241 0
 3757 0042 E36A     		ldr	r3, [r4, #44]
 3758 0044 0C4A     		ldr	r2, .L335+4
 3759 0046 1268     		ldr	r2, [r2]
 3760 0048 9342     		cmp	r3, r2
 3761 004a 01D9     		bls	.L332
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3762              		.loc 1 3241 0 is_stmt 0 discriminator 1
 3763 004c 0A4A     		ldr	r2, .L335+4
 3764 004e 1360     		str	r3, [r2]
 3765              	.L332:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3766              		.loc 1 3241 0 discriminator 3
 3767 0050 03EB8303 		add	r3, r3, r3, lsl #2
 3768 0054 9A00     		lsls	r2, r3, #2
 3769 0056 2946     		mov	r1, r5
 3770 0058 0848     		ldr	r0, .L335+8
 3771 005a 1044     		add	r0, r0, r2
 3772 005c FFF7FEFF 		bl	vListInsertEnd
 3773              	.LVL332:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccYYaUhP.s 			page 170


 3774              		.loc 1 3243 0 is_stmt 1 discriminator 3
 3775 0060 E26A     		ldr	r2, [r4, #44]
 3776 0062 074B     		ldr	r3, .L335+12
 3777 0064 1B68     		ldr	r3, [r3]
 3778 0066 DB6A     		ldr	r3, [r3, #44]
 3779 0068 9A42     		cmp	r2, r3
 3780 006a 02D9     		bls	.L327
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3781              		.loc 1 3249 0
 3782 006c 0122     		movs	r2, #1
 3783 006e 054B     		ldr	r3, .L335+16
 3784 0070 1A60     		str	r2, [r3]
 3785              	.L327:
 3786 0072 38BD     		pop	{r3, r4, r5, pc}
 3787              	.LVL333:
 3788              	.L336:
 3789              		.align	2
 3790              	.L335:
 3791 0074 00000000 		.word	.LANCHOR16
 3792 0078 00000000 		.word	.LANCHOR13
 3793 007c 00000000 		.word	.LANCHOR4
 3794 0080 00000000 		.word	.LANCHOR10
 3795 0084 00000000 		.word	.LANCHOR18
 3796              		.cfi_endproc
 3797              	.LFE35:
 3799              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3800              		.align	2
 3801              		.global	vTaskSetTimeOutState
 3802              		.thumb
 3803              		.thumb_func
 3805              	vTaskSetTimeOutState:
 3806              	.LFB36:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3807              		.loc 1 3255 0
 3808              		.cfi_startproc
 3809              		@ args = 0, pretend = 0, frame = 0
 3810              		@ frame_needed = 0, uses_anonymous_args = 0
 3811              	.LVL334:
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3812              		.loc 1 3256 0
 3813 0000 40B9     		cbnz	r0, .L338
 3814              	.LBB202:
 3815              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3816              		.loc 2 195 0
 3817              		.syntax unified
 3818              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3819 0002 4FF05003 			mov r3, #80												
 3820 0006 83F31188 		msr basepri, r3											
 3821 000a BFF36F8F 		isb														
 3822 000e BFF34F8F 		dsb														
 3823              	
 3824              	@ 0 "" 2
 3825              	.LVL335:
 3826              		.thumb
 3827              		.syntax unified
 3828              	.L339:
ARM GAS  /tmp/ccYYaUhP.s 			page 171


 3829 0012 FEE7     		b	.L339
 3830              	.L338:
 3831              	.LBE203:
 3832              	.LBE202:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3833              		.loc 1 3255 0
 3834 0014 10B5     		push	{r4, lr}
 3835              	.LCFI38:
 3836              		.cfi_def_cfa_offset 8
 3837              		.cfi_offset 4, -8
 3838              		.cfi_offset 14, -4
 3839 0016 0446     		mov	r4, r0
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3840              		.loc 1 3257 0
 3841 0018 FFF7FEFF 		bl	vPortEnterCritical
 3842              	.LVL336:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3843              		.loc 1 3259 0
 3844 001c 044B     		ldr	r3, .L341
 3845 001e 1B68     		ldr	r3, [r3]
 3846 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3847              		.loc 1 3260 0
 3848 0022 044B     		ldr	r3, .L341+4
 3849 0024 1B68     		ldr	r3, [r3]
 3850 0026 6360     		str	r3, [r4, #4]
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3851              		.loc 1 3262 0
 3852 0028 FFF7FEFF 		bl	vPortExitCritical
 3853              	.LVL337:
 3854 002c 10BD     		pop	{r4, pc}
 3855              	.LVL338:
 3856              	.L342:
 3857 002e 00BF     		.align	2
 3858              	.L341:
 3859 0030 00000000 		.word	.LANCHOR17
 3860 0034 00000000 		.word	.LANCHOR15
 3861              		.cfi_endproc
 3862              	.LFE36:
 3864              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3865              		.align	2
 3866              		.global	vTaskInternalSetTimeOutState
 3867              		.thumb
 3868              		.thumb_func
 3870              	vTaskInternalSetTimeOutState:
 3871              	.LFB37:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3872              		.loc 1 3267 0
 3873              		.cfi_startproc
 3874              		@ args = 0, pretend = 0, frame = 0
 3875              		@ frame_needed = 0, uses_anonymous_args = 0
 3876              		@ link register save eliminated.
 3877              	.LVL339:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3878              		.loc 1 3269 0
 3879 0000 034B     		ldr	r3, .L344
 3880 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 172


 3881 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3882              		.loc 1 3270 0
 3883 0006 034B     		ldr	r3, .L344+4
 3884 0008 1B68     		ldr	r3, [r3]
 3885 000a 4360     		str	r3, [r0, #4]
 3886 000c 7047     		bx	lr
 3887              	.L345:
 3888 000e 00BF     		.align	2
 3889              	.L344:
 3890 0010 00000000 		.word	.LANCHOR17
 3891 0014 00000000 		.word	.LANCHOR15
 3892              		.cfi_endproc
 3893              	.LFE37:
 3895              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3896              		.align	2
 3897              		.global	xTaskCheckForTimeOut
 3898              		.thumb
 3899              		.thumb_func
 3901              	xTaskCheckForTimeOut:
 3902              	.LFB38:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3903              		.loc 1 3275 0
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 0
 3906              		@ frame_needed = 0, uses_anonymous_args = 0
 3907              	.LVL340:
 3908 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3909              	.LCFI39:
 3910              		.cfi_def_cfa_offset 24
 3911              		.cfi_offset 3, -24
 3912              		.cfi_offset 4, -20
 3913              		.cfi_offset 5, -16
 3914              		.cfi_offset 6, -12
 3915              		.cfi_offset 7, -8
 3916              		.cfi_offset 14, -4
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3917              		.loc 1 3278 0
 3918 0002 40B9     		cbnz	r0, .L347
 3919              	.LBB204:
 3920              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3921              		.loc 2 195 0
 3922              		.syntax unified
 3923              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3924 0004 4FF05003 			mov r3, #80												
 3925 0008 83F31188 		msr basepri, r3											
 3926 000c BFF36F8F 		isb														
 3927 0010 BFF34F8F 		dsb														
 3928              	
 3929              	@ 0 "" 2
 3930              	.LVL341:
 3931              		.thumb
 3932              		.syntax unified
 3933              	.L348:
 3934 0014 FEE7     		b	.L348
 3935              	.L347:
ARM GAS  /tmp/ccYYaUhP.s 			page 173


 3936 0016 0546     		mov	r5, r0
 3937              	.LBE205:
 3938              	.LBE204:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3939              		.loc 1 3279 0
 3940 0018 41B9     		cbnz	r1, .L349
 3941              	.LBB206:
 3942              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3943              		.loc 2 195 0
 3944              		.syntax unified
 3945              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3946 001a 4FF05003 			mov r3, #80												
 3947 001e 83F31188 		msr basepri, r3											
 3948 0022 BFF36F8F 		isb														
 3949 0026 BFF34F8F 		dsb														
 3950              	
 3951              	@ 0 "" 2
 3952              	.LVL342:
 3953              		.thumb
 3954              		.syntax unified
 3955              	.L350:
 3956 002a FEE7     		b	.L350
 3957              	.L349:
 3958 002c 0C46     		mov	r4, r1
 3959              	.LBE207:
 3960              	.LBE206:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3961              		.loc 1 3281 0
 3962 002e FFF7FEFF 		bl	vPortEnterCritical
 3963              	.LVL343:
 3964              	.LBB208:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3965              		.loc 1 3284 0
 3966 0032 114B     		ldr	r3, .L357
 3967 0034 1868     		ldr	r0, [r3]
 3968              	.LVL344:
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3969              		.loc 1 3285 0
 3970 0036 6968     		ldr	r1, [r5, #4]
 3971 0038 421A     		subs	r2, r0, r1
 3972              	.LVL345:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3973              		.loc 1 3299 0
 3974 003a 2368     		ldr	r3, [r4]
 3975 003c B3F1FF3F 		cmp	r3, #-1
 3976 0040 13D0     		beq	.L354
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3977              		.loc 1 3309 0
 3978 0042 2F68     		ldr	r7, [r5]
 3979 0044 0D4E     		ldr	r6, .L357+4
 3980 0046 3668     		ldr	r6, [r6]
 3981 0048 B742     		cmp	r7, r6
 3982 004a 01D0     		beq	.L352
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3983              		.loc 1 3309 0 is_stmt 0 discriminator 1
 3984 004c 8842     		cmp	r0, r1
ARM GAS  /tmp/ccYYaUhP.s 			page 174


 3985 004e 0ED2     		bcs	.L355
 3986              	.L352:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3987              		.loc 1 3318 0 is_stmt 1
 3988 0050 9A42     		cmp	r2, r3
 3989 0052 06D2     		bcs	.L353
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3990              		.loc 1 3321 0
 3991 0054 9B1A     		subs	r3, r3, r2
 3992 0056 2360     		str	r3, [r4]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3993              		.loc 1 3322 0
 3994 0058 2846     		mov	r0, r5
 3995              	.LVL346:
 3996 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3997              	.LVL347:
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3998              		.loc 1 3323 0
 3999 005e 0024     		movs	r4, #0
 4000              	.LVL348:
 4001 0060 06E0     		b	.L351
 4002              	.LVL349:
 4003              	.L353:
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4004              		.loc 1 3327 0
 4005 0062 0023     		movs	r3, #0
 4006 0064 2360     		str	r3, [r4]
 4007              	.LVL350:
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4008              		.loc 1 3328 0
 4009 0066 0124     		movs	r4, #1
 4010              	.LVL351:
 4011 0068 02E0     		b	.L351
 4012              	.LVL352:
 4013              	.L354:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4014              		.loc 1 3304 0
 4015 006a 0024     		movs	r4, #0
 4016              	.LVL353:
 4017 006c 00E0     		b	.L351
 4018              	.LVL354:
 4019              	.L355:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4020              		.loc 1 3316 0
 4021 006e 0124     		movs	r4, #1
 4022              	.LVL355:
 4023              	.L351:
 4024              	.LBE208:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4025              		.loc 1 3331 0
 4026 0070 FFF7FEFF 		bl	vPortExitCritical
 4027              	.LVL356:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4028              		.loc 1 3334 0
 4029 0074 2046     		mov	r0, r4
 4030 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4031              	.LVL357:
ARM GAS  /tmp/ccYYaUhP.s 			page 175


 4032              	.L358:
 4033              		.align	2
 4034              	.L357:
 4035 0078 00000000 		.word	.LANCHOR15
 4036 007c 00000000 		.word	.LANCHOR17
 4037              		.cfi_endproc
 4038              	.LFE38:
 4040              		.section	.text.vTaskMissedYield,"ax",%progbits
 4041              		.align	2
 4042              		.global	vTaskMissedYield
 4043              		.thumb
 4044              		.thumb_func
 4046              	vTaskMissedYield:
 4047              	.LFB39:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4048              		.loc 1 3338 0
 4049              		.cfi_startproc
 4050              		@ args = 0, pretend = 0, frame = 0
 4051              		@ frame_needed = 0, uses_anonymous_args = 0
 4052              		@ link register save eliminated.
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4053              		.loc 1 3339 0
 4054 0000 0122     		movs	r2, #1
 4055 0002 014B     		ldr	r3, .L360
 4056 0004 1A60     		str	r2, [r3]
 4057 0006 7047     		bx	lr
 4058              	.L361:
 4059              		.align	2
 4060              	.L360:
 4061 0008 00000000 		.word	.LANCHOR18
 4062              		.cfi_endproc
 4063              	.LFE39:
 4065              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4066              		.align	2
 4067              		.global	uxTaskGetTaskNumber
 4068              		.thumb
 4069              		.thumb_func
 4071              	uxTaskGetTaskNumber:
 4072              	.LFB40:
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4073              		.loc 1 3346 0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 0
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 4077              		@ link register save eliminated.
 4078              	.LVL358:
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4079              		.loc 1 3350 0
 4080 0000 08B1     		cbz	r0, .L364
 4081              	.LVL359:
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4082              		.loc 1 3353 0
 4083 0002 806C     		ldr	r0, [r0, #72]
 4084              	.LVL360:
 4085 0004 7047     		bx	lr
 4086              	.LVL361:
 4087              	.L364:
ARM GAS  /tmp/ccYYaUhP.s 			page 176


3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4088              		.loc 1 3357 0
 4089 0006 0020     		movs	r0, #0
 4090              	.LVL362:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4091              		.loc 1 3361 0
 4092 0008 7047     		bx	lr
 4093              		.cfi_endproc
 4094              	.LFE40:
 4096 000a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4097              		.align	2
 4098              		.global	vTaskSetTaskNumber
 4099              		.thumb
 4100              		.thumb_func
 4102              	vTaskSetTaskNumber:
 4103              	.LFB41:
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4104              		.loc 1 3369 0
 4105              		.cfi_startproc
 4106              		@ args = 0, pretend = 0, frame = 0
 4107              		@ frame_needed = 0, uses_anonymous_args = 0
 4108              		@ link register save eliminated.
 4109              	.LVL363:
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4110              		.loc 1 3372 0
 4111 0000 00B1     		cbz	r0, .L365
 4112              	.LVL364:
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4113              		.loc 1 3375 0
 4114 0002 8164     		str	r1, [r0, #72]
 4115              	.LVL365:
 4116              	.L365:
 4117 0004 7047     		bx	lr
 4118              		.cfi_endproc
 4119              	.LFE41:
 4121 0006 00BF     		.section	.text.vTaskGetInfo,"ax",%progbits
 4122              		.align	2
 4123              		.global	vTaskGetInfo
 4124              		.thumb
 4125              		.thumb_func
 4127              	vTaskGetInfo:
 4128              	.LFB45:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4129              		.loc 1 3671 0
 4130              		.cfi_startproc
 4131              		@ args = 0, pretend = 0, frame = 0
 4132              		@ frame_needed = 0, uses_anonymous_args = 0
 4133              	.LVL366:
 4134 0000 70B5     		push	{r4, r5, r6, lr}
 4135              	.LCFI40:
 4136              		.cfi_def_cfa_offset 16
 4137              		.cfi_offset 4, -16
 4138              		.cfi_offset 5, -12
 4139              		.cfi_offset 6, -8
 4140              		.cfi_offset 14, -4
 4141 0002 0C46     		mov	r4, r1
 4142 0004 1646     		mov	r6, r2
ARM GAS  /tmp/ccYYaUhP.s 			page 177


3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4143              		.loc 1 3675 0
 4144 0006 0546     		mov	r5, r0
 4145 0008 08B9     		cbnz	r0, .L368
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4146              		.loc 1 3675 0 is_stmt 0 discriminator 1
 4147 000a 194A     		ldr	r2, .L376
 4148              	.LVL367:
 4149 000c 1568     		ldr	r5, [r2]
 4150              	.LVL368:
 4151              	.L368:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4152              		.loc 1 3677 0 is_stmt 1 discriminator 4
 4153 000e 2560     		str	r5, [r4]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4154              		.loc 1 3678 0 discriminator 4
 4155 0010 05F13402 		add	r2, r5, #52
 4156 0014 6260     		str	r2, [r4, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4157              		.loc 1 3679 0 discriminator 4
 4158 0016 EA6A     		ldr	r2, [r5, #44]
 4159 0018 2261     		str	r2, [r4, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4160              		.loc 1 3680 0 discriminator 4
 4161 001a 2A6B     		ldr	r2, [r5, #48]
 4162 001c E261     		str	r2, [r4, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4163              		.loc 1 3681 0 discriminator 4
 4164 001e 6A6C     		ldr	r2, [r5, #68]
 4165 0020 A260     		str	r2, [r4, #8]
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4166              		.loc 1 3685 0 discriminator 4
 4167 0022 EA6C     		ldr	r2, [r5, #76]
 4168 0024 6261     		str	r2, [r4, #20]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4169              		.loc 1 3699 0 discriminator 4
 4170 0026 0022     		movs	r2, #0
 4171 0028 A261     		str	r2, [r4, #24]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4172              		.loc 1 3706 0 discriminator 4
 4173 002a 052B     		cmp	r3, #5
 4174 002c 12D0     		beq	.L369
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4175              		.loc 1 3708 0
 4176 002e 104A     		ldr	r2, .L376
 4177 0030 1268     		ldr	r2, [r2]
 4178 0032 9542     		cmp	r5, r2
 4179 0034 02D1     		bne	.L370
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4180              		.loc 1 3710 0
 4181 0036 0023     		movs	r3, #0
 4182              	.LVL369:
 4183 0038 2373     		strb	r3, [r4, #12]
 4184 003a 0FE0     		b	.L371
 4185              	.LVL370:
 4186              	.L370:
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 178


 4187              		.loc 1 3714 0
 4188 003c 2373     		strb	r3, [r4, #12]
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4189              		.loc 1 3721 0
 4190 003e 032B     		cmp	r3, #3
 4191 0040 0CD1     		bne	.L371
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4192              		.loc 1 3723 0
 4193 0042 FFF7FEFF 		bl	vTaskSuspendAll
 4194              	.LVL371:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4195              		.loc 1 3725 0
 4196 0046 AB6A     		ldr	r3, [r5, #40]
 4197 0048 0BB1     		cbz	r3, .L372
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4198              		.loc 1 3727 0
 4199 004a 0223     		movs	r3, #2
 4200 004c 2373     		strb	r3, [r4, #12]
 4201              	.L372:
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4202              		.loc 1 3730 0
 4203 004e FFF7FEFF 		bl	xTaskResumeAll
 4204              	.LVL372:
 4205 0052 03E0     		b	.L371
 4206              	.LVL373:
 4207              	.L369:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4208              		.loc 1 3738 0
 4209 0054 2846     		mov	r0, r5
 4210 0056 FFF7FEFF 		bl	eTaskGetState
 4211              	.LVL374:
 4212 005a 2073     		strb	r0, [r4, #12]
 4213              	.L371:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4214              		.loc 1 3743 0
 4215 005c 26B1     		cbz	r6, .L373
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4216              		.loc 1 3751 0
 4217 005e 286B     		ldr	r0, [r5, #48]
 4218 0060 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4219              	.LVL375:
 4220 0064 2084     		strh	r0, [r4, #32]	@ movhi
 4221 0066 70BD     		pop	{r4, r5, r6, pc}
 4222              	.LVL376:
 4223              	.L373:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4224              		.loc 1 3757 0
 4225 0068 0023     		movs	r3, #0
 4226 006a 2384     		strh	r3, [r4, #32]	@ movhi
 4227 006c 70BD     		pop	{r4, r5, r6, pc}
 4228              	.LVL377:
 4229              	.L377:
 4230 006e 00BF     		.align	2
 4231              	.L376:
 4232 0070 00000000 		.word	.LANCHOR10
 4233              		.cfi_endproc
 4234              	.LFE45:
ARM GAS  /tmp/ccYYaUhP.s 			page 179


 4236              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4237              		.align	2
 4238              		.thumb
 4239              		.thumb_func
 4241              	prvListTasksWithinSingleList:
 4242              	.LFB46:
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4243              		.loc 1 3767 0
 4244              		.cfi_startproc
 4245              		@ args = 0, pretend = 0, frame = 0
 4246              		@ frame_needed = 0, uses_anonymous_args = 0
 4247              	.LVL378:
 4248 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4249              	.LCFI41:
 4250              		.cfi_def_cfa_offset 32
 4251              		.cfi_offset 4, -32
 4252              		.cfi_offset 5, -28
 4253              		.cfi_offset 6, -24
 4254              		.cfi_offset 7, -20
 4255              		.cfi_offset 8, -16
 4256              		.cfi_offset 9, -12
 4257              		.cfi_offset 10, -8
 4258              		.cfi_offset 14, -4
 4259              	.LVL379:
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4260              		.loc 1 3771 0
 4261 0004 0B68     		ldr	r3, [r1]
 4262 0006 2BB3     		cbz	r3, .L383
 4263              	.LVL380:
 4264              	.LBB209:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4265              		.loc 1 3773 0
 4266 0008 4B68     		ldr	r3, [r1, #4]
 4267 000a 5B68     		ldr	r3, [r3, #4]
 4268 000c 4B60     		str	r3, [r1, #4]
 4269 000e 01F10809 		add	r9, r1, #8
 4270 0012 4B45     		cmp	r3, r9
 4271 0014 01D1     		bne	.L380
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4272              		.loc 1 3773 0 is_stmt 0 discriminator 1
 4273 0016 5B68     		ldr	r3, [r3, #4]
 4274 0018 4B60     		str	r3, [r1, #4]
 4275              	.L380:
 4276 001a 9046     		mov	r8, r2
 4277 001c 0D46     		mov	r5, r1
 4278 001e 0746     		mov	r7, r0
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4279              		.loc 1 3773 0 discriminator 3
 4280 0020 4B68     		ldr	r3, [r1, #4]
 4281 0022 D3F80CA0 		ldr	r10, [r3, #12]
 4282              	.LVL381:
 4283              	.LBE209:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4284              		.loc 1 3769 0 is_stmt 1 discriminator 3
 4285 0026 0024     		movs	r4, #0
 4286              	.LVL382:
 4287              	.L382:
ARM GAS  /tmp/ccYYaUhP.s 			page 180


 4288              	.LBB210:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4289              		.loc 1 3781 0
 4290 0028 6B68     		ldr	r3, [r5, #4]
 4291 002a 5B68     		ldr	r3, [r3, #4]
 4292 002c 6B60     		str	r3, [r5, #4]
 4293 002e 9945     		cmp	r9, r3
 4294 0030 01D1     		bne	.L381
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4295              		.loc 1 3781 0 is_stmt 0 discriminator 1
 4296 0032 5B68     		ldr	r3, [r3, #4]
 4297 0034 6B60     		str	r3, [r5, #4]
 4298              	.L381:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4299              		.loc 1 3781 0 discriminator 3
 4300 0036 6B68     		ldr	r3, [r5, #4]
 4301 0038 DE68     		ldr	r6, [r3, #12]
 4302              	.LVL383:
 4303              	.LBE210:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4304              		.loc 1 3782 0 is_stmt 1 discriminator 3
 4305 003a 04EBC403 		add	r3, r4, r4, lsl #3
 4306 003e 9900     		lsls	r1, r3, #2
 4307 0040 4346     		mov	r3, r8
 4308 0042 0122     		movs	r2, #1
 4309 0044 3944     		add	r1, r1, r7
 4310 0046 3046     		mov	r0, r6
 4311 0048 FFF7FEFF 		bl	vTaskGetInfo
 4312              	.LVL384:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4313              		.loc 1 3783 0 discriminator 3
 4314 004c 0134     		adds	r4, r4, #1
 4315              	.LVL385:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4316              		.loc 1 3784 0 discriminator 3
 4317 004e B245     		cmp	r10, r6
 4318 0050 EAD1     		bne	.L382
 4319 0052 00E0     		b	.L379
 4320              	.LVL386:
 4321              	.L383:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4322              		.loc 1 3769 0
 4323 0054 0024     		movs	r4, #0
 4324              	.LVL387:
 4325              	.L379:
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4326              		.loc 1 3792 0
 4327 0056 2046     		mov	r0, r4
 4328 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4329              		.cfi_endproc
 4330              	.LFE46:
 4332              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4333              		.align	2
 4334              		.global	uxTaskGetSystemState
 4335              		.thumb
 4336              		.thumb_func
 4338              	uxTaskGetSystemState:
ARM GAS  /tmp/ccYYaUhP.s 			page 181


 4339              	.LFB27:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4340              		.loc 1 2506 0
 4341              		.cfi_startproc
 4342              		@ args = 0, pretend = 0, frame = 0
 4343              		@ frame_needed = 0, uses_anonymous_args = 0
 4344              	.LVL388:
 4345 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4346              	.LCFI42:
 4347              		.cfi_def_cfa_offset 24
 4348              		.cfi_offset 3, -24
 4349              		.cfi_offset 4, -20
 4350              		.cfi_offset 5, -16
 4351              		.cfi_offset 6, -12
 4352              		.cfi_offset 7, -8
 4353              		.cfi_offset 14, -4
 4354 0002 0746     		mov	r7, r0
 4355 0004 0C46     		mov	r4, r1
 4356 0006 1646     		mov	r6, r2
 4357              	.LVL389:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4358              		.loc 1 2509 0
 4359 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4360              	.LVL390:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4361              		.loc 1 2512 0
 4362 000c 224B     		ldr	r3, .L390
 4363 000e 1B68     		ldr	r3, [r3]
 4364 0010 A342     		cmp	r3, r4
 4365 0012 3BD8     		bhi	.L388
 4366 0014 3824     		movs	r4, #56
 4367              	.LVL391:
 4368 0016 0025     		movs	r5, #0
 4369              	.LVL392:
 4370              	.L387:
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4371              		.loc 1 2518 0 discriminator 1
 4372 0018 013C     		subs	r4, r4, #1
 4373              	.LVL393:
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4374              		.loc 1 2519 0 discriminator 1
 4375 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4376 001e 9800     		lsls	r0, r3, #2
 4377 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4378 0024 9300     		lsls	r3, r2, #2
 4379 0026 0122     		movs	r2, #1
 4380 0028 1C49     		ldr	r1, .L390+4
 4381 002a 1944     		add	r1, r1, r3
 4382 002c 3844     		add	r0, r0, r7
 4383 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4384              	.LVL394:
 4385 0032 0544     		add	r5, r5, r0
 4386              	.LVL395:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4387              		.loc 1 2521 0 discriminator 1
 4388 0034 002C     		cmp	r4, #0
 4389 0036 EFD1     		bne	.L387
ARM GAS  /tmp/ccYYaUhP.s 			page 182


2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4390              		.loc 1 2525 0
 4391 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4392 003c 9800     		lsls	r0, r3, #2
 4393 003e 184B     		ldr	r3, .L390+8
 4394 0040 1968     		ldr	r1, [r3]
 4395 0042 0222     		movs	r2, #2
 4396 0044 3844     		add	r0, r0, r7
 4397 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4398              	.LVL396:
 4399 004a 2C18     		adds	r4, r5, r0
 4400              	.LVL397:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4401              		.loc 1 2526 0
 4402 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4403 0050 9800     		lsls	r0, r3, #2
 4404 0052 144B     		ldr	r3, .L390+12
 4405 0054 1968     		ldr	r1, [r3]
 4406 0056 0222     		movs	r2, #2
 4407 0058 3844     		add	r0, r0, r7
 4408 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4409              	.LVL398:
 4410 005e 0444     		add	r4, r4, r0
 4411              	.LVL399:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4412              		.loc 1 2532 0
 4413 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4414 0064 9800     		lsls	r0, r3, #2
 4415 0066 0422     		movs	r2, #4
 4416 0068 0F49     		ldr	r1, .L390+16
 4417 006a 3844     		add	r0, r0, r7
 4418 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4419              	.LVL400:
 4420 0070 0444     		add	r4, r4, r0
 4421              	.LVL401:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4422              		.loc 1 2540 0
 4423 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4424 0076 9800     		lsls	r0, r3, #2
 4425 0078 0322     		movs	r2, #3
 4426 007a 0C49     		ldr	r1, .L390+20
 4427 007c 3844     		add	r0, r0, r7
 4428 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4429              	.LVL402:
 4430 0082 0444     		add	r4, r4, r0
 4431              	.LVL403:
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4432              		.loc 1 2557 0
 4433 0084 1EB1     		cbz	r6, .L386
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4434              		.loc 1 2559 0
 4435 0086 0023     		movs	r3, #0
 4436 0088 3360     		str	r3, [r6]
 4437 008a 00E0     		b	.L386
 4438              	.LVL404:
 4439              	.L388:
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 183


 4440              		.loc 1 2507 0
 4441 008c 0024     		movs	r4, #0
 4442              	.LVL405:
 4443              	.L386:
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4444              		.loc 1 2569 0
 4445 008e FFF7FEFF 		bl	xTaskResumeAll
 4446              	.LVL406:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4447              		.loc 1 2572 0
 4448 0092 2046     		mov	r0, r4
 4449 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4450              	.LVL407:
 4451              	.L391:
 4452 0096 00BF     		.align	2
 4453              	.L390:
 4454 0098 00000000 		.word	.LANCHOR9
 4455 009c 00000000 		.word	.LANCHOR4
 4456 00a0 00000000 		.word	.LANCHOR2
 4457 00a4 00000000 		.word	.LANCHOR8
 4458 00a8 00000000 		.word	.LANCHOR7
 4459 00ac 00000000 		.word	.LANCHOR0
 4460              		.cfi_endproc
 4461              	.LFE27:
 4463              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4464              		.align	2
 4465              		.global	uxTaskGetStackHighWaterMark
 4466              		.thumb
 4467              		.thumb_func
 4469              	uxTaskGetStackHighWaterMark:
 4470              	.LFB48:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4471              		.loc 1 3860 0
 4472              		.cfi_startproc
 4473              		@ args = 0, pretend = 0, frame = 0
 4474              		@ frame_needed = 0, uses_anonymous_args = 0
 4475              	.LVL408:
 4476 0000 08B5     		push	{r3, lr}
 4477              	.LCFI43:
 4478              		.cfi_def_cfa_offset 8
 4479              		.cfi_offset 3, -8
 4480              		.cfi_offset 14, -4
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4481              		.loc 1 3865 0
 4482 0002 0346     		mov	r3, r0
 4483 0004 08B9     		cbnz	r0, .L393
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4484              		.loc 1 3865 0 is_stmt 0 discriminator 1
 4485 0006 034B     		ldr	r3, .L395
 4486 0008 1B68     		ldr	r3, [r3]
 4487              	.LVL409:
 4488              	.L393:
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4489              		.loc 1 3877 0 is_stmt 1 discriminator 4
 4490 000a 186B     		ldr	r0, [r3, #48]
 4491 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4492              	.LVL410:
ARM GAS  /tmp/ccYYaUhP.s 			page 184


3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4493              		.loc 1 3880 0 discriminator 4
 4494 0010 08BD     		pop	{r3, pc}
 4495              	.L396:
 4496 0012 00BF     		.align	2
 4497              	.L395:
 4498 0014 00000000 		.word	.LANCHOR10
 4499              		.cfi_endproc
 4500              	.LFE48:
 4502              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4503              		.align	2
 4504              		.global	xTaskGetCurrentTaskHandle
 4505              		.thumb
 4506              		.thumb_func
 4508              	xTaskGetCurrentTaskHandle:
 4509              	.LFB51:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4510              		.loc 1 3970 0
 4511              		.cfi_startproc
 4512              		@ args = 0, pretend = 0, frame = 0
 4513              		@ frame_needed = 0, uses_anonymous_args = 0
 4514              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4515              		.loc 1 3976 0
 4516 0000 014B     		ldr	r3, .L398
 4517 0002 1868     		ldr	r0, [r3]
 4518              	.LVL411:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4519              		.loc 1 3979 0
 4520 0004 7047     		bx	lr
 4521              	.L399:
 4522 0006 00BF     		.align	2
 4523              	.L398:
 4524 0008 00000000 		.word	.LANCHOR10
 4525              		.cfi_endproc
 4526              	.LFE51:
 4528              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4529              		.align	2
 4530              		.global	xTaskGetSchedulerState
 4531              		.thumb
 4532              		.thumb_func
 4534              	xTaskGetSchedulerState:
 4535              	.LFB52:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4536              		.loc 1 3987 0
 4537              		.cfi_startproc
 4538              		@ args = 0, pretend = 0, frame = 0
 4539              		@ frame_needed = 0, uses_anonymous_args = 0
 4540              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4541              		.loc 1 3990 0
 4542 0000 054B     		ldr	r3, .L404
 4543 0002 1B68     		ldr	r3, [r3]
 4544 0004 23B1     		cbz	r3, .L402
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4545              		.loc 1 3996 0
 4546 0006 054B     		ldr	r3, .L404+4
ARM GAS  /tmp/ccYYaUhP.s 			page 185


 4547 0008 1B68     		ldr	r3, [r3]
 4548 000a 1BB9     		cbnz	r3, .L403
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4549              		.loc 1 3998 0
 4550 000c 0220     		movs	r0, #2
 4551 000e 7047     		bx	lr
 4552              	.L402:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4553              		.loc 1 3992 0
 4554 0010 0120     		movs	r0, #1
 4555 0012 7047     		bx	lr
 4556              	.L403:
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4557              		.loc 1 4002 0
 4558 0014 0020     		movs	r0, #0
 4559              	.LVL412:
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4560              		.loc 1 4007 0
 4561 0016 7047     		bx	lr
 4562              	.L405:
 4563              		.align	2
 4564              	.L404:
 4565 0018 00000000 		.word	.LANCHOR11
 4566 001c 00000000 		.word	.LANCHOR16
 4567              		.cfi_endproc
 4568              	.LFE52:
 4570              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4571              		.align	2
 4572              		.global	xTaskPriorityInherit
 4573              		.thumb
 4574              		.thumb_func
 4576              	xTaskPriorityInherit:
 4577              	.LFB53:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4578              		.loc 1 4015 0
 4579              		.cfi_startproc
 4580              		@ args = 0, pretend = 0, frame = 0
 4581              		@ frame_needed = 0, uses_anonymous_args = 0
 4582              	.LVL413:
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4583              		.loc 1 4022 0
 4584 0000 0028     		cmp	r0, #0
 4585 0002 3FD0     		beq	.L412
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4586              		.loc 1 4015 0
 4587 0004 38B5     		push	{r3, r4, r5, lr}
 4588              	.LCFI44:
 4589              		.cfi_def_cfa_offset 16
 4590              		.cfi_offset 3, -16
 4591              		.cfi_offset 4, -12
 4592              		.cfi_offset 5, -8
 4593              		.cfi_offset 14, -4
 4594 0006 0346     		mov	r3, r0
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4595              		.loc 1 4027 0
 4596 0008 C26A     		ldr	r2, [r0, #44]
 4597 000a 2049     		ldr	r1, .L415
ARM GAS  /tmp/ccYYaUhP.s 			page 186


 4598 000c 0968     		ldr	r1, [r1]
 4599 000e C96A     		ldr	r1, [r1, #44]
 4600 0010 8A42     		cmp	r2, r1
 4601 0012 2FD2     		bcs	.L408
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4602              		.loc 1 4032 0
 4603 0014 8169     		ldr	r1, [r0, #24]
 4604 0016 0029     		cmp	r1, #0
 4605 0018 05DB     		blt	.L409
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4606              		.loc 1 4034 0
 4607 001a 1C49     		ldr	r1, .L415
 4608 001c 0968     		ldr	r1, [r1]
 4609 001e C96A     		ldr	r1, [r1, #44]
 4610 0020 C1F13801 		rsb	r1, r1, #56
 4611 0024 8161     		str	r1, [r0, #24]
 4612              	.L409:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4613              		.loc 1 4043 0
 4614 0026 5869     		ldr	r0, [r3, #20]
 4615              	.LVL414:
 4616 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4617 002c 9100     		lsls	r1, r2, #2
 4618 002e 184A     		ldr	r2, .L415+4
 4619 0030 1144     		add	r1, r1, r2
 4620 0032 8842     		cmp	r0, r1
 4621 0034 18D1     		bne	.L410
 4622 0036 1D46     		mov	r5, r3
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4623              		.loc 1 4045 0
 4624 0038 1C1D     		adds	r4, r3, #4
 4625 003a 2046     		mov	r0, r4
 4626 003c FFF7FEFF 		bl	uxListRemove
 4627              	.LVL415:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4628              		.loc 1 4058 0
 4629 0040 124B     		ldr	r3, .L415
 4630 0042 1B68     		ldr	r3, [r3]
 4631 0044 DB6A     		ldr	r3, [r3, #44]
 4632 0046 EB62     		str	r3, [r5, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4633              		.loc 1 4059 0
 4634 0048 124A     		ldr	r2, .L415+8
 4635 004a 1268     		ldr	r2, [r2]
 4636 004c 9342     		cmp	r3, r2
 4637 004e 01D9     		bls	.L411
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4638              		.loc 1 4059 0 is_stmt 0 discriminator 1
 4639 0050 104A     		ldr	r2, .L415+8
 4640 0052 1360     		str	r3, [r2]
 4641              	.L411:
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4642              		.loc 1 4059 0 discriminator 3
 4643 0054 03EB8303 		add	r3, r3, r3, lsl #2
 4644 0058 9A00     		lsls	r2, r3, #2
 4645 005a 2146     		mov	r1, r4
 4646 005c 0C48     		ldr	r0, .L415+4
ARM GAS  /tmp/ccYYaUhP.s 			page 187


 4647 005e 1044     		add	r0, r0, r2
 4648 0060 FFF7FEFF 		bl	vListInsertEnd
 4649              	.LVL416:
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4650              		.loc 1 4070 0 is_stmt 1 discriminator 3
 4651 0064 0120     		movs	r0, #1
 4652 0066 38BD     		pop	{r3, r4, r5, pc}
 4653              	.LVL417:
 4654              	.L410:
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4655              		.loc 1 4064 0
 4656 0068 084A     		ldr	r2, .L415
 4657 006a 1268     		ldr	r2, [r2]
 4658 006c D26A     		ldr	r2, [r2, #44]
 4659 006e DA62     		str	r2, [r3, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4660              		.loc 1 4070 0
 4661 0070 0120     		movs	r0, #1
 4662 0072 38BD     		pop	{r3, r4, r5, pc}
 4663              	.LVL418:
 4664              	.L408:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4665              		.loc 1 4074 0
 4666 0074 C26C     		ldr	r2, [r0, #76]
 4667 0076 054B     		ldr	r3, .L415
 4668 0078 1B68     		ldr	r3, [r3]
 4669 007a DB6A     		ldr	r3, [r3, #44]
 4670 007c 9A42     		cmp	r2, r3
 4671 007e 03D3     		bcc	.L413
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4672              		.loc 1 4017 0
 4673 0080 0020     		movs	r0, #0
 4674              	.LVL419:
 4675 0082 38BD     		pop	{r3, r4, r5, pc}
 4676              	.LVL420:
 4677              	.L412:
 4678              	.LCFI45:
 4679              		.cfi_def_cfa_offset 0
 4680              		.cfi_restore 3
 4681              		.cfi_restore 4
 4682              		.cfi_restore 5
 4683              		.cfi_restore 14
 4684 0084 0020     		movs	r0, #0
 4685              	.LVL421:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4686              		.loc 1 4097 0
 4687 0086 7047     		bx	lr
 4688              	.LVL422:
 4689              	.L413:
 4690              	.LCFI46:
 4691              		.cfi_def_cfa_offset 16
 4692              		.cfi_offset 3, -16
 4693              		.cfi_offset 4, -12
 4694              		.cfi_offset 5, -8
 4695              		.cfi_offset 14, -4
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4696              		.loc 1 4083 0
ARM GAS  /tmp/ccYYaUhP.s 			page 188


 4697 0088 0120     		movs	r0, #1
 4698              	.LVL423:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4699              		.loc 1 4097 0
 4700 008a 38BD     		pop	{r3, r4, r5, pc}
 4701              	.L416:
 4702              		.align	2
 4703              	.L415:
 4704 008c 00000000 		.word	.LANCHOR10
 4705 0090 00000000 		.word	.LANCHOR4
 4706 0094 00000000 		.word	.LANCHOR13
 4707              		.cfi_endproc
 4708              	.LFE53:
 4710              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4711              		.align	2
 4712              		.global	xTaskPriorityDisinherit
 4713              		.thumb
 4714              		.thumb_func
 4716              	xTaskPriorityDisinherit:
 4717              	.LFB54:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4718              		.loc 1 4105 0
 4719              		.cfi_startproc
 4720              		@ args = 0, pretend = 0, frame = 0
 4721              		@ frame_needed = 0, uses_anonymous_args = 0
 4722              	.LVL424:
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4723              		.loc 1 4109 0
 4724 0000 0028     		cmp	r0, #0
 4725 0002 3AD0     		beq	.L424
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4726              		.loc 1 4105 0
 4727 0004 38B5     		push	{r3, r4, r5, lr}
 4728              	.LCFI47:
 4729              		.cfi_def_cfa_offset 16
 4730              		.cfi_offset 3, -16
 4731              		.cfi_offset 4, -12
 4732              		.cfi_offset 5, -8
 4733              		.cfi_offset 14, -4
 4734 0006 0346     		mov	r3, r0
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4735              		.loc 1 4115 0
 4736 0008 1F4A     		ldr	r2, .L428
 4737 000a 1268     		ldr	r2, [r2]
 4738 000c 9042     		cmp	r0, r2
 4739 000e 08D0     		beq	.L419
 4740              	.LBB211:
 4741              	.LBB212:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4742              		.loc 2 195 0
 4743              		.syntax unified
 4744              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4745 0010 4FF05003 			mov r3, #80												
 4746 0014 83F31188 		msr basepri, r3											
 4747 0018 BFF36F8F 		isb														
 4748 001c BFF34F8F 		dsb														
 4749              	
ARM GAS  /tmp/ccYYaUhP.s 			page 189


 4750              	@ 0 "" 2
 4751              	.LVL425:
 4752              		.thumb
 4753              		.syntax unified
 4754              	.L420:
 4755 0020 FEE7     		b	.L420
 4756              	.L419:
 4757              	.LBE212:
 4758              	.LBE211:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4759              		.loc 1 4116 0
 4760 0022 026D     		ldr	r2, [r0, #80]
 4761 0024 42B9     		cbnz	r2, .L421
 4762              	.LBB213:
 4763              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4764              		.loc 2 195 0
 4765              		.syntax unified
 4766              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4767 0026 4FF05003 			mov r3, #80												
 4768 002a 83F31188 		msr basepri, r3											
 4769 002e BFF36F8F 		isb														
 4770 0032 BFF34F8F 		dsb														
 4771              	
 4772              	@ 0 "" 2
 4773              	.LVL426:
 4774              		.thumb
 4775              		.syntax unified
 4776              	.L422:
 4777 0036 FEE7     		b	.L422
 4778              	.L421:
 4779              	.LBE214:
 4780              	.LBE213:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4781              		.loc 1 4117 0
 4782 0038 013A     		subs	r2, r2, #1
 4783 003a 0265     		str	r2, [r0, #80]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4784              		.loc 1 4121 0
 4785 003c C06A     		ldr	r0, [r0, #44]
 4786              	.LVL427:
 4787 003e D96C     		ldr	r1, [r3, #76]
 4788 0040 8842     		cmp	r0, r1
 4789 0042 1CD0     		beq	.L425
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4790              		.loc 1 4124 0
 4791 0044 EAB9     		cbnz	r2, .L426
 4792 0046 1C46     		mov	r4, r3
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4793              		.loc 1 4131 0
 4794 0048 1D1D     		adds	r5, r3, #4
 4795 004a 2846     		mov	r0, r5
 4796 004c FFF7FEFF 		bl	uxListRemove
 4797              	.LVL428:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4798              		.loc 1 4143 0
 4799 0050 E36C     		ldr	r3, [r4, #76]
ARM GAS  /tmp/ccYYaUhP.s 			page 190


 4800 0052 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4801              		.loc 1 4148 0
 4802 0054 C3F13802 		rsb	r2, r3, #56
 4803 0058 A261     		str	r2, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4804              		.loc 1 4149 0
 4805 005a 0C4A     		ldr	r2, .L428+4
 4806 005c 1268     		ldr	r2, [r2]
 4807 005e 9342     		cmp	r3, r2
 4808 0060 01D9     		bls	.L423
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4809              		.loc 1 4149 0 is_stmt 0 discriminator 1
 4810 0062 0A4A     		ldr	r2, .L428+4
 4811 0064 1360     		str	r3, [r2]
 4812              	.L423:
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4813              		.loc 1 4149 0 discriminator 3
 4814 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4815 006a 9A00     		lsls	r2, r3, #2
 4816 006c 2946     		mov	r1, r5
 4817 006e 0848     		ldr	r0, .L428+8
 4818 0070 1044     		add	r0, r0, r2
 4819 0072 FFF7FEFF 		bl	vListInsertEnd
 4820              	.LVL429:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4821              		.loc 1 4159 0 is_stmt 1 discriminator 3
 4822 0076 0120     		movs	r0, #1
 4823 0078 38BD     		pop	{r3, r4, r5, pc}
 4824              	.LVL430:
 4825              	.L424:
 4826              	.LCFI48:
 4827              		.cfi_def_cfa_offset 0
 4828              		.cfi_restore 3
 4829              		.cfi_restore 4
 4830              		.cfi_restore 5
 4831              		.cfi_restore 14
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4832              		.loc 1 4107 0
 4833 007a 0020     		movs	r0, #0
 4834              	.LVL431:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4835              		.loc 1 4177 0
 4836 007c 7047     		bx	lr
 4837              	.LVL432:
 4838              	.L425:
 4839              	.LCFI49:
 4840              		.cfi_def_cfa_offset 16
 4841              		.cfi_offset 3, -16
 4842              		.cfi_offset 4, -12
 4843              		.cfi_offset 5, -8
 4844              		.cfi_offset 14, -4
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4845              		.loc 1 4107 0
 4846 007e 0020     		movs	r0, #0
 4847 0080 38BD     		pop	{r3, r4, r5, pc}
 4848              	.LVL433:
ARM GAS  /tmp/ccYYaUhP.s 			page 191


 4849              	.L426:
 4850 0082 0020     		movs	r0, #0
 4851              	.LVL434:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4852              		.loc 1 4177 0
 4853 0084 38BD     		pop	{r3, r4, r5, pc}
 4854              	.LVL435:
 4855              	.L429:
 4856 0086 00BF     		.align	2
 4857              	.L428:
 4858 0088 00000000 		.word	.LANCHOR10
 4859 008c 00000000 		.word	.LANCHOR13
 4860 0090 00000000 		.word	.LANCHOR4
 4861              		.cfi_endproc
 4862              	.LFE54:
 4864              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4865              		.align	2
 4866              		.global	vTaskPriorityDisinheritAfterTimeout
 4867              		.thumb
 4868              		.thumb_func
 4870              	vTaskPriorityDisinheritAfterTimeout:
 4871              	.LFB55:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4872              		.loc 1 4185 0
 4873              		.cfi_startproc
 4874              		@ args = 0, pretend = 0, frame = 0
 4875              		@ frame_needed = 0, uses_anonymous_args = 0
 4876              	.LVL436:
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4877              		.loc 1 4190 0
 4878 0000 0028     		cmp	r0, #0
 4879 0002 46D0     		beq	.L440
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4880              		.loc 1 4185 0
 4881 0004 38B5     		push	{r3, r4, r5, lr}
 4882              	.LCFI50:
 4883              		.cfi_def_cfa_offset 16
 4884              		.cfi_offset 3, -16
 4885              		.cfi_offset 4, -12
 4886              		.cfi_offset 5, -8
 4887              		.cfi_offset 14, -4
 4888 0006 0346     		mov	r3, r0
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4889              		.loc 1 4194 0
 4890 0008 006D     		ldr	r0, [r0, #80]
 4891              	.LVL437:
 4892 000a 40B9     		cbnz	r0, .L432
 4893              	.LBB215:
 4894              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4895              		.loc 2 195 0
 4896              		.syntax unified
 4897              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4898 000c 4FF05003 			mov r3, #80												
 4899 0010 83F31188 		msr basepri, r3											
 4900 0014 BFF36F8F 		isb														
 4901 0018 BFF34F8F 		dsb														
ARM GAS  /tmp/ccYYaUhP.s 			page 192


 4902              	
 4903              	@ 0 "" 2
 4904              	.LVL438:
 4905              		.thumb
 4906              		.syntax unified
 4907              	.L433:
 4908 001c FEE7     		b	.L433
 4909              	.LVL439:
 4910              	.L432:
 4911              	.LBE216:
 4912              	.LBE215:
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4913              		.loc 1 4200 0
 4914 001e DA6C     		ldr	r2, [r3, #76]
 4915 0020 8A42     		cmp	r2, r1
 4916 0022 00D2     		bcs	.L434
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4917              		.loc 1 4202 0
 4918 0024 0A46     		mov	r2, r1
 4919              	.L434:
 4920              	.LVL440:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4921              		.loc 1 4210 0
 4922 0026 D96A     		ldr	r1, [r3, #44]
 4923              	.LVL441:
 4924 0028 8A42     		cmp	r2, r1
 4925 002a 31D0     		beq	.L430
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4926              		.loc 1 4216 0
 4927 002c 0128     		cmp	r0, #1
 4928 002e 2FD1     		bne	.L430
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4929              		.loc 1 4221 0
 4930 0030 1848     		ldr	r0, .L441
 4931 0032 0068     		ldr	r0, [r0]
 4932 0034 8342     		cmp	r3, r0
 4933 0036 08D1     		bne	.L435
 4934              	.LBB217:
 4935              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4936              		.loc 2 195 0
 4937              		.syntax unified
 4938              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4939 0038 4FF05003 			mov r3, #80												
 4940 003c 83F31188 		msr basepri, r3											
 4941 0040 BFF36F8F 		isb														
 4942 0044 BFF34F8F 		dsb														
 4943              	
 4944              	@ 0 "" 2
 4945              	.LVL442:
 4946              		.thumb
 4947              		.syntax unified
 4948              	.L436:
 4949 0048 FEE7     		b	.L436
 4950              	.LVL443:
 4951              	.L435:
 4952              	.LBE218:
ARM GAS  /tmp/ccYYaUhP.s 			page 193


 4953              	.LBE217:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4954              		.loc 1 4228 0
 4955 004a DA62     		str	r2, [r3, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4956              		.loc 1 4232 0
 4957 004c 9869     		ldr	r0, [r3, #24]
 4958 004e 0028     		cmp	r0, #0
 4959 0050 02DB     		blt	.L437
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4960              		.loc 1 4234 0
 4961 0052 C2F13802 		rsb	r2, r2, #56
 4962              	.LVL444:
 4963 0056 9A61     		str	r2, [r3, #24]
 4964              	.L437:
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4965              		.loc 1 4247 0
 4966 0058 5869     		ldr	r0, [r3, #20]
 4967 005a 01EB8101 		add	r1, r1, r1, lsl #2
 4968              	.LVL445:
 4969 005e 8A00     		lsls	r2, r1, #2
 4970 0060 0D49     		ldr	r1, .L441+4
 4971 0062 0A44     		add	r2, r2, r1
 4972 0064 9042     		cmp	r0, r2
 4973 0066 13D1     		bne	.L430
 4974 0068 1C46     		mov	r4, r3
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4975              		.loc 1 4249 0
 4976 006a 1D1D     		adds	r5, r3, #4
 4977 006c 2846     		mov	r0, r5
 4978 006e FFF7FEFF 		bl	uxListRemove
 4979              	.LVL446:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4980              		.loc 1 4261 0
 4981 0072 E36A     		ldr	r3, [r4, #44]
 4982 0074 094A     		ldr	r2, .L441+8
 4983 0076 1268     		ldr	r2, [r2]
 4984 0078 9342     		cmp	r3, r2
 4985 007a 01D9     		bls	.L438
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4986              		.loc 1 4261 0 is_stmt 0 discriminator 1
 4987 007c 074A     		ldr	r2, .L441+8
 4988 007e 1360     		str	r3, [r2]
 4989              	.L438:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4990              		.loc 1 4261 0 discriminator 3
 4991 0080 03EB8303 		add	r3, r3, r3, lsl #2
 4992 0084 9A00     		lsls	r2, r3, #2
 4993 0086 2946     		mov	r1, r5
 4994 0088 0348     		ldr	r0, .L441+4
 4995 008a 1044     		add	r0, r0, r2
 4996 008c FFF7FEFF 		bl	vListInsertEnd
 4997              	.LVL447:
 4998              	.L430:
 4999 0090 38BD     		pop	{r3, r4, r5, pc}
 5000              	.LVL448:
 5001              	.L440:
ARM GAS  /tmp/ccYYaUhP.s 			page 194


 5002              	.LCFI51:
 5003              		.cfi_def_cfa_offset 0
 5004              		.cfi_restore 3
 5005              		.cfi_restore 4
 5006              		.cfi_restore 5
 5007              		.cfi_restore 14
 5008 0092 7047     		bx	lr
 5009              	.L442:
 5010              		.align	2
 5011              	.L441:
 5012 0094 00000000 		.word	.LANCHOR10
 5013 0098 00000000 		.word	.LANCHOR4
 5014 009c 00000000 		.word	.LANCHOR13
 5015              		.cfi_endproc
 5016              	.LFE55:
 5018              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5019              		.align	2
 5020              		.global	uxTaskResetEventItemValue
 5021              		.thumb
 5022              		.thumb_func
 5024              	uxTaskResetEventItemValue:
 5025              	.LFB56:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5026              		.loc 1 4603 0 is_stmt 1
 5027              		.cfi_startproc
 5028              		@ args = 0, pretend = 0, frame = 0
 5029              		@ frame_needed = 0, uses_anonymous_args = 0
 5030              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5031              		.loc 1 4606 0
 5032 0000 044B     		ldr	r3, .L444
 5033 0002 1A68     		ldr	r2, [r3]
 5034 0004 9069     		ldr	r0, [r2, #24]
 5035              	.LVL449:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5036              		.loc 1 4610 0
 5037 0006 1A68     		ldr	r2, [r3]
 5038 0008 1B68     		ldr	r3, [r3]
 5039 000a DB6A     		ldr	r3, [r3, #44]
 5040 000c C3F13803 		rsb	r3, r3, #56
 5041 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5042              		.loc 1 4613 0
 5043 0012 7047     		bx	lr
 5044              	.L445:
 5045              		.align	2
 5046              	.L444:
 5047 0014 00000000 		.word	.LANCHOR10
 5048              		.cfi_endproc
 5049              	.LFE56:
 5051              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5052              		.align	2
 5053              		.global	pvTaskIncrementMutexHeldCount
 5054              		.thumb
 5055              		.thumb_func
 5057              	pvTaskIncrementMutexHeldCount:
 5058              	.LFB57:
ARM GAS  /tmp/ccYYaUhP.s 			page 195


4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5059              		.loc 1 4619 0
 5060              		.cfi_startproc
 5061              		@ args = 0, pretend = 0, frame = 0
 5062              		@ frame_needed = 0, uses_anonymous_args = 0
 5063              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5064              		.loc 1 4622 0
 5065 0000 054B     		ldr	r3, .L448
 5066 0002 1B68     		ldr	r3, [r3]
 5067 0004 23B1     		cbz	r3, .L447
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5068              		.loc 1 4624 0
 5069 0006 044B     		ldr	r3, .L448
 5070 0008 1A68     		ldr	r2, [r3]
 5071 000a 136D     		ldr	r3, [r2, #80]
 5072 000c 0133     		adds	r3, r3, #1
 5073 000e 1365     		str	r3, [r2, #80]
 5074              	.L447:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5075              		.loc 1 4627 0
 5076 0010 014B     		ldr	r3, .L448
 5077 0012 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5078              		.loc 1 4628 0
 5079 0014 7047     		bx	lr
 5080              	.L449:
 5081 0016 00BF     		.align	2
 5082              	.L448:
 5083 0018 00000000 		.word	.LANCHOR10
 5084              		.cfi_endproc
 5085              	.LFE57:
 5087              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5088              		.align	2
 5089              		.global	ulTaskNotifyTake
 5090              		.thumb
 5091              		.thumb_func
 5093              	ulTaskNotifyTake:
 5094              	.LFB58:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5095              		.loc 1 4636 0
 5096              		.cfi_startproc
 5097              		@ args = 0, pretend = 0, frame = 0
 5098              		@ frame_needed = 0, uses_anonymous_args = 0
 5099              	.LVL450:
 5100 0000 38B5     		push	{r3, r4, r5, lr}
 5101              	.LCFI52:
 5102              		.cfi_def_cfa_offset 16
 5103              		.cfi_offset 3, -16
 5104              		.cfi_offset 4, -12
 5105              		.cfi_offset 5, -8
 5106              		.cfi_offset 14, -4
 5107 0002 0546     		mov	r5, r0
 5108 0004 0C46     		mov	r4, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5109              		.loc 1 4639 0
 5110 0006 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccYYaUhP.s 			page 196


 5111              	.LVL451:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5112              		.loc 1 4642 0
 5113 000a 184B     		ldr	r3, .L455
 5114 000c 1B68     		ldr	r3, [r3]
 5115 000e 5B6D     		ldr	r3, [r3, #84]
 5116 0010 8BB9     		cbnz	r3, .L451
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5117              		.loc 1 4645 0
 5118 0012 164B     		ldr	r3, .L455
 5119 0014 1B68     		ldr	r3, [r3]
 5120 0016 0122     		movs	r2, #1
 5121 0018 83F85820 		strb	r2, [r3, #88]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5122              		.loc 1 4647 0
 5123 001c 5CB1     		cbz	r4, .L451
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5124              		.loc 1 4649 0
 5125 001e 1146     		mov	r1, r2
 5126 0020 2046     		mov	r0, r4
 5127 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5128              	.LVL452:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5129              		.loc 1 4656 0
 5130 0026 4FF08052 		mov	r2, #268435456
 5131 002a 114B     		ldr	r3, .L455+4
 5132 002c 1A60     		str	r2, [r3]
 5133              		.syntax unified
 5134              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5135 002e BFF34F8F 		dsb
 5136              	@ 0 "" 2
 5137              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5138 0032 BFF36F8F 		isb
 5139              	@ 0 "" 2
 5140              		.thumb
 5141              		.syntax unified
 5142              	.L451:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5143              		.loc 1 4668 0
 5144 0036 FFF7FEFF 		bl	vPortExitCritical
 5145              	.LVL453:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5146              		.loc 1 4670 0
 5147 003a FFF7FEFF 		bl	vPortEnterCritical
 5148              	.LVL454:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5149              		.loc 1 4673 0
 5150 003e 0B4B     		ldr	r3, .L455
 5151 0040 1B68     		ldr	r3, [r3]
 5152 0042 5C6D     		ldr	r4, [r3, #84]
 5153              	.LVL455:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5154              		.loc 1 4675 0
 5155 0044 4CB1     		cbz	r4, .L452
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5156              		.loc 1 4677 0
 5157 0046 25B1     		cbz	r5, .L453
ARM GAS  /tmp/ccYYaUhP.s 			page 197


4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5158              		.loc 1 4679 0
 5159 0048 084B     		ldr	r3, .L455
 5160 004a 1B68     		ldr	r3, [r3]
 5161 004c 0022     		movs	r2, #0
 5162 004e 5A65     		str	r2, [r3, #84]
 5163 0050 03E0     		b	.L452
 5164              	.L453:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5165              		.loc 1 4683 0
 5166 0052 064B     		ldr	r3, .L455
 5167 0054 1B68     		ldr	r3, [r3]
 5168 0056 621E     		subs	r2, r4, #1
 5169 0058 5A65     		str	r2, [r3, #84]
 5170              	.L452:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5171              		.loc 1 4691 0
 5172 005a 044B     		ldr	r3, .L455
 5173 005c 1B68     		ldr	r3, [r3]
 5174 005e 0022     		movs	r2, #0
 5175 0060 83F85820 		strb	r2, [r3, #88]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5176              		.loc 1 4693 0
 5177 0064 FFF7FEFF 		bl	vPortExitCritical
 5178              	.LVL456:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5179              		.loc 1 4696 0
 5180 0068 2046     		mov	r0, r4
 5181 006a 38BD     		pop	{r3, r4, r5, pc}
 5182              	.LVL457:
 5183              	.L456:
 5184              		.align	2
 5185              	.L455:
 5186 006c 00000000 		.word	.LANCHOR10
 5187 0070 04ED00E0 		.word	-536810236
 5188              		.cfi_endproc
 5189              	.LFE58:
 5191              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5192              		.align	2
 5193              		.global	xTaskNotifyWait
 5194              		.thumb
 5195              		.thumb_func
 5197              	xTaskNotifyWait:
 5198              	.LFB59:
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5199              		.loc 1 4704 0
 5200              		.cfi_startproc
 5201              		@ args = 0, pretend = 0, frame = 0
 5202              		@ frame_needed = 0, uses_anonymous_args = 0
 5203              	.LVL458:
 5204 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5205              	.LCFI53:
 5206              		.cfi_def_cfa_offset 24
 5207              		.cfi_offset 3, -24
 5208              		.cfi_offset 4, -20
 5209              		.cfi_offset 5, -16
 5210              		.cfi_offset 6, -12
ARM GAS  /tmp/ccYYaUhP.s 			page 198


 5211              		.cfi_offset 7, -8
 5212              		.cfi_offset 14, -4
 5213 0002 0746     		mov	r7, r0
 5214 0004 0D46     		mov	r5, r1
 5215 0006 1446     		mov	r4, r2
 5216 0008 1E46     		mov	r6, r3
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5217              		.loc 1 4707 0
 5218 000a FFF7FEFF 		bl	vPortEnterCritical
 5219              	.LVL459:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5220              		.loc 1 4710 0
 5221 000e 204B     		ldr	r3, .L463
 5222 0010 1B68     		ldr	r3, [r3]
 5223 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5224 0016 DBB2     		uxtb	r3, r3
 5225 0018 022B     		cmp	r3, #2
 5226 001a 16D0     		beq	.L458
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5227              		.loc 1 4715 0
 5228 001c 1C4B     		ldr	r3, .L463
 5229 001e 1A68     		ldr	r2, [r3]
 5230 0020 506D     		ldr	r0, [r2, #84]
 5231 0022 20EA0700 		bic	r0, r0, r7
 5232 0026 5065     		str	r0, [r2, #84]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5233              		.loc 1 4718 0
 5234 0028 1B68     		ldr	r3, [r3]
 5235 002a 0122     		movs	r2, #1
 5236 002c 83F85820 		strb	r2, [r3, #88]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5237              		.loc 1 4720 0
 5238 0030 5EB1     		cbz	r6, .L458
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5239              		.loc 1 4722 0
 5240 0032 1146     		mov	r1, r2
 5241 0034 3046     		mov	r0, r6
 5242 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5243              	.LVL460:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5244              		.loc 1 4729 0
 5245 003a 4FF08052 		mov	r2, #268435456
 5246 003e 154B     		ldr	r3, .L463+4
 5247 0040 1A60     		str	r2, [r3]
 5248              		.syntax unified
 5249              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5250 0042 BFF34F8F 		dsb
 5251              	@ 0 "" 2
 5252              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5253 0046 BFF36F8F 		isb
 5254              	@ 0 "" 2
 5255              		.thumb
 5256              		.syntax unified
 5257              	.L458:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5258              		.loc 1 4741 0
 5259 004a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccYYaUhP.s 			page 199


 5260              	.LVL461:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5261              		.loc 1 4743 0
 5262 004e FFF7FEFF 		bl	vPortEnterCritical
 5263              	.LVL462:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5264              		.loc 1 4747 0
 5265 0052 1CB1     		cbz	r4, .L459
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5266              		.loc 1 4751 0
 5267 0054 0E4B     		ldr	r3, .L463
 5268 0056 1B68     		ldr	r3, [r3]
 5269 0058 5B6D     		ldr	r3, [r3, #84]
 5270 005a 2360     		str	r3, [r4]
 5271              	.L459:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5272              		.loc 1 4758 0
 5273 005c 0C4B     		ldr	r3, .L463
 5274 005e 1B68     		ldr	r3, [r3]
 5275 0060 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5276 0064 DBB2     		uxtb	r3, r3
 5277 0066 022B     		cmp	r3, #2
 5278 0068 07D1     		bne	.L461
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5279              		.loc 1 4767 0
 5280 006a 094B     		ldr	r3, .L463
 5281 006c 1A68     		ldr	r2, [r3]
 5282 006e 536D     		ldr	r3, [r2, #84]
 5283 0070 23EA0505 		bic	r5, r3, r5
 5284              	.LVL463:
 5285 0074 5565     		str	r5, [r2, #84]
 5286              	.LVL464:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5287              		.loc 1 4768 0
 5288 0076 0124     		movs	r4, #1
 5289              	.LVL465:
 5290 0078 00E0     		b	.L460
 5291              	.LVL466:
 5292              	.L461:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5293              		.loc 1 4761 0
 5294 007a 0024     		movs	r4, #0
 5295              	.LVL467:
 5296              	.L460:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5297              		.loc 1 4771 0
 5298 007c 044B     		ldr	r3, .L463
 5299 007e 1B68     		ldr	r3, [r3]
 5300 0080 0022     		movs	r2, #0
 5301 0082 83F85820 		strb	r2, [r3, #88]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5302              		.loc 1 4773 0
 5303 0086 FFF7FEFF 		bl	vPortExitCritical
 5304              	.LVL468:
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5305              		.loc 1 4776 0
 5306 008a 2046     		mov	r0, r4
ARM GAS  /tmp/ccYYaUhP.s 			page 200


 5307 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5308              	.LVL469:
 5309              	.L464:
 5310 008e 00BF     		.align	2
 5311              	.L463:
 5312 0090 00000000 		.word	.LANCHOR10
 5313 0094 04ED00E0 		.word	-536810236
 5314              		.cfi_endproc
 5315              	.LFE59:
 5317              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5318              		.align	2
 5319              		.global	xTaskGenericNotify
 5320              		.thumb
 5321              		.thumb_func
 5323              	xTaskGenericNotify:
 5324              	.LFB60:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5325              		.loc 1 4784 0
 5326              		.cfi_startproc
 5327              		@ args = 0, pretend = 0, frame = 0
 5328              		@ frame_needed = 0, uses_anonymous_args = 0
 5329              	.LVL470:
 5330 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5331              	.LCFI54:
 5332              		.cfi_def_cfa_offset 24
 5333              		.cfi_offset 3, -24
 5334              		.cfi_offset 4, -20
 5335              		.cfi_offset 5, -16
 5336              		.cfi_offset 6, -12
 5337              		.cfi_offset 7, -8
 5338              		.cfi_offset 14, -4
 5339              	.LVL471:
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5340              		.loc 1 4789 0
 5341 0002 40B9     		cbnz	r0, .L466
 5342              	.LBB219:
 5343              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5344              		.loc 2 195 0
 5345              		.syntax unified
 5346              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5347 0004 4FF05003 			mov r3, #80												
 5348 0008 83F31188 		msr basepri, r3											
 5349 000c BFF36F8F 		isb														
 5350 0010 BFF34F8F 		dsb														
 5351              	
 5352              	@ 0 "" 2
 5353              	.LVL472:
 5354              		.thumb
 5355              		.syntax unified
 5356              	.L467:
 5357 0014 FEE7     		b	.L467
 5358              	.LVL473:
 5359              	.L466:
 5360 0016 0446     		mov	r4, r0
 5361 0018 1F46     		mov	r7, r3
 5362 001a 1646     		mov	r6, r2
ARM GAS  /tmp/ccYYaUhP.s 			page 201


 5363 001c 0D46     		mov	r5, r1
 5364              	.LVL474:
 5365              	.LBE220:
 5366              	.LBE219:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5367              		.loc 1 4792 0
 5368 001e FFF7FEFF 		bl	vPortEnterCritical
 5369              	.LVL475:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5370              		.loc 1 4794 0
 5371 0022 0FB1     		cbz	r7, .L468
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5372              		.loc 1 4796 0
 5373 0024 636D     		ldr	r3, [r4, #84]
 5374 0026 3B60     		str	r3, [r7]
 5375              	.L468:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5376              		.loc 1 4799 0
 5377 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5378 002c DBB2     		uxtb	r3, r3
 5379              	.LVL476:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5380              		.loc 1 4801 0
 5381 002e 0222     		movs	r2, #2
 5382 0030 84F85820 		strb	r2, [r4, #88]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5383              		.loc 1 4803 0
 5384 0034 042E     		cmp	r6, #4
 5385 0036 16D8     		bhi	.L469
 5386 0038 DFE806F0 		tbb	[pc, r6]
 5387              	.L471:
 5388 003c 22       		.byte	(.L481-.L471)/2
 5389 003d 03       		.byte	(.L472-.L471)/2
 5390 003e 08       		.byte	(.L473-.L471)/2
 5391 003f 0D       		.byte	(.L474-.L471)/2
 5392 0040 10       		.byte	(.L475-.L471)/2
 5393 0041 00       		.p2align 1
 5394              	.L472:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5395              		.loc 1 4806 0
 5396 0042 626D     		ldr	r2, [r4, #84]
 5397 0044 1543     		orrs	r5, r5, r2
 5398              	.LVL477:
 5399 0046 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5400              		.loc 1 4786 0
 5401 0048 0125     		movs	r5, #1
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5402              		.loc 1 4807 0
 5403 004a 1EE0     		b	.L470
 5404              	.LVL478:
 5405              	.L473:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5406              		.loc 1 4810 0
 5407 004c 626D     		ldr	r2, [r4, #84]
 5408 004e 0132     		adds	r2, r2, #1
 5409 0050 6265     		str	r2, [r4, #84]
ARM GAS  /tmp/ccYYaUhP.s 			page 202


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5410              		.loc 1 4786 0
 5411 0052 0125     		movs	r5, #1
 5412              	.LVL479:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5413              		.loc 1 4811 0
 5414 0054 19E0     		b	.L470
 5415              	.LVL480:
 5416              	.L474:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5417              		.loc 1 4814 0
 5418 0056 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5419              		.loc 1 4786 0
 5420 0058 0125     		movs	r5, #1
 5421              	.LVL481:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5422              		.loc 1 4815 0
 5423 005a 16E0     		b	.L470
 5424              	.LVL482:
 5425              	.L475:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5426              		.loc 1 4818 0
 5427 005c 022B     		cmp	r3, #2
 5428 005e 11D0     		beq	.L482
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5429              		.loc 1 4820 0
 5430 0060 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5431              		.loc 1 4786 0
 5432 0062 0125     		movs	r5, #1
 5433              	.LVL483:
 5434 0064 11E0     		b	.L470
 5435              	.LVL484:
 5436              	.L469:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5437              		.loc 1 4838 0
 5438 0066 626D     		ldr	r2, [r4, #84]
 5439 0068 B2F1FF3F 		cmp	r2, #-1
 5440 006c 0CD0     		beq	.L483
 5441              	.LBB221:
 5442              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5443              		.loc 2 195 0
 5444              		.syntax unified
 5445              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5446 006e 4FF05003 			mov r3, #80												
 5447 0072 83F31188 		msr basepri, r3											
 5448 0076 BFF36F8F 		isb														
 5449 007a BFF34F8F 		dsb														
 5450              	
 5451              	@ 0 "" 2
 5452              	.LVL485:
 5453              		.thumb
 5454              		.syntax unified
 5455              	.L476:
 5456 007e FEE7     		b	.L476
ARM GAS  /tmp/ccYYaUhP.s 			page 203


 5457              	.LVL486:
 5458              	.L481:
 5459              	.LBE222:
 5460              	.LBE221:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5461              		.loc 1 4786 0
 5462 0080 0125     		movs	r5, #1
 5463              	.LVL487:
 5464 0082 02E0     		b	.L470
 5465              	.LVL488:
 5466              	.L482:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5467              		.loc 1 4825 0
 5468 0084 0025     		movs	r5, #0
 5469              	.LVL489:
 5470 0086 00E0     		b	.L470
 5471              	.LVL490:
 5472              	.L483:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5473              		.loc 1 4786 0
 5474 0088 0125     		movs	r5, #1
 5475              	.LVL491:
 5476              	.L470:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5477              		.loc 1 4847 0
 5478 008a 012B     		cmp	r3, #1
 5479 008c 2BD1     		bne	.L477
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5480              		.loc 1 4849 0
 5481 008e 261D     		adds	r6, r4, #4
 5482 0090 3046     		mov	r0, r6
 5483 0092 FFF7FEFF 		bl	uxListRemove
 5484              	.LVL492:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5485              		.loc 1 4850 0
 5486 0096 E36A     		ldr	r3, [r4, #44]
 5487 0098 154A     		ldr	r2, .L485
 5488 009a 1268     		ldr	r2, [r2]
 5489 009c 9342     		cmp	r3, r2
 5490 009e 01D9     		bls	.L478
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5491              		.loc 1 4850 0 is_stmt 0 discriminator 1
 5492 00a0 134A     		ldr	r2, .L485
 5493 00a2 1360     		str	r3, [r2]
 5494              	.L478:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5495              		.loc 1 4850 0 discriminator 3
 5496 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 5497 00a8 9A00     		lsls	r2, r3, #2
 5498 00aa 3146     		mov	r1, r6
 5499 00ac 1148     		ldr	r0, .L485+4
 5500 00ae 1044     		add	r0, r0, r2
 5501 00b0 FFF7FEFF 		bl	vListInsertEnd
 5502              	.LVL493:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5503              		.loc 1 4853 0 is_stmt 1 discriminator 3
 5504 00b4 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccYYaUhP.s 			page 204


 5505 00b6 43B1     		cbz	r3, .L479
 5506              	.LBB223:
 5507              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5508              		.loc 2 195 0
 5509              		.syntax unified
 5510              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5511 00b8 4FF05003 			mov r3, #80												
 5512 00bc 83F31188 		msr basepri, r3											
 5513 00c0 BFF36F8F 		isb														
 5514 00c4 BFF34F8F 		dsb														
 5515              	
 5516              	@ 0 "" 2
 5517              	.LVL494:
 5518              		.thumb
 5519              		.syntax unified
 5520              	.L480:
 5521 00c8 FEE7     		b	.L480
 5522              	.L479:
 5523              	.LBE224:
 5524              	.LBE223:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5525              		.loc 1 4871 0
 5526 00ca E26A     		ldr	r2, [r4, #44]
 5527 00cc 0A4B     		ldr	r3, .L485+8
 5528 00ce 1B68     		ldr	r3, [r3]
 5529 00d0 DB6A     		ldr	r3, [r3, #44]
 5530 00d2 9A42     		cmp	r2, r3
 5531 00d4 07D9     		bls	.L477
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5532              		.loc 1 4875 0
 5533 00d6 4FF08052 		mov	r2, #268435456
 5534 00da 084B     		ldr	r3, .L485+12
 5535 00dc 1A60     		str	r2, [r3]
 5536              		.syntax unified
 5537              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5538 00de BFF34F8F 		dsb
 5539              	@ 0 "" 2
 5540              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5541 00e2 BFF36F8F 		isb
 5542              	@ 0 "" 2
 5543              		.thumb
 5544              		.syntax unified
 5545              	.L477:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5546              		.loc 1 4887 0
 5547 00e6 FFF7FEFF 		bl	vPortExitCritical
 5548              	.LVL495:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5549              		.loc 1 4890 0
 5550 00ea 2846     		mov	r0, r5
 5551 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5552              	.LVL496:
 5553              	.L486:
 5554 00ee 00BF     		.align	2
 5555              	.L485:
 5556 00f0 00000000 		.word	.LANCHOR13
ARM GAS  /tmp/ccYYaUhP.s 			page 205


 5557 00f4 00000000 		.word	.LANCHOR4
 5558 00f8 00000000 		.word	.LANCHOR10
 5559 00fc 04ED00E0 		.word	-536810236
 5560              		.cfi_endproc
 5561              	.LFE60:
 5563              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5564              		.align	2
 5565              		.global	xTaskGenericNotifyFromISR
 5566              		.thumb
 5567              		.thumb_func
 5569              	xTaskGenericNotifyFromISR:
 5570              	.LFB61:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5571              		.loc 1 4898 0
 5572              		.cfi_startproc
 5573              		@ args = 4, pretend = 0, frame = 0
 5574              		@ frame_needed = 0, uses_anonymous_args = 0
 5575              	.LVL497:
 5576 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5577              	.LCFI55:
 5578              		.cfi_def_cfa_offset 32
 5579              		.cfi_offset 3, -32
 5580              		.cfi_offset 4, -28
 5581              		.cfi_offset 5, -24
 5582              		.cfi_offset 6, -20
 5583              		.cfi_offset 7, -16
 5584              		.cfi_offset 8, -12
 5585              		.cfi_offset 9, -8
 5586              		.cfi_offset 14, -4
 5587 0004 089E     		ldr	r6, [sp, #32]
 5588              	.LVL498:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5589              		.loc 1 4904 0
 5590 0006 40B9     		cbnz	r0, .L488
 5591              	.LBB225:
 5592              	.LBB226:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5593              		.loc 2 195 0
 5594              		.syntax unified
 5595              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5596 0008 4FF05003 			mov r3, #80												
 5597 000c 83F31188 		msr basepri, r3											
 5598 0010 BFF36F8F 		isb														
 5599 0014 BFF34F8F 		dsb														
 5600              	
 5601              	@ 0 "" 2
 5602              	.LVL499:
 5603              		.thumb
 5604              		.syntax unified
 5605              	.L489:
 5606 0018 FEE7     		b	.L489
 5607              	.LVL500:
 5608              	.L488:
 5609 001a 0446     		mov	r4, r0
 5610 001c 9946     		mov	r9, r3
 5611 001e 9046     		mov	r8, r2
 5612 0020 0D46     		mov	r5, r1
ARM GAS  /tmp/ccYYaUhP.s 			page 206


 5613              	.LBE226:
 5614              	.LBE225:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5615              		.loc 1 4922 0
 5616 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5617              	.LVL501:
 5618              	.LBB227:
 5619              	.LBB228:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5620              		.loc 2 211 0
 5621              		.syntax unified
 5622              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5623 0026 EFF31187 			mrs r7, basepri											
 5624 002a 4FF05003 		mov r3, #80												
 5625 002e 83F31188 		msr basepri, r3											
 5626 0032 BFF36F8F 		isb														
 5627 0036 BFF34F8F 		dsb														
 5628              	
 5629              	@ 0 "" 2
 5630              		.thumb
 5631              		.syntax unified
 5632              	.LBE228:
 5633              	.LBE227:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5634              		.loc 1 4928 0
 5635 003a B9F1000F 		cmp	r9, #0
 5636 003e 02D0     		beq	.L490
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5637              		.loc 1 4930 0
 5638 0040 636D     		ldr	r3, [r4, #84]
 5639 0042 C9F80030 		str	r3, [r9]
 5640              	.L490:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5641              		.loc 1 4933 0
 5642 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5643 004a DBB2     		uxtb	r3, r3
 5644              	.LVL502:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5645              		.loc 1 4934 0
 5646 004c 0222     		movs	r2, #2
 5647 004e 84F85820 		strb	r2, [r4, #88]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5648              		.loc 1 4936 0
 5649 0052 B8F1040F 		cmp	r8, #4
 5650 0056 16D8     		bhi	.L491
 5651 0058 DFE808F0 		tbb	[pc, r8]
 5652              	.L493:
 5653 005c 22       		.byte	(.L506-.L493)/2
 5654 005d 03       		.byte	(.L494-.L493)/2
 5655 005e 08       		.byte	(.L495-.L493)/2
 5656 005f 0D       		.byte	(.L496-.L493)/2
 5657 0060 10       		.byte	(.L497-.L493)/2
 5658 0061 00       		.p2align 1
 5659              	.L494:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5660              		.loc 1 4939 0
 5661 0062 626D     		ldr	r2, [r4, #84]
ARM GAS  /tmp/ccYYaUhP.s 			page 207


 5662 0064 1543     		orrs	r5, r5, r2
 5663              	.LVL503:
 5664 0066 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5665              		.loc 1 4901 0
 5666 0068 0125     		movs	r5, #1
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5667              		.loc 1 4940 0
 5668 006a 1EE0     		b	.L492
 5669              	.LVL504:
 5670              	.L495:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5671              		.loc 1 4943 0
 5672 006c 626D     		ldr	r2, [r4, #84]
 5673 006e 0132     		adds	r2, r2, #1
 5674 0070 6265     		str	r2, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5675              		.loc 1 4901 0
 5676 0072 0125     		movs	r5, #1
 5677              	.LVL505:
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5678              		.loc 1 4944 0
 5679 0074 19E0     		b	.L492
 5680              	.LVL506:
 5681              	.L496:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5682              		.loc 1 4947 0
 5683 0076 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5684              		.loc 1 4901 0
 5685 0078 0125     		movs	r5, #1
 5686              	.LVL507:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5687              		.loc 1 4948 0
 5688 007a 16E0     		b	.L492
 5689              	.LVL508:
 5690              	.L497:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5691              		.loc 1 4951 0
 5692 007c 022B     		cmp	r3, #2
 5693 007e 11D0     		beq	.L507
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5694              		.loc 1 4953 0
 5695 0080 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5696              		.loc 1 4901 0
 5697 0082 0125     		movs	r5, #1
 5698              	.LVL509:
 5699 0084 11E0     		b	.L492
 5700              	.LVL510:
 5701              	.L491:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5702              		.loc 1 4971 0
 5703 0086 626D     		ldr	r2, [r4, #84]
 5704 0088 B2F1FF3F 		cmp	r2, #-1
 5705 008c 0CD0     		beq	.L508
 5706              	.LBB229:
ARM GAS  /tmp/ccYYaUhP.s 			page 208


 5707              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5708              		.loc 2 195 0
 5709              		.syntax unified
 5710              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5711 008e 4FF05003 			mov r3, #80												
 5712 0092 83F31188 		msr basepri, r3											
 5713 0096 BFF36F8F 		isb														
 5714 009a BFF34F8F 		dsb														
 5715              	
 5716              	@ 0 "" 2
 5717              	.LVL511:
 5718              		.thumb
 5719              		.syntax unified
 5720              	.L498:
 5721 009e FEE7     		b	.L498
 5722              	.LVL512:
 5723              	.L506:
 5724              	.LBE230:
 5725              	.LBE229:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5726              		.loc 1 4901 0
 5727 00a0 0125     		movs	r5, #1
 5728              	.LVL513:
 5729 00a2 02E0     		b	.L492
 5730              	.LVL514:
 5731              	.L507:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5732              		.loc 1 4958 0
 5733 00a4 0025     		movs	r5, #0
 5734              	.LVL515:
 5735 00a6 00E0     		b	.L492
 5736              	.LVL516:
 5737              	.L508:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5738              		.loc 1 4901 0
 5739 00a8 0125     		movs	r5, #1
 5740              	.LVL517:
 5741              	.L492:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5742              		.loc 1 4979 0
 5743 00aa 012B     		cmp	r3, #1
 5744 00ac 33D1     		bne	.L499
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5745              		.loc 1 4982 0
 5746 00ae A36A     		ldr	r3, [r4, #40]
 5747              	.LVL518:
 5748 00b0 43B1     		cbz	r3, .L500
 5749              	.LBB231:
 5750              	.LBB232:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5751              		.loc 2 195 0
 5752              		.syntax unified
 5753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5754 00b2 4FF05003 			mov r3, #80												
 5755 00b6 83F31188 		msr basepri, r3											
 5756 00ba BFF36F8F 		isb														
ARM GAS  /tmp/ccYYaUhP.s 			page 209


 5757 00be BFF34F8F 		dsb														
 5758              	
 5759              	@ 0 "" 2
 5760              	.LVL519:
 5761              		.thumb
 5762              		.syntax unified
 5763              	.L501:
 5764 00c2 FEE7     		b	.L501
 5765              	.L500:
 5766              	.LBE232:
 5767              	.LBE231:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5768              		.loc 1 4984 0
 5769 00c4 164B     		ldr	r3, .L510
 5770 00c6 1B68     		ldr	r3, [r3]
 5771 00c8 A3B9     		cbnz	r3, .L502
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5772              		.loc 1 4986 0
 5773 00ca 04F10408 		add	r8, r4, #4
 5774 00ce 4046     		mov	r0, r8
 5775 00d0 FFF7FEFF 		bl	uxListRemove
 5776              	.LVL520:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5777              		.loc 1 4987 0
 5778 00d4 E36A     		ldr	r3, [r4, #44]
 5779 00d6 134A     		ldr	r2, .L510+4
 5780 00d8 1268     		ldr	r2, [r2]
 5781 00da 9342     		cmp	r3, r2
 5782 00dc 01D9     		bls	.L503
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5783              		.loc 1 4987 0 is_stmt 0 discriminator 1
 5784 00de 114A     		ldr	r2, .L510+4
 5785 00e0 1360     		str	r3, [r2]
 5786              	.L503:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5787              		.loc 1 4987 0 discriminator 3
 5788 00e2 03EB8303 		add	r3, r3, r3, lsl #2
 5789 00e6 9A00     		lsls	r2, r3, #2
 5790 00e8 4146     		mov	r1, r8
 5791 00ea 0F48     		ldr	r0, .L510+8
 5792 00ec 1044     		add	r0, r0, r2
 5793 00ee FFF7FEFF 		bl	vListInsertEnd
 5794              	.LVL521:
 5795 00f2 04E0     		b	.L504
 5796              	.L502:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5797              		.loc 1 4993 0 is_stmt 1
 5798 00f4 04F11801 		add	r1, r4, #24
 5799 00f8 0C48     		ldr	r0, .L510+12
 5800 00fa FFF7FEFF 		bl	vListInsertEnd
 5801              	.LVL522:
 5802              	.L504:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5803              		.loc 1 4996 0
 5804 00fe E26A     		ldr	r2, [r4, #44]
 5805 0100 0B4B     		ldr	r3, .L510+16
 5806 0102 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccYYaUhP.s 			page 210


 5807 0104 DB6A     		ldr	r3, [r3, #44]
 5808 0106 9A42     		cmp	r2, r3
 5809 0108 05D9     		bls	.L499
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5810              		.loc 1 5000 0
 5811 010a 0EB1     		cbz	r6, .L505
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5812              		.loc 1 5002 0
 5813 010c 0123     		movs	r3, #1
 5814 010e 3360     		str	r3, [r6]
 5815              	.L505:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5816              		.loc 1 5008 0
 5817 0110 0122     		movs	r2, #1
 5818 0112 084B     		ldr	r3, .L510+20
 5819 0114 1A60     		str	r2, [r3]
 5820              	.L499:
 5821              	.LVL523:
 5822              	.LBB233:
 5823              	.LBB234:
 5824              		.loc 2 229 0
 5825              		.syntax unified
 5826              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5827 0116 87F31188 			msr basepri, r7	
 5828              	@ 0 "" 2
 5829              	.LVL524:
 5830              		.thumb
 5831              		.syntax unified
 5832              	.LBE234:
 5833              	.LBE233:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5834              		.loc 1 5019 0
 5835 011a 2846     		mov	r0, r5
 5836 011c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5837              	.LVL525:
 5838              	.L511:
 5839              		.align	2
 5840              	.L510:
 5841 0120 00000000 		.word	.LANCHOR16
 5842 0124 00000000 		.word	.LANCHOR13
 5843 0128 00000000 		.word	.LANCHOR4
 5844 012c 00000000 		.word	.LANCHOR1
 5845 0130 00000000 		.word	.LANCHOR10
 5846 0134 00000000 		.word	.LANCHOR18
 5847              		.cfi_endproc
 5848              	.LFE61:
 5850              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5851              		.align	2
 5852              		.global	vTaskNotifyGiveFromISR
 5853              		.thumb
 5854              		.thumb_func
 5856              	vTaskNotifyGiveFromISR:
 5857              	.LFB62:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5858              		.loc 1 5027 0
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccYYaUhP.s 			page 211


 5861              		@ frame_needed = 0, uses_anonymous_args = 0
 5862              	.LVL526:
 5863 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5864              	.LCFI56:
 5865              		.cfi_def_cfa_offset 24
 5866              		.cfi_offset 3, -24
 5867              		.cfi_offset 4, -20
 5868              		.cfi_offset 5, -16
 5869              		.cfi_offset 6, -12
 5870              		.cfi_offset 7, -8
 5871              		.cfi_offset 14, -4
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5872              		.loc 1 5032 0
 5873 0002 40B9     		cbnz	r0, .L513
 5874              	.LBB235:
 5875              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5876              		.loc 2 195 0
 5877              		.syntax unified
 5878              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5879 0004 4FF05003 			mov r3, #80												
 5880 0008 83F31188 		msr basepri, r3											
 5881 000c BFF36F8F 		isb														
 5882 0010 BFF34F8F 		dsb														
 5883              	
 5884              	@ 0 "" 2
 5885              	.LVL527:
 5886              		.thumb
 5887              		.syntax unified
 5888              	.L514:
 5889 0014 FEE7     		b	.L514
 5890              	.L513:
 5891 0016 0446     		mov	r4, r0
 5892 0018 0D46     		mov	r5, r1
 5893              	.LBE236:
 5894              	.LBE235:
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5895              		.loc 1 5050 0
 5896 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5897              	.LVL528:
 5898              	.LBB237:
 5899              	.LBB238:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5900              		.loc 2 211 0
 5901              		.syntax unified
 5902              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5903 001e EFF31186 			mrs r6, basepri											
 5904 0022 4FF05003 		mov r3, #80												
 5905 0026 83F31188 		msr basepri, r3											
 5906 002a BFF36F8F 		isb														
 5907 002e BFF34F8F 		dsb														
 5908              	
 5909              	@ 0 "" 2
 5910              		.thumb
 5911              		.syntax unified
 5912              	.LBE238:
 5913              	.LBE237:
ARM GAS  /tmp/ccYYaUhP.s 			page 212


5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5914              		.loc 1 5056 0
 5915 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5916 0036 DBB2     		uxtb	r3, r3
 5917              	.LVL529:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5918              		.loc 1 5057 0
 5919 0038 0222     		movs	r2, #2
 5920 003a 84F85820 		strb	r2, [r4, #88]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5921              		.loc 1 5061 0
 5922 003e 626D     		ldr	r2, [r4, #84]
 5923 0040 0132     		adds	r2, r2, #1
 5924 0042 6265     		str	r2, [r4, #84]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5925              		.loc 1 5067 0
 5926 0044 012B     		cmp	r3, #1
 5927 0046 32D1     		bne	.L515
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5928              		.loc 1 5070 0
 5929 0048 A36A     		ldr	r3, [r4, #40]
 5930              	.LVL530:
 5931 004a 43B1     		cbz	r3, .L516
 5932              	.LBB239:
 5933              	.LBB240:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5934              		.loc 2 195 0
 5935              		.syntax unified
 5936              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5937 004c 4FF05003 			mov r3, #80												
 5938 0050 83F31188 		msr basepri, r3											
 5939 0054 BFF36F8F 		isb														
 5940 0058 BFF34F8F 		dsb														
 5941              	
 5942              	@ 0 "" 2
 5943              	.LVL531:
 5944              		.thumb
 5945              		.syntax unified
 5946              	.L517:
 5947 005c FEE7     		b	.L517
 5948              	.L516:
 5949              	.LBE240:
 5950              	.LBE239:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5951              		.loc 1 5072 0
 5952 005e 154B     		ldr	r3, .L523
 5953 0060 1B68     		ldr	r3, [r3]
 5954 0062 9BB9     		cbnz	r3, .L518
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5955              		.loc 1 5074 0
 5956 0064 271D     		adds	r7, r4, #4
 5957 0066 3846     		mov	r0, r7
 5958 0068 FFF7FEFF 		bl	uxListRemove
 5959              	.LVL532:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5960              		.loc 1 5075 0
 5961 006c E36A     		ldr	r3, [r4, #44]
ARM GAS  /tmp/ccYYaUhP.s 			page 213


 5962 006e 124A     		ldr	r2, .L523+4
 5963 0070 1268     		ldr	r2, [r2]
 5964 0072 9342     		cmp	r3, r2
 5965 0074 01D9     		bls	.L519
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5966              		.loc 1 5075 0 is_stmt 0 discriminator 1
 5967 0076 104A     		ldr	r2, .L523+4
 5968 0078 1360     		str	r3, [r2]
 5969              	.L519:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5970              		.loc 1 5075 0 discriminator 3
 5971 007a 03EB8303 		add	r3, r3, r3, lsl #2
 5972 007e 9A00     		lsls	r2, r3, #2
 5973 0080 3946     		mov	r1, r7
 5974 0082 0E48     		ldr	r0, .L523+8
 5975 0084 1044     		add	r0, r0, r2
 5976 0086 FFF7FEFF 		bl	vListInsertEnd
 5977              	.LVL533:
 5978 008a 04E0     		b	.L520
 5979              	.L518:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5980              		.loc 1 5081 0 is_stmt 1
 5981 008c 04F11801 		add	r1, r4, #24
 5982 0090 0B48     		ldr	r0, .L523+12
 5983 0092 FFF7FEFF 		bl	vListInsertEnd
 5984              	.LVL534:
 5985              	.L520:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5986              		.loc 1 5084 0
 5987 0096 E26A     		ldr	r2, [r4, #44]
 5988 0098 0A4B     		ldr	r3, .L523+16
 5989 009a 1B68     		ldr	r3, [r3]
 5990 009c DB6A     		ldr	r3, [r3, #44]
 5991 009e 9A42     		cmp	r2, r3
 5992 00a0 05D9     		bls	.L515
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5993              		.loc 1 5088 0
 5994 00a2 0DB1     		cbz	r5, .L521
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5995              		.loc 1 5090 0
 5996 00a4 0123     		movs	r3, #1
 5997 00a6 2B60     		str	r3, [r5]
 5998              	.L521:
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5999              		.loc 1 5096 0
 6000 00a8 0122     		movs	r2, #1
 6001 00aa 074B     		ldr	r3, .L523+20
 6002 00ac 1A60     		str	r2, [r3]
 6003              	.L515:
 6004              	.LVL535:
 6005              	.LBB241:
 6006              	.LBB242:
 6007              		.loc 2 229 0
 6008              		.syntax unified
 6009              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6010 00ae 86F31188 			msr basepri, r6	
 6011              	@ 0 "" 2
ARM GAS  /tmp/ccYYaUhP.s 			page 214


 6012              	.LVL536:
 6013              		.thumb
 6014              		.syntax unified
 6015 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6016              	.LVL537:
 6017              	.L524:
 6018              		.align	2
 6019              	.L523:
 6020 00b4 00000000 		.word	.LANCHOR16
 6021 00b8 00000000 		.word	.LANCHOR13
 6022 00bc 00000000 		.word	.LANCHOR4
 6023 00c0 00000000 		.word	.LANCHOR1
 6024 00c4 00000000 		.word	.LANCHOR10
 6025 00c8 00000000 		.word	.LANCHOR18
 6026              	.LBE242:
 6027              	.LBE241:
 6028              		.cfi_endproc
 6029              	.LFE62:
 6031              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6032              		.align	2
 6033              		.global	xTaskNotifyStateClear
 6034              		.thumb
 6035              		.thumb_func
 6037              	xTaskNotifyStateClear:
 6038              	.LFB63:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6039              		.loc 1 5113 0
 6040              		.cfi_startproc
 6041              		@ args = 0, pretend = 0, frame = 0
 6042              		@ frame_needed = 0, uses_anonymous_args = 0
 6043              	.LVL538:
 6044 0000 10B5     		push	{r4, lr}
 6045              	.LCFI57:
 6046              		.cfi_def_cfa_offset 8
 6047              		.cfi_offset 4, -8
 6048              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6049              		.loc 1 5119 0
 6050 0002 0446     		mov	r4, r0
 6051 0004 08B9     		cbnz	r0, .L526
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6052              		.loc 1 5119 0 is_stmt 0 discriminator 1
 6053 0006 094B     		ldr	r3, .L530
 6054 0008 1C68     		ldr	r4, [r3]
 6055              	.LVL539:
 6056              	.L526:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6057              		.loc 1 5121 0 is_stmt 1 discriminator 4
 6058 000a FFF7FEFF 		bl	vPortEnterCritical
 6059              	.LVL540:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6060              		.loc 1 5123 0 discriminator 4
 6061 000e 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6062 0012 DBB2     		uxtb	r3, r3
 6063 0014 022B     		cmp	r3, #2
 6064 0016 04D1     		bne	.L528
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  /tmp/ccYYaUhP.s 			page 215


 6065              		.loc 1 5125 0
 6066 0018 0023     		movs	r3, #0
 6067 001a 84F85830 		strb	r3, [r4, #88]
 6068              	.LVL541:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6069              		.loc 1 5126 0
 6070 001e 0124     		movs	r4, #1
 6071              	.LVL542:
 6072 0020 00E0     		b	.L527
 6073              	.LVL543:
 6074              	.L528:
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6075              		.loc 1 5130 0
 6076 0022 0024     		movs	r4, #0
 6077              	.LVL544:
 6078              	.L527:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6079              		.loc 1 5133 0
 6080 0024 FFF7FEFF 		bl	vPortExitCritical
 6081              	.LVL545:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6082              		.loc 1 5136 0
 6083 0028 2046     		mov	r0, r4
 6084 002a 10BD     		pop	{r4, pc}
 6085              	.LVL546:
 6086              	.L531:
 6087              		.align	2
 6088              	.L530:
 6089 002c 00000000 		.word	.LANCHOR10
 6090              		.cfi_endproc
 6091              	.LFE63:
 6093              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6094              		.align	2
 6095              		.global	ulTaskNotifyValueClear
 6096              		.thumb
 6097              		.thumb_func
 6099              	ulTaskNotifyValueClear:
 6100              	.LFB64:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6101              		.loc 1 5144 0
 6102              		.cfi_startproc
 6103              		@ args = 0, pretend = 0, frame = 0
 6104              		@ frame_needed = 0, uses_anonymous_args = 0
 6105              	.LVL547:
 6106 0000 70B5     		push	{r4, r5, r6, lr}
 6107              	.LCFI58:
 6108              		.cfi_def_cfa_offset 16
 6109              		.cfi_offset 4, -16
 6110              		.cfi_offset 5, -12
 6111              		.cfi_offset 6, -8
 6112              		.cfi_offset 14, -4
 6113 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6114              		.loc 1 5150 0
 6115 0004 0446     		mov	r4, r0
 6116 0006 08B9     		cbnz	r0, .L533
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccYYaUhP.s 			page 216


 6117              		.loc 1 5150 0 is_stmt 0 discriminator 1
 6118 0008 074B     		ldr	r3, .L535
 6119 000a 1C68     		ldr	r4, [r3]
 6120              	.LVL548:
 6121              	.L533:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6122              		.loc 1 5152 0 is_stmt 1 discriminator 4
 6123 000c FFF7FEFF 		bl	vPortEnterCritical
 6124              	.LVL549:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 6125              		.loc 1 5156 0 discriminator 4
 6126 0010 054B     		ldr	r3, .L535
 6127 0012 1B68     		ldr	r3, [r3]
 6128 0014 5D6D     		ldr	r5, [r3, #84]
 6129              	.LVL550:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 6130              		.loc 1 5157 0 discriminator 4
 6131 0016 616D     		ldr	r1, [r4, #84]
 6132 0018 21EA0601 		bic	r1, r1, r6
 6133 001c 6165     		str	r1, [r4, #84]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6134              		.loc 1 5159 0 discriminator 4
 6135 001e FFF7FEFF 		bl	vPortExitCritical
 6136              	.LVL551:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6137              		.loc 1 5162 0 discriminator 4
 6138 0022 2846     		mov	r0, r5
 6139 0024 70BD     		pop	{r4, r5, r6, pc}
 6140              	.LVL552:
 6141              	.L536:
 6142 0026 00BF     		.align	2
 6143              	.L535:
 6144 0028 00000000 		.word	.LANCHOR10
 6145              		.cfi_endproc
 6146              	.LFE64:
 6148              		.global	pxCurrentTCB
 6149              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6150              		.align	2
 6151              		.set	.LANCHOR2,. + 0
 6154              	pxDelayedTaskList:
 6155 0000 00000000 		.space	4
 6156              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6157              		.align	2
 6158              		.set	.LANCHOR11,. + 0
 6161              	xSchedulerRunning:
 6162 0000 00000000 		.space	4
 6163              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6164              		.align	2
 6165              		.set	.LANCHOR7,. + 0
 6168              	xTasksWaitingTermination:
 6169 0000 00000000 		.space	20
 6169      00000000 
 6169      00000000 
 6169      00000000 
 6169      00000000 
 6170              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6171              		.align	2
ARM GAS  /tmp/ccYYaUhP.s 			page 217


 6172              		.set	.LANCHOR8,. + 0
 6175              	pxOverflowDelayedTaskList:
 6176 0000 00000000 		.space	4
 6177              		.section	.bss.xPendedTicks,"aw",%nobits
 6178              		.align	2
 6179              		.set	.LANCHOR19,. + 0
 6182              	xPendedTicks:
 6183 0000 00000000 		.space	4
 6184              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6185              		.align	2
 6186              		.set	.LANCHOR4,. + 0
 6189              	pxReadyTasksLists:
 6190 0000 00000000 		.space	1120
 6190      00000000 
 6190      00000000 
 6190      00000000 
 6190      00000000 
 6191              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6192              		.align	2
 6193              		.set	.LANCHOR16,. + 0
 6196              	uxSchedulerSuspended:
 6197 0000 00000000 		.space	4
 6198              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6199              		.align	2
 6200              		.set	.LANCHOR14,. + 0
 6203              	uxDeletedTasksWaitingCleanUp:
 6204 0000 00000000 		.space	4
 6205              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6206              		.align	2
 6207              		.set	.LANCHOR9,. + 0
 6210              	uxCurrentNumberOfTasks:
 6211 0000 00000000 		.space	4
 6212              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6213              		.align	2
 6214              		.set	.LANCHOR10,. + 0
 6217              	pxCurrentTCB:
 6218 0000 00000000 		.space	4
 6219              		.section	.bss.xPendingReadyList,"aw",%nobits
 6220              		.align	2
 6221              		.set	.LANCHOR1,. + 0
 6224              	xPendingReadyList:
 6225 0000 00000000 		.space	20
 6225      00000000 
 6225      00000000 
 6225      00000000 
 6225      00000000 
 6226              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6227              		.align	2
 6228              		.set	.LANCHOR17,. + 0
 6231              	xNumOfOverflows:
 6232 0000 00000000 		.space	4
 6233              		.section	.bss.xTickCount,"aw",%nobits
 6234              		.align	2
 6235              		.set	.LANCHOR15,. + 0
 6238              	xTickCount:
 6239 0000 00000000 		.space	4
 6240              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/ccYYaUhP.s 			page 218


 6241              		.align	2
 6242              		.set	.LANCHOR3,. + 0
 6245              	xNextTaskUnblockTime:
 6246 0000 00000000 		.space	4
 6247              		.section	.rodata.str1.4,"aMS",%progbits,1
 6248              		.align	2
 6249              	.LC0:
 6250 0000 49444C45 		.ascii	"IDLE\000"
 6250      00
 6251              		.section	.bss.uxTaskNumber,"aw",%nobits
 6252              		.align	2
 6253              		.set	.LANCHOR12,. + 0
 6256              	uxTaskNumber:
 6257 0000 00000000 		.space	4
 6258              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6259              		.align	2
 6260              		.set	.LANCHOR5,. + 0
 6263              	xDelayedTaskList1:
 6264 0000 00000000 		.space	20
 6264      00000000 
 6264      00000000 
 6264      00000000 
 6264      00000000 
 6265              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6266              		.align	2
 6267              		.set	.LANCHOR6,. + 0
 6270              	xDelayedTaskList2:
 6271 0000 00000000 		.space	20
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6271      00000000 
 6272              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6273              		.align	2
 6274              		.set	.LANCHOR0,. + 0
 6277              	xSuspendedTaskList:
 6278 0000 00000000 		.space	20
 6278      00000000 
 6278      00000000 
 6278      00000000 
 6278      00000000 
 6279              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6280              		.align	2
 6281              		.set	.LANCHOR13,. + 0
 6284              	uxTopReadyPriority:
 6285 0000 00000000 		.space	4
 6286              		.section	.bss.xYieldPending,"aw",%nobits
 6287              		.align	2
 6288              		.set	.LANCHOR18,. + 0
 6291              	xYieldPending:
 6292 0000 00000000 		.space	4
 6293              		.text
 6294              	.Letext0:
 6295              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/lib/gcc/arm-none-eabi/5.4.1/include/stdd
 6296              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 6297              		.file 5 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 6298              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
ARM GAS  /tmp/ccYYaUhP.s 			page 219


 6299              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6300              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6301              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6302              		.file 10 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/string.h"
 6303              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6304              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  /tmp/ccYYaUhP.s 			page 220


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccYYaUhP.s:22     .text.prvTaskIsTaskSuspended:00000000 $t
     /tmp/ccYYaUhP.s:26     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
     /tmp/ccYYaUhP.s:93     .text.prvTaskIsTaskSuspended:00000038 $d
     /tmp/ccYYaUhP.s:99     .text.prvTaskCheckFreeStackSpace:00000000 $t
     /tmp/ccYYaUhP.s:103    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
     /tmp/ccYYaUhP.s:137    .text.prvResetNextTaskUnblockTime:00000000 $t
     /tmp/ccYYaUhP.s:141    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
     /tmp/ccYYaUhP.s:174    .text.prvResetNextTaskUnblockTime:00000024 $d
     /tmp/ccYYaUhP.s:180    .text.prvInitialiseNewTask:00000000 $t
     /tmp/ccYYaUhP.s:184    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
     /tmp/ccYYaUhP.s:315    .text.prvInitialiseTaskLists:00000000 $t
     /tmp/ccYYaUhP.s:319    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
     /tmp/ccYYaUhP.s:385    .text.prvInitialiseTaskLists:00000048 $d
     /tmp/ccYYaUhP.s:397    .text.prvAddNewTaskToReadyList:00000000 $t
     /tmp/ccYYaUhP.s:401    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
     /tmp/ccYYaUhP.s:511    .text.prvAddNewTaskToReadyList:0000008c $d
     /tmp/ccYYaUhP.s:522    .text.prvDeleteTCB:00000000 $t
     /tmp/ccYYaUhP.s:526    .text.prvDeleteTCB:00000000 prvDeleteTCB
     /tmp/ccYYaUhP.s:590    .text.prvCheckTasksWaitingTermination:00000000 $t
     /tmp/ccYYaUhP.s:594    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
     /tmp/ccYYaUhP.s:650    .text.prvCheckTasksWaitingTermination:00000038 $d
     /tmp/ccYYaUhP.s:657    .text.prvIdleTask:00000000 $t
     /tmp/ccYYaUhP.s:661    .text.prvIdleTask:00000000 prvIdleTask
     /tmp/ccYYaUhP.s:701    .text.prvIdleTask:00000020 $d
     /tmp/ccYYaUhP.s:707    .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/ccYYaUhP.s:711    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccYYaUhP.s:796    .text.prvAddCurrentTaskToDelayedList:00000064 $d
     /tmp/ccYYaUhP.s:806    .text.xTaskCreateStatic:00000000 $t
     /tmp/ccYYaUhP.s:811    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
     /tmp/ccYYaUhP.s:949    .text.xTaskCreate:00000000 $t
     /tmp/ccYYaUhP.s:954    .text.xTaskCreate:00000000 xTaskCreate
     /tmp/ccYYaUhP.s:1053   .text.vTaskDelete:00000000 $t
     /tmp/ccYYaUhP.s:1058   .text.vTaskDelete:00000000 vTaskDelete
     /tmp/ccYYaUhP.s:1185   .text.vTaskDelete:00000094 $d
     /tmp/ccYYaUhP.s:1197   .text.eTaskGetState:00000000 $t
     /tmp/ccYYaUhP.s:1202   .text.eTaskGetState:00000000 eTaskGetState
     /tmp/ccYYaUhP.s:1336   .text.eTaskGetState:0000007c $d
     /tmp/ccYYaUhP.s:1345   .text.uxTaskPriorityGet:00000000 $t
     /tmp/ccYYaUhP.s:1350   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/ccYYaUhP.s:1386   .text.uxTaskPriorityGet:00000018 $d
     /tmp/ccYYaUhP.s:1391   .text.uxTaskPriorityGetFromISR:00000000 $t
     /tmp/ccYYaUhP.s:1396   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
     /tmp/ccYYaUhP.s:1456   .text.uxTaskPriorityGetFromISR:0000002c $d
     /tmp/ccYYaUhP.s:1461   .text.vTaskPrioritySet:00000000 $t
     /tmp/ccYYaUhP.s:1466   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/ccYYaUhP.s:1644   .text.vTaskPrioritySet:000000c4 $d
     /tmp/ccYYaUhP.s:1652   .text.vTaskResume:00000000 $t
     /tmp/ccYYaUhP.s:1657   .text.vTaskResume:00000000 vTaskResume
     /tmp/ccYYaUhP.s:1762   .text.vTaskResume:00000078 $d
     /tmp/ccYYaUhP.s:1770   .text.xTaskResumeFromISR:00000000 $t
     /tmp/ccYYaUhP.s:1775   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/ccYYaUhP.s:1914   .text.xTaskResumeFromISR:00000090 $d
     /tmp/ccYYaUhP.s:1923   .text.vTaskStartScheduler:00000000 $t
     /tmp/ccYYaUhP.s:1928   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/ccYYaUhP.s:2052   .text.vTaskStartScheduler:00000084 $d
ARM GAS  /tmp/ccYYaUhP.s 			page 221


     /tmp/ccYYaUhP.s:2061   .text.vTaskEndScheduler:00000000 $t
     /tmp/ccYYaUhP.s:2066   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/ccYYaUhP.s:2103   .text.vTaskEndScheduler:00000020 $d
     /tmp/ccYYaUhP.s:2108   .text.vTaskSuspendAll:00000000 $t
     /tmp/ccYYaUhP.s:2113   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/ccYYaUhP.s:2130   .text.vTaskSuspendAll:0000000c $d
     /tmp/ccYYaUhP.s:2135   .text.xTaskGetTickCount:00000000 $t
     /tmp/ccYYaUhP.s:2140   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/ccYYaUhP.s:2156   .text.xTaskGetTickCount:00000008 $d
     /tmp/ccYYaUhP.s:2161   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/ccYYaUhP.s:2166   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/ccYYaUhP.s:2189   .text.xTaskGetTickCountFromISR:0000000c $d
     /tmp/ccYYaUhP.s:2194   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/ccYYaUhP.s:2199   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/ccYYaUhP.s:2214   .text.uxTaskGetNumberOfTasks:00000008 $d
     /tmp/ccYYaUhP.s:2219   .text.pcTaskGetName:00000000 $t
     /tmp/ccYYaUhP.s:2224   .text.pcTaskGetName:00000000 pcTaskGetName
     /tmp/ccYYaUhP.s:2268   .text.pcTaskGetName:00000024 $d
     /tmp/ccYYaUhP.s:2273   .text.xTaskIncrementTick:00000000 $t
     /tmp/ccYYaUhP.s:2278   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
     /tmp/ccYYaUhP.s:2487   .text.xTaskIncrementTick:000000f0 $d
     /tmp/ccYYaUhP.s:2502   .text.xTaskResumeAll:00000000 $t
     /tmp/ccYYaUhP.s:2507   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/ccYYaUhP.s:2695   .text.xTaskResumeAll:000000d4 $d
     /tmp/ccYYaUhP.s:2708   .text.vTaskDelayUntil:00000000 $t
     /tmp/ccYYaUhP.s:2713   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
     /tmp/ccYYaUhP.s:2884   .text.vTaskDelayUntil:000000a0 $d
     /tmp/ccYYaUhP.s:2891   .text.vTaskDelay:00000000 $t
     /tmp/ccYYaUhP.s:2896   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/ccYYaUhP.s:2973   .text.vTaskDelay:00000048 $d
     /tmp/ccYYaUhP.s:2979   .text.xTaskCatchUpTicks:00000000 $t
     /tmp/ccYYaUhP.s:2984   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
     /tmp/ccYYaUhP.s:3038   .text.xTaskCatchUpTicks:00000030 $d
     /tmp/ccYYaUhP.s:3044   .text.vTaskSwitchContext:00000000 $t
     /tmp/ccYYaUhP.s:3049   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/ccYYaUhP.s:3165   .text.vTaskSwitchContext:00000084 $d
     /tmp/ccYYaUhP.s:3174   .text.vTaskSuspend:00000000 $t
     /tmp/ccYYaUhP.s:3179   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/ccYYaUhP.s:3319   .text.vTaskSuspend:000000a4 $d
     /tmp/ccYYaUhP.s:3329   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/ccYYaUhP.s:3334   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/ccYYaUhP.s:3386   .text.vTaskPlaceOnEventList:0000002c $d
     /tmp/ccYYaUhP.s:3391   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
     /tmp/ccYYaUhP.s:3396   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccYYaUhP.s:3483   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
     /tmp/ccYYaUhP.s:3489   .text.vTaskPlaceOnEventListRestricted:00000000 $t
     /tmp/ccYYaUhP.s:3494   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
     /tmp/ccYYaUhP.s:3555   .text.vTaskPlaceOnEventListRestricted:00000034 $d
     /tmp/ccYYaUhP.s:3560   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/ccYYaUhP.s:3565   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/ccYYaUhP.s:3669   .text.xTaskRemoveFromEventList:00000074 $d
     /tmp/ccYYaUhP.s:3679   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
     /tmp/ccYYaUhP.s:3684   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccYYaUhP.s:3791   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
     /tmp/ccYYaUhP.s:3800   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/ccYYaUhP.s:3805   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/ccYYaUhP.s:3859   .text.vTaskSetTimeOutState:00000030 $d
ARM GAS  /tmp/ccYYaUhP.s 			page 222


     /tmp/ccYYaUhP.s:3865   .text.vTaskInternalSetTimeOutState:00000000 $t
     /tmp/ccYYaUhP.s:3870   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
     /tmp/ccYYaUhP.s:3890   .text.vTaskInternalSetTimeOutState:00000010 $d
     /tmp/ccYYaUhP.s:3896   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/ccYYaUhP.s:3901   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/ccYYaUhP.s:4035   .text.xTaskCheckForTimeOut:00000078 $d
     /tmp/ccYYaUhP.s:4041   .text.vTaskMissedYield:00000000 $t
     /tmp/ccYYaUhP.s:4046   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/ccYYaUhP.s:4061   .text.vTaskMissedYield:00000008 $d
     /tmp/ccYYaUhP.s:4066   .text.uxTaskGetTaskNumber:00000000 $t
     /tmp/ccYYaUhP.s:4071   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
     /tmp/ccYYaUhP.s:4097   .text.vTaskSetTaskNumber:00000000 $t
     /tmp/ccYYaUhP.s:4102   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
     /tmp/ccYYaUhP.s:4122   .text.vTaskGetInfo:00000000 $t
     /tmp/ccYYaUhP.s:4127   .text.vTaskGetInfo:00000000 vTaskGetInfo
     /tmp/ccYYaUhP.s:4232   .text.vTaskGetInfo:00000070 $d
     /tmp/ccYYaUhP.s:4237   .text.prvListTasksWithinSingleList:00000000 $t
     /tmp/ccYYaUhP.s:4241   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
     /tmp/ccYYaUhP.s:4333   .text.uxTaskGetSystemState:00000000 $t
     /tmp/ccYYaUhP.s:4338   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
     /tmp/ccYYaUhP.s:4454   .text.uxTaskGetSystemState:00000098 $d
     /tmp/ccYYaUhP.s:4464   .text.uxTaskGetStackHighWaterMark:00000000 $t
     /tmp/ccYYaUhP.s:4469   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
     /tmp/ccYYaUhP.s:4498   .text.uxTaskGetStackHighWaterMark:00000014 $d
     /tmp/ccYYaUhP.s:4503   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/ccYYaUhP.s:4508   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/ccYYaUhP.s:4524   .text.xTaskGetCurrentTaskHandle:00000008 $d
     /tmp/ccYYaUhP.s:4529   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/ccYYaUhP.s:4534   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/ccYYaUhP.s:4565   .text.xTaskGetSchedulerState:00000018 $d
     /tmp/ccYYaUhP.s:4571   .text.xTaskPriorityInherit:00000000 $t
     /tmp/ccYYaUhP.s:4576   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
     /tmp/ccYYaUhP.s:4704   .text.xTaskPriorityInherit:0000008c $d
     /tmp/ccYYaUhP.s:4711   .text.xTaskPriorityDisinherit:00000000 $t
     /tmp/ccYYaUhP.s:4716   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
     /tmp/ccYYaUhP.s:4858   .text.xTaskPriorityDisinherit:00000088 $d
     /tmp/ccYYaUhP.s:4865   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
     /tmp/ccYYaUhP.s:4870   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccYYaUhP.s:5012   .text.vTaskPriorityDisinheritAfterTimeout:00000094 $d
     /tmp/ccYYaUhP.s:5019   .text.uxTaskResetEventItemValue:00000000 $t
     /tmp/ccYYaUhP.s:5024   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
     /tmp/ccYYaUhP.s:5047   .text.uxTaskResetEventItemValue:00000014 $d
     /tmp/ccYYaUhP.s:5052   .text.pvTaskIncrementMutexHeldCount:00000000 $t
     /tmp/ccYYaUhP.s:5057   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
     /tmp/ccYYaUhP.s:5083   .text.pvTaskIncrementMutexHeldCount:00000018 $d
     /tmp/ccYYaUhP.s:5088   .text.ulTaskNotifyTake:00000000 $t
     /tmp/ccYYaUhP.s:5093   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
     /tmp/ccYYaUhP.s:5186   .text.ulTaskNotifyTake:0000006c $d
     /tmp/ccYYaUhP.s:5192   .text.xTaskNotifyWait:00000000 $t
     /tmp/ccYYaUhP.s:5197   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
     /tmp/ccYYaUhP.s:5312   .text.xTaskNotifyWait:00000090 $d
     /tmp/ccYYaUhP.s:5318   .text.xTaskGenericNotify:00000000 $t
     /tmp/ccYYaUhP.s:5323   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
     /tmp/ccYYaUhP.s:5388   .text.xTaskGenericNotify:0000003c $d
     /tmp/ccYYaUhP.s:5556   .text.xTaskGenericNotify:000000f0 $d
     /tmp/ccYYaUhP.s:5564   .text.xTaskGenericNotifyFromISR:00000000 $t
     /tmp/ccYYaUhP.s:5569   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
ARM GAS  /tmp/ccYYaUhP.s 			page 223


     /tmp/ccYYaUhP.s:5653   .text.xTaskGenericNotifyFromISR:0000005c $d
     /tmp/ccYYaUhP.s:5841   .text.xTaskGenericNotifyFromISR:00000120 $d
     /tmp/ccYYaUhP.s:5851   .text.vTaskNotifyGiveFromISR:00000000 $t
     /tmp/ccYYaUhP.s:5856   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
     /tmp/ccYYaUhP.s:6020   .text.vTaskNotifyGiveFromISR:000000b4 $d
     /tmp/ccYYaUhP.s:6032   .text.xTaskNotifyStateClear:00000000 $t
     /tmp/ccYYaUhP.s:6037   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
     /tmp/ccYYaUhP.s:6089   .text.xTaskNotifyStateClear:0000002c $d
     /tmp/ccYYaUhP.s:6094   .text.ulTaskNotifyValueClear:00000000 $t
     /tmp/ccYYaUhP.s:6099   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
     /tmp/ccYYaUhP.s:6144   .text.ulTaskNotifyValueClear:00000028 $d
     /tmp/ccYYaUhP.s:6217   .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/ccYYaUhP.s:6150   .bss.pxDelayedTaskList:00000000 $d
     /tmp/ccYYaUhP.s:6154   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/ccYYaUhP.s:6157   .bss.xSchedulerRunning:00000000 $d
     /tmp/ccYYaUhP.s:6161   .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/ccYYaUhP.s:6164   .bss.xTasksWaitingTermination:00000000 $d
     /tmp/ccYYaUhP.s:6168   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/ccYYaUhP.s:6171   .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/ccYYaUhP.s:6175   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/ccYYaUhP.s:6178   .bss.xPendedTicks:00000000 $d
     /tmp/ccYYaUhP.s:6182   .bss.xPendedTicks:00000000 xPendedTicks
     /tmp/ccYYaUhP.s:6185   .bss.pxReadyTasksLists:00000000 $d
     /tmp/ccYYaUhP.s:6189   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/ccYYaUhP.s:6192   .bss.uxSchedulerSuspended:00000000 $d
     /tmp/ccYYaUhP.s:6196   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/ccYYaUhP.s:6199   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
     /tmp/ccYYaUhP.s:6203   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccYYaUhP.s:6206   .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/ccYYaUhP.s:6210   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/ccYYaUhP.s:6213   .bss.pxCurrentTCB:00000000 $d
     /tmp/ccYYaUhP.s:6220   .bss.xPendingReadyList:00000000 $d
     /tmp/ccYYaUhP.s:6224   .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/ccYYaUhP.s:6227   .bss.xNumOfOverflows:00000000 $d
     /tmp/ccYYaUhP.s:6231   .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/ccYYaUhP.s:6234   .bss.xTickCount:00000000 $d
     /tmp/ccYYaUhP.s:6238   .bss.xTickCount:00000000 xTickCount
     /tmp/ccYYaUhP.s:6241   .bss.xNextTaskUnblockTime:00000000 $d
     /tmp/ccYYaUhP.s:6245   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/ccYYaUhP.s:6248   .rodata.str1.4:00000000 $d
     /tmp/ccYYaUhP.s:6252   .bss.uxTaskNumber:00000000 $d
     /tmp/ccYYaUhP.s:6256   .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/ccYYaUhP.s:6259   .bss.xDelayedTaskList1:00000000 $d
     /tmp/ccYYaUhP.s:6263   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/ccYYaUhP.s:6266   .bss.xDelayedTaskList2:00000000 $d
     /tmp/ccYYaUhP.s:6270   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/ccYYaUhP.s:6273   .bss.xSuspendedTaskList:00000000 $d
     /tmp/ccYYaUhP.s:6277   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/ccYYaUhP.s:6280   .bss.uxTopReadyPriority:00000000 $d
     /tmp/ccYYaUhP.s:6284   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/ccYYaUhP.s:6287   .bss.xYieldPending:00000000 $d
     /tmp/ccYYaUhP.s:6291   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d
     /tmp/ccYYaUhP.s:5393   .text.xTaskGenericNotify:00000041 $d
     /tmp/ccYYaUhP.s:5393   .text.xTaskGenericNotify:00000042 $t
     /tmp/ccYYaUhP.s:5658   .text.xTaskGenericNotifyFromISR:00000061 $d
     /tmp/ccYYaUhP.s:5658   .text.xTaskGenericNotifyFromISR:00000062 $t
ARM GAS  /tmp/ccYYaUhP.s 			page 224



UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
