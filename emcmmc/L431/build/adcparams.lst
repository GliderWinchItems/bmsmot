ARM GAS  /tmp/ccyzaK0g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"adcparams.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.internal,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	internal:
  27              	.LFB293:
  28              		.file 1 "Ourtasks/adcparams.c"
   1:Ourtasks/adcparams.c **** /******************************************************************************
   2:Ourtasks/adcparams.c **** * File Name          : adcparams.c
   3:Ourtasks/adcparams.c **** * Date First Issued  : 03/09/2019
   4:Ourtasks/adcparams.c **** * Board              : DiscoveryF4
   5:Ourtasks/adcparams.c **** * Description        : Parameters for ADC app configuration
   6:Ourtasks/adcparams.c **** *******************************************************************************/
   7:Ourtasks/adcparams.c **** /*
   8:Ourtasks/adcparams.c **** Not thread safe.
   9:Ourtasks/adcparams.c **** */
  10:Ourtasks/adcparams.c **** #include "adcparams.h"
  11:Ourtasks/adcparams.c **** #include "adcparamsinit.h"
  12:Ourtasks/adcparams.c **** #include "ADCTask.h"
  13:Ourtasks/adcparams.c **** 
  14:Ourtasks/adcparams.c **** #include "DTW_counter.h"
  15:Ourtasks/adcparams.c **** 
  16:Ourtasks/adcparams.c **** /*
  17:Ourtasks/adcparams.c ****   SCALING DETAIL
  18:Ourtasks/adcparams.c **** 
  19:Ourtasks/adcparams.c **** ADC readings are referred in the 1/2 DMA sum, i.e. the sum of 16 ADC readings.
  20:Ourtasks/adcparams.c **** The max sum is therefore, 65520 (16 * 4095).  
  21:Ourtasks/adcparams.c **** 
  22:Ourtasks/adcparams.c **** Vn = Vref * (ADC[n]/ADC[vref]) * ((R1+R2)/R2);
  23:Ourtasks/adcparams.c ****   Where: ((R1+R2)/R2) is resistor divider scale factor 
  24:Ourtasks/adcparams.c **** 
  25:Ourtasks/adcparams.c **** The resistor scale factor is applied when sending out readings for human consumption.
  26:Ourtasks/adcparams.c **** 
  27:Ourtasks/adcparams.c **** 
  28:Ourtasks/adcparams.c **** 
  29:Ourtasks/adcparams.c ****  Vref TEMPERATURE COMPENSATION
  30:Ourtasks/adcparams.c **** 
ARM GAS  /tmp/ccyzaK0g.s 			page 2


  31:Ourtasks/adcparams.c **** Temp(degree) = (V_sense - V_25)/Avg_slope + 25
  32:Ourtasks/adcparams.c **** 
  33:Ourtasks/adcparams.c ****                  Min  Typ  Max
  34:Ourtasks/adcparams.c **** Average slope    4.0  4.3  4.6  mV/°C
  35:Ourtasks/adcparams.c **** Voltage at 25 °C 1.34 1.43 1.52 V
  36:Ourtasks/adcparams.c **** 
  37:Ourtasks/adcparams.c **** ADC sampling time when reading the
  38:Ourtasks/adcparams.c **** temperature - - 17.1 μs
  39:Ourtasks/adcparams.c **** 
  40:Ourtasks/adcparams.c **** V 25 = V SENSE value for 25° C and
  41:Ourtasks/adcparams.c **** Avg_Slope = Average Slope for curve between Temperature vs. V SENSE (given in
  42:Ourtasks/adcparams.c ****    mV/° C or μV/ °C).
  43:Ourtasks/adcparams.c **** */
  44:Ourtasks/adcparams.c **** 
  45:Ourtasks/adcparams.c **** /* Everything for ADC1. */
  46:Ourtasks/adcparams.c **** struct ADCFUNCTION adc1;
  47:Ourtasks/adcparams.c **** 
  48:Ourtasks/adcparams.c **** /* *************************************************************************
  49:Ourtasks/adcparams.c ****  * void adcparams_init(void);
  50:Ourtasks/adcparams.c ****  *	@brief	: Copy parameters into structs
  51:Ourtasks/adcparams.c ****  * NOTE: => ASSUMES ADC1 ONLY <==
  52:Ourtasks/adcparams.c ****  * *************************************************************************/
  53:Ourtasks/adcparams.c **** void adcparams_init(void)
  54:Ourtasks/adcparams.c **** {
  55:Ourtasks/adcparams.c **** 	/* Load parameters, either hard coded, (or later implement from high flash). */
  56:Ourtasks/adcparams.c **** 	adc_idx_v_struct_hardcode_params(&adc1.lc);
  57:Ourtasks/adcparams.c **** 
  58:Ourtasks/adcparams.c **** 	/* Init working struct for ADC function. */
  59:Ourtasks/adcparams.c **** 	adcparamsinit_init(&adc1);
  60:Ourtasks/adcparams.c **** 
  61:Ourtasks/adcparams.c **** 	return;
  62:Ourtasks/adcparams.c **** }
  63:Ourtasks/adcparams.c **** 
  64:Ourtasks/adcparams.c **** /* *************************************************************************
  65:Ourtasks/adcparams.c ****  * static void internal(struct ADCFUNCTION* p, struct ADCINTERNAL* pi,uin8_t idx);
  66:Ourtasks/adcparams.c ****  *	@brief	: Update values used for compensation from Vref and Temperature
  67:Ourtasks/adcparams.c ****  * @param	: p = Pointer to array of ADC reading sums plus other stuff
  68:Ourtasks/adcparams.c ****  * @param	: idx = index into ADC sum for sensor
  69:Ourtasks/adcparams.c ****  * *************************************************************************/
  70:Ourtasks/adcparams.c **** uint32_t adcdbg1;
  71:Ourtasks/adcparams.c **** uint32_t adcdbg2;
  72:Ourtasks/adcparams.c **** 
  73:Ourtasks/adcparams.c **** static void internal(struct ADCFUNCTION* p)
  74:Ourtasks/adcparams.c **** {
  29              		.loc 1 74 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
  75:Ourtasks/adcparams.c **** 	int32_t itmp;
  76:Ourtasks/adcparams.c **** /* 
  77:Ourtasks/adcparams.c **** 
ARM GAS  /tmp/ccyzaK0g.s 			page 3


  78:Ourtasks/adcparams.c **** Obtain the temperature using the following formula:
  79:Ourtasks/adcparams.c ****   Temperature (in °C) = {(V 25 - V SENSE ) / Avg_Slope} + 25.
  80:Ourtasks/adcparams.c **** Where,
  81:Ourtasks/adcparams.c ****    V 25 = V SENSE value for 25° C and
  82:Ourtasks/adcparams.c ****    Avg_Slope = Average Slope for curve between Temperature vs. V SENSE (given in
  83:Ourtasks/adcparams.c ****        mV/° C or μV/ °C).
  84:Ourtasks/adcparams.c **** Refer to the Electrical characteristics section for the actual values of V 25 and Avg_Slope
  85:Ourtasks/adcparams.c **** 
  86:Ourtasks/adcparams.c **** Average slope     4.0  4.3  4.6  mV/°C
  87:Ourtasks/adcparams.c **** Voltage at 25 °C  1.34 1.43 1.52 V
  88:Ourtasks/adcparams.c **** 
  89:Ourtasks/adcparams.c **** */
  90:Ourtasks/adcparams.c **** 	/* Skip temperature compensation for now. */
  91:Ourtasks/adcparams.c **** 	p->intern.adccmpvref = p->chan[ADC1IDX_INTERNALVREF].adcfil;
  39              		.loc 1 91 0
  40 0002 D0F83812 		ldr	r1, [r0, #568]
  41 0006 C0F8B410 		str	r1, [r0, #180]
  92:Ourtasks/adcparams.c **** 
  93:Ourtasks/adcparams.c **** 	/* Compute temperature */
  94:Ourtasks/adcparams.c **** 	itmp = (p->intern.iv25 * p->chan[ADC1IDX_INTERNALVREF].adcfil) - ((p->intern.vref * p->chan[ADC1ID
  42              		.loc 1 94 0
  43 000a D0F8DC30 		ldr	r3, [r0, #220]
  44 000e 03FB01F2 		mul	r2, r3, r1
  45 0012 D0F8C040 		ldr	r4, [r0, #192]
  46 0016 D0F8F831 		ldr	r3, [r0, #504]
  47 001a 03FB04F3 		mul	r3, r3, r4
  48 001e A2EBD313 		sub	r3, r2, r3, lsr #7
  49              	.LVL1:
  95:Ourtasks/adcparams.c **** 
  96:Ourtasks/adcparams.c **** 	itmp = ((itmp >> ADCSCALEbitsitmp) * p->intern.yRs) / p->chan[ADC1IDX_INTERNALVREF].adcfil;
  50              		.loc 1 96 0
  51 0022 DB10     		asrs	r3, r3, #3
  52              	.LVL2:
  53 0024 D0F8D820 		ldr	r2, [r0, #216]
  54              	.LVL3:
  55 0028 02FB03F3 		mul	r3, r2, r3
  56 002c B3FBF1F3 		udiv	r3, r3, r1
  57              	.LVL4:
  97:Ourtasks/adcparams.c **** 
  98:Ourtasks/adcparams.c **** 	p->intern.itemp = (itmp << ADCSCALEbitsitmp) + p->intern.irmtemp;
  58              		.loc 1 98 0
  59 0030 D0F8D020 		ldr	r2, [r0, #208]
  60 0034 02EBC303 		add	r3, r2, r3, lsl #3
  61              	.LVL5:
  62 0038 C0F8D430 		str	r3, [r0, #212]
  99:Ourtasks/adcparams.c **** 
 100:Ourtasks/adcparams.c **** 	return;
 101:Ourtasks/adcparams.c **** }
  63              		.loc 1 101 0
  64 003c 5DF8044B 		ldr	r4, [sp], #4
  65              	.LCFI1:
  66              		.cfi_restore 4
  67              		.cfi_def_cfa_offset 0
  68              	.LVL6:
  69 0040 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE293:
ARM GAS  /tmp/ccyzaK0g.s 			page 4


  73 0042 00BF     		.section	.text.absolute,"ax",%progbits
  74              		.align	2
  75              		.thumb
  76              		.thumb_func
  78              	absolute:
  79              	.LFB294:
 102:Ourtasks/adcparams.c **** /* *************************************************************************
 103:Ourtasks/adcparams.c ****  * static void absolute(struct ADCFUNCTION* p, struct ADCABSOLUTE* pa,uint8_t idx);
 104:Ourtasks/adcparams.c ****  *	@brief	: Calibrate and filter absolute voltage readings
 105:Ourtasks/adcparams.c ****  * @param	: p = Pointer to array of ADC reading sums plus other stuff
 106:Ourtasks/adcparams.c ****  * @param	: pa = Pointer to absolute parameters for reading 'n'
 107:Ourtasks/adcparams.c ****  * @param	: idx = index into ADC sum for sensor for reading 'n'
 108:Ourtasks/adcparams.c ****  * *************************************************************************/
 109:Ourtasks/adcparams.c **** /*
 110:Ourtasks/adcparams.c **** Vn = Vref * (ADC[n]/ADC[vref]) * ((R1+R2)/R2);
 111:Ourtasks/adcparams.c ****   Where: ((R1+R2)/R2) is resistor divider scale factor 
 112:Ourtasks/adcparams.c **** */
 113:Ourtasks/adcparams.c **** static void absolute(struct ADCFUNCTION* p,uint8_t idx)
 114:Ourtasks/adcparams.c **** {
  80              		.loc 1 114 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              	.LVL7:
  85 0000 38B5     		push	{r3, r4, r5, lr}
  86              	.LCFI2:
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 3, -16
  89              		.cfi_offset 4, -12
  90              		.cfi_offset 5, -8
  91              		.cfi_offset 14, -4
  92 0002 0546     		mov	r5, r0
 115:Ourtasks/adcparams.c **** 	/* IIR filter adc reading. */
 116:Ourtasks/adcparams.c **** 	p->chan[idx].adcfil = iir_filter_lx_do(&p->chan[idx].iir, &p->chan[idx].sum);
  93              		.loc 1 116 0
  94 0004 0B1D     		adds	r3, r1, #4
  95 0006 8C01     		lsls	r4, r1, #6
  96 0008 04F1E000 		add	r0, r4, #224
  97              	.LVL8:
  98 000c 05EB8311 		add	r1, r5, r3, lsl #6
  99              	.LVL9:
 100 0010 2844     		add	r0, r0, r5
 101 0012 FFF7FEFF 		bl	iir_filter_lx_do
 102              	.LVL10:
 103 0016 2C44     		add	r4, r4, r5
 104 0018 C4F8F800 		str	r0, [r4, #248]
 117:Ourtasks/adcparams.c **** 
 118:Ourtasks/adcparams.c **** 	p->chan[idx].ival = (p->intern.vref * p->chan[idx].adcfil) / p->intern.adccmpvref;
 105              		.loc 1 118 0
 106 001c D5F8C030 		ldr	r3, [r5, #192]
 107 0020 03FB00F3 		mul	r3, r3, r0
 108 0024 D5F8B400 		ldr	r0, [r5, #180]
 109 0028 B3FBF0F3 		udiv	r3, r3, r0
 110 002c C4F8FC30 		str	r3, [r4, #252]
 111 0030 38BD     		pop	{r3, r4, r5, pc}
 112              		.cfi_endproc
 113              	.LFE294:
ARM GAS  /tmp/ccyzaK0g.s 			page 5


 115 0032 00BF     		.section	.text.adcparams_init,"ax",%progbits
 116              		.align	2
 117              		.global	adcparams_init
 118              		.thumb
 119              		.thumb_func
 121              	adcparams_init:
 122              	.LFB292:
  54:Ourtasks/adcparams.c **** 	/* Load parameters, either hard coded, (or later implement from high flash). */
 123              		.loc 1 54 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127 0000 10B5     		push	{r4, lr}
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 4, -8
 131              		.cfi_offset 14, -4
  56:Ourtasks/adcparams.c **** 
 132              		.loc 1 56 0
 133 0002 044C     		ldr	r4, .L7
 134 0004 2046     		mov	r0, r4
 135 0006 FFF7FEFF 		bl	adc_idx_v_struct_hardcode_params
 136              	.LVL11:
  59:Ourtasks/adcparams.c **** 
 137              		.loc 1 59 0
 138 000a 2046     		mov	r0, r4
 139 000c FFF7FEFF 		bl	adcparamsinit_init
 140              	.LVL12:
 141 0010 10BD     		pop	{r4, pc}
 142              	.L8:
 143 0012 00BF     		.align	2
 144              	.L7:
 145 0014 00000000 		.word	adc1
 146              		.cfi_endproc
 147              	.LFE292:
 149              		.section	.text.adcparams_cal,"ax",%progbits
 150              		.align	2
 151              		.global	adcparams_cal
 152              		.thumb
 153              		.thumb_func
 155              	adcparams_cal:
 156              	.LFB295:
 119:Ourtasks/adcparams.c **** 	return;
 120:Ourtasks/adcparams.c **** }
 121:Ourtasks/adcparams.c **** /* *************************************************************************
 122:Ourtasks/adcparams.c ****  * void adcparams_cal(void);
 123:Ourtasks/adcparams.c ****  *	@brief	: calibrate and filter ADC readings
 124:Ourtasks/adcparams.c ****  * *************************************************************************/
 125:Ourtasks/adcparams.c **** void adcparams_cal(void)
 126:Ourtasks/adcparams.c **** {
 157              		.loc 1 126 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 10B5     		push	{r4, lr}
 162              	.LCFI4:
 163              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccyzaK0g.s 			page 6


 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 166              	.LVL13:
 127:Ourtasks/adcparams.c **** 	struct ADCFUNCTION* p = &adc1; // Convenience pointer
 128:Ourtasks/adcparams.c **** 
 129:Ourtasks/adcparams.c **** 	/* Run each ADC sum through iir filter */
 130:Ourtasks/adcparams.c **** 	// 0 PA1 IN1-Battery voltage
 131:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_HIGHVOLT1].adcfil = iir_filter_lx_do(&p->chan[ADC1IDX_HIGHVOLT1].iir, &p->chan[ADC
 167              		.loc 1 131 0
 168 0002 234C     		ldr	r4, .L11
 169 0004 2146     		mov	r1, r4
 170 0006 A4F12000 		sub	r0, r4, #32
 171 000a FFF7FEFF 		bl	iir_filter_lx_do
 172              	.LVL14:
 173 000e A4F58074 		sub	r4, r4, #256
 174 0012 C4F8F800 		str	r0, [r4, #248]
 132:Ourtasks/adcparams.c **** 	// 1 PA2 IN2-DMOC +
 133:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_HIGHVOLT2].adcfil =	iir_filter_lx_do(&p->chan[ADC1IDX_HIGHVOLT2].iir, &p->chan[ADC
 175              		.loc 1 133 0
 176 0016 04F5A071 		add	r1, r4, #320
 177 001a 04F59070 		add	r0, r4, #288
 178 001e FFF7FEFF 		bl	iir_filter_lx_do
 179              	.LVL15:
 180 0022 C4F83801 		str	r0, [r4, #312]
 134:Ourtasks/adcparams.c **** 	// 2 PA3 IN3-DMOC -
 135:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_HIGHVOLT3].adcfil =	iir_filter_lx_do(&p->chan[ADC1IDX_HIGHVOLT3].iir, &p->chan[ADC
 181              		.loc 1 135 0
 182 0026 04F5C071 		add	r1, r4, #384
 183 002a 04F5B070 		add	r0, r4, #352
 184 002e FFF7FEFF 		bl	iir_filter_lx_do
 185              	.LVL16:
 186 0032 C4F87801 		str	r0, [r4, #376]
 136:Ourtasks/adcparams.c **** 	// 3 PA4 IN4-spare
 137:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_HIGHVOLT4].adcfil =	iir_filter_lx_do(&p->chan[ADC1IDX_HIGHVOLT4].iir, &p->chan[ADC
 187              		.loc 1 137 0
 188 0036 04F5E071 		add	r1, r4, #448
 189 003a 04F5D070 		add	r0, r4, #416
 190 003e FFF7FEFF 		bl	iir_filter_lx_do
 191              	.LVL17:
 192 0042 C4F8B801 		str	r0, [r4, #440]
 138:Ourtasks/adcparams.c **** 	// 4 IN17-Internal temperature sensor
 139:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_INTERNALTEMP].adcfil =	iir_filter_lx_do(&p->chan[ADC1IDX_INTERNALTEMP].iir, &p->ch
 193              		.loc 1 139 0
 194 0046 04F50071 		add	r1, r4, #512
 195 004a 04F5F070 		add	r0, r4, #480
 196 004e FFF7FEFF 		bl	iir_filter_lx_do
 197              	.LVL18:
 198 0052 C4F8F801 		str	r0, [r4, #504]
 140:Ourtasks/adcparams.c **** 	// 5 IN18-Internal voltage reference
 141:Ourtasks/adcparams.c **** 	p->chan[ADC1IDX_INTERNALVREF].adcfil =	iir_filter_lx_do(&p->chan[ADC1IDX_INTERNALVREF].iir, &p->ch
 199              		.loc 1 141 0
 200 0056 04F51071 		add	r1, r4, #576
 201 005a 04F50870 		add	r0, r4, #544
 202 005e FFF7FEFF 		bl	iir_filter_lx_do
 203              	.LVL19:
 204 0062 C4F83802 		str	r0, [r4, #568]
 142:Ourtasks/adcparams.c **** 
ARM GAS  /tmp/ccyzaK0g.s 			page 7


 143:Ourtasks/adcparams.c **** 	/* First: Update ADCvref used in subsequent computations. */
 144:Ourtasks/adcparams.c **** 	internal(p); // Update Vref for temperature
 205              		.loc 1 144 0
 206 0066 2046     		mov	r0, r4
 207 0068 FFF7FEFF 		bl	internal
 208              	.LVL20:
 145:Ourtasks/adcparams.c **** 
 146:Ourtasks/adcparams.c ****    /* Compute high voltages, without resistor divider applied
 147:Ourtasks/adcparams.c **** 	   With Vref = 1.200 the max input will yield 54065 which fits uint16_t.
 148:Ourtasks/adcparams.c ****       unit16_t is sent out on usart3.  The receiving end applies
 149:Ourtasks/adcparams.c ****       the resistor divider scaling. */
 150:Ourtasks/adcparams.c **** 	absolute(p, ADC1IDX_HIGHVOLT1); // 
 209              		.loc 1 150 0
 210 006c 0021     		movs	r1, #0
 211 006e 2046     		mov	r0, r4
 212 0070 FFF7FEFF 		bl	absolute
 213              	.LVL21:
 151:Ourtasks/adcparams.c **** 	absolute(p, ADC1IDX_HIGHVOLT2); // 
 214              		.loc 1 151 0
 215 0074 0121     		movs	r1, #1
 216 0076 2046     		mov	r0, r4
 217 0078 FFF7FEFF 		bl	absolute
 218              	.LVL22:
 152:Ourtasks/adcparams.c **** 	absolute(p, ADC1IDX_HIGHVOLT3); // 
 219              		.loc 1 152 0
 220 007c 0221     		movs	r1, #2
 221 007e 2046     		mov	r0, r4
 222 0080 FFF7FEFF 		bl	absolute
 223              	.LVL23:
 153:Ourtasks/adcparams.c **** 	absolute(p, ADC1IDX_HIGHVOLT4); // 
 224              		.loc 1 153 0
 225 0084 0321     		movs	r1, #3
 226 0086 2046     		mov	r0, r4
 227 0088 FFF7FEFF 		bl	absolute
 228              	.LVL24:
 229 008c 10BD     		pop	{r4, pc}
 230              	.L12:
 231 008e 00BF     		.align	2
 232              	.L11:
 233 0090 00010000 		.word	adc1+256
 234              		.cfi_endproc
 235              	.LFE295:
 237              		.comm	adcdbg2,4,4
 238              		.comm	adcdbg1,4,4
 239              		.comm	adc1,616,8
 240              		.text
 241              	.Letext0:
 242              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 243              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 244              		.file 4 "Ourtasks/iir_filter_lx.h"
 245              		.file 5 "Ourtasks/adc_idx_v_struct.h"
 246              		.file 6 "Ourtasks/adcparams.h"
 247              		.file 7 "Drivers/CMSIS/Include/cmsis_gcc.h"
 248              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 249              		.file 9 "Ourtasks/adcparamsinit.h"
ARM GAS  /tmp/ccyzaK0g.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 adcparams.c
     /tmp/ccyzaK0g.s:22     .text.internal:00000000 $t
     /tmp/ccyzaK0g.s:26     .text.internal:00000000 internal
     /tmp/ccyzaK0g.s:74     .text.absolute:00000000 $t
     /tmp/ccyzaK0g.s:78     .text.absolute:00000000 absolute
     /tmp/ccyzaK0g.s:116    .text.adcparams_init:00000000 $t
     /tmp/ccyzaK0g.s:121    .text.adcparams_init:00000000 adcparams_init
     /tmp/ccyzaK0g.s:145    .text.adcparams_init:00000014 $d
                            *COM*:00000268 adc1
     /tmp/ccyzaK0g.s:150    .text.adcparams_cal:00000000 $t
     /tmp/ccyzaK0g.s:155    .text.adcparams_cal:00000000 adcparams_cal
     /tmp/ccyzaK0g.s:233    .text.adcparams_cal:00000090 $d
                            *COM*:00000004 adcdbg2
                            *COM*:00000004 adcdbg1
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
iir_filter_lx_do
adc_idx_v_struct_hardcode_params
adcparamsinit_init
