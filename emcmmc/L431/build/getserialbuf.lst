ARM GAS  /tmp/ccaGxGAl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"getserialbuf.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.getserialbuf,"ax",%progbits
  22              		.align	2
  23              		.global	getserialbuf
  24              		.thumb
  25              		.thumb_func
  27              	getserialbuf:
  28              	.LFB292:
  29              		.file 1 "Ourwares/getserialbuf.c"
   1:Ourwares/getserialbuf.c **** /******************************************************************************
   2:Ourwares/getserialbuf.c **** * File Name          : getserialbuf.c
   3:Ourwares/getserialbuf.c **** * Date First Issued  : 01/12/2019
   4:Ourwares/getserialbuf.c **** * Description        : Get a buffer  & control block for SerialTaskSend use
   5:Ourwares/getserialbuf.c **** *******************************************************************************/
   6:Ourwares/getserialbuf.c **** 
   7:Ourwares/getserialbuf.c **** #include <malloc.h>
   8:Ourwares/getserialbuf.c **** #include "getserialbuf.h"
   9:Ourwares/getserialbuf.c **** 
  10:Ourwares/getserialbuf.c **** /* Reproduced for convenience from 'SerialTaskSend.h'
  11:Ourwares/getserialbuf.c **** struct SERIALSENDTASKBCB
  12:Ourwares/getserialbuf.c **** {
  13:Ourwares/getserialbuf.c **** 	UART_HandleTypeDef* phuart; // Pointer to 'MX uart handle
  14:Ourwares/getserialbuf.c **** 	osThreadId tskhandle;       // Task handle of originating task
  15:Ourwares/getserialbuf.c **** 	SemaphoreHandle_t semaphore;// Semaphore hanlde
  16:Ourwares/getserialbuf.c **** 	uint8_t	*pbuf;             // Pointer to byte buffer to be sent
  17:Ourwares/getserialbuf.c **** 	uint16_t size;              // Number of bytes to be sent
  18:Ourwares/getserialbuf.c **** 	uint16_t maxsize;           // Buffer size 		
  19:Ourwares/getserialbuf.c **** };
  20:Ourwares/getserialbuf.c **** */
  21:Ourwares/getserialbuf.c **** 
  22:Ourwares/getserialbuf.c **** /* *************************************************************************
  23:Ourwares/getserialbuf.c ****  * struct SERIALSENDTASKBCB* getserialbuf( UART_HandleTypeDef* phuart, uint16_t maxsize);
  24:Ourwares/getserialbuf.c ****  * @brief	: Create a buffer control block (BCB) for serial sending
  25:Ourwares/getserialbuf.c ****  * @param	: phuart = usart handle (pointer)
  26:Ourwares/getserialbuf.c ****  * @param	: size = number of uint8_t bytes for this buffer
  27:Ourwares/getserialbuf.c ****  * @return	: pointer to BCB; NULL = failed
  28:Ourwares/getserialbuf.c ****  * *************************************************************************/
  29:Ourwares/getserialbuf.c **** /*
ARM GAS  /tmp/ccaGxGAl.s 			page 2


  30:Ourwares/getserialbuf.c **** Construct a list of "struct NOTEBITLIST" items, for each different usart.
  31:Ourwares/getserialbuf.c **** 
  32:Ourwares/getserialbuf.c **** The items maintain the bit used by SerialTaskSend to notify the originating
  33:Ourwares/getserialbuf.c **** task that the buffer has been sent and is available for reuse.
  34:Ourwares/getserialbuf.c **** */
  35:Ourwares/getserialbuf.c **** struct SERIALSENDTASKBCB* getserialbuf( UART_HandleTypeDef* phuart, uint16_t maxsize)
  36:Ourwares/getserialbuf.c **** {
  30              		.loc 1 36 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 3, -24
  39              		.cfi_offset 4, -20
  40              		.cfi_offset 5, -16
  41              		.cfi_offset 6, -12
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 0646     		mov	r6, r0
  45 0004 0D46     		mov	r5, r1
  37:Ourwares/getserialbuf.c **** /* This must be called AFTER a FreeRTOS task starts so that this routine can call
  38:Ourwares/getserialbuf.c ****    FreeRTOS to get the task handle.
  39:Ourwares/getserialbuf.c **** 
  40:Ourwares/getserialbuf.c **** 	To avoid problems of a time tick switching tasks in the middle of this routine the
  41:Ourwares/getserialbuf.c ****    FreeRTOS interrupts are locked via "taskENTER_CRITICAL();".
  42:Ourwares/getserialbuf.c **** 
  43:Ourwares/getserialbuf.c **** */
  44:Ourwares/getserialbuf.c **** 	/* BCB: Buffer control block, passed on queue to SerialTaskSend. See SerialTaskSend.h */
  45:Ourwares/getserialbuf.c **** 	struct SERIALSENDTASKBCB* pbcb; // calloc'ed bcb pointer
  46:Ourwares/getserialbuf.c **** 
  47:Ourwares/getserialbuf.c **** 	uint8_t* pbuf;	// callloc'ed byte buffer
  48:Ourwares/getserialbuf.c **** 
  49:Ourwares/getserialbuf.c **** taskENTER_CRITICAL();
  46              		.loc 1 49 0
  47 0006 FFF7FEFF 		bl	vPortEnterCritical
  48              	.LVL1:
  50:Ourwares/getserialbuf.c **** 	/* Get one BCB block */
  51:Ourwares/getserialbuf.c **** 	pbcb = (struct SERIALSENDTASKBCB*)calloc(1, sizeof(struct SERIALSENDTASKBCB));	
  49              		.loc 1 51 0
  50 000a 1421     		movs	r1, #20
  51 000c 0120     		movs	r0, #1
  52 000e FFF7FEFF 		bl	calloc
  53              	.LVL2:
  52:Ourwares/getserialbuf.c **** 	if (pbcb == NULL){taskEXIT_CRITICAL(); return NULL;}
  54              		.loc 1 52 0
  55 0012 18B9     		cbnz	r0, .L2
  56              		.loc 1 52 0 is_stmt 0 discriminator 1
  57 0014 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL3:
  59 0018 0020     		movs	r0, #0
  60 001a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  61              	.LVL4:
  62              	.L2:
  63 001c 0446     		mov	r4, r0
ARM GAS  /tmp/ccaGxGAl.s 			page 3


  53:Ourwares/getserialbuf.c **** 
  54:Ourwares/getserialbuf.c **** 	/* Get byte buffer */
  55:Ourwares/getserialbuf.c **** 	pbuf = (uint8_t*)calloc(maxsize, sizeof(uint8_t));	
  64              		.loc 1 55 0 is_stmt 1
  65 001e 0121     		movs	r1, #1
  66 0020 2846     		mov	r0, r5
  67              	.LVL5:
  68 0022 FFF7FEFF 		bl	calloc
  69              	.LVL6:
  56:Ourwares/getserialbuf.c **** 	if (pbuf == NULL) return NULL;
  70              		.loc 1 56 0
  71 0026 0746     		mov	r7, r0
  72 0028 C8B1     		cbz	r0, .L5
  57:Ourwares/getserialbuf.c **** 
  58:Ourwares/getserialbuf.c **** 	/* Initialize the BCB. */
  59:Ourwares/getserialbuf.c **** 	pbcb->phuart    = phuart;  // 'MX uart handle
  73              		.loc 1 59 0
  74 002a 2660     		str	r6, [r4]
  60:Ourwares/getserialbuf.c **** 	pbcb->tskhandle = xTaskGetCurrentTaskHandle();
  75              		.loc 1 60 0
  76 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
  77              	.LVL7:
  78 0030 6060     		str	r0, [r4, #4]
  61:Ourwares/getserialbuf.c **** 	pbcb->pbuf      = pbuf;		// Ptr to uint8_t buffer
  79              		.loc 1 61 0
  80 0032 E760     		str	r7, [r4, #12]
  62:Ourwares/getserialbuf.c **** 	pbcb->maxsize   = maxsize;    // Size of uint8_t buffer
  81              		.loc 1 62 0
  82 0034 6582     		strh	r5, [r4, #18]	@ movhi
  63:Ourwares/getserialbuf.c **** 	pbcb->semaphore = xSemaphoreCreateBinary(); // Semaphore for this buffer
  83              		.loc 1 63 0
  84 0036 0322     		movs	r2, #3
  85 0038 0021     		movs	r1, #0
  86 003a 0120     		movs	r0, #1
  87 003c FFF7FEFF 		bl	xQueueGenericCreate
  88              	.LVL8:
  89 0040 A060     		str	r0, [r4, #8]
  64:Ourwares/getserialbuf.c **** 
  65:Ourwares/getserialbuf.c **** 	if (pbcb->semaphore == NULL){taskEXIT_CRITICAL(); return NULL;}
  90              		.loc 1 65 0
  91 0042 18B9     		cbnz	r0, .L4
  92              		.loc 1 65 0 is_stmt 0 discriminator 1
  93 0044 FFF7FEFF 		bl	vPortExitCritical
  94              	.LVL9:
  95 0048 0020     		movs	r0, #0
  96 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  97              	.LVL10:
  98              	.L4:
  66:Ourwares/getserialbuf.c **** 	xSemaphoreGive(pbcb->semaphore); // Initialize
  99              		.loc 1 66 0 is_stmt 1
 100 004c 0023     		movs	r3, #0
 101 004e 1A46     		mov	r2, r3
 102 0050 1946     		mov	r1, r3
 103 0052 FFF7FEFF 		bl	xQueueGenericSend
 104              	.LVL11:
  67:Ourwares/getserialbuf.c **** 
  68:Ourwares/getserialbuf.c **** taskEXIT_CRITICAL();
ARM GAS  /tmp/ccaGxGAl.s 			page 4


 105              		.loc 1 68 0
 106 0056 FFF7FEFF 		bl	vPortExitCritical
 107              	.LVL12:
  69:Ourwares/getserialbuf.c **** 
  70:Ourwares/getserialbuf.c **** 	return pbcb;
 108              		.loc 1 70 0
 109 005a 2046     		mov	r0, r4
 110 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 111              	.LVL13:
 112              	.L5:
  56:Ourwares/getserialbuf.c **** 
 113              		.loc 1 56 0
 114 005e 0020     		movs	r0, #0
 115              	.LVL14:
  71:Ourwares/getserialbuf.c **** }
 116              		.loc 1 71 0
 117 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 118              		.cfi_endproc
 119              	.LFE292:
 121 0062 00BF     		.text
 122              	.Letext0:
 123              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 124              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 125              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 126              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 127              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 128              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 129              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 130              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 131              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 132              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 133              		.file 12 "Ourwares/SerialTaskSend.h"
 134              		.file 13 "Drivers/CMSIS/Include/cmsis_gcc.h"
 135              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
 136              		.file 15 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/malloc.h"
 137              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccaGxGAl.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 getserialbuf.c
     /tmp/ccaGxGAl.s:22     .text.getserialbuf:00000000 $t
     /tmp/ccaGxGAl.s:27     .text.getserialbuf:00000000 getserialbuf
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
calloc
vPortExitCritical
xTaskGetCurrentTaskHandle
xQueueGenericCreate
xQueueGenericSend
